{
  "_args": [
    [
      "jison@git://github.com/GerHobbelt/jison.git#master",
      "/home/vagrant/visyond/server/v2/node_modules/gulp-jison"
    ]
  ],
  "_from": "git://github.com/GerHobbelt/jison.git#master",
  "_id": "jison@0.4.17-131",
  "_inCache": true,
  "_installable": true,
  "_location": "/jison",
  "_phantomChildren": {
    "json-parse-helpfulerror": "1.0.3"
  },
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/GerHobbelt/jison/master/package.json",
      "gitUrl": "git://github.com/GerHobbelt/jison.git#master",
      "httpsUrl": "git+https://github.com/GerHobbelt/jison.git#master",
      "shortcut": "github:GerHobbelt/jison#master",
      "ssh": "git@github.com:GerHobbelt/jison.git#master",
      "sshUrl": "git+ssh://git@github.com/GerHobbelt/jison.git#master",
      "type": "github"
    },
    "name": "jison",
    "raw": "jison@git://github.com/GerHobbelt/jison.git#master",
    "rawSpec": "git://github.com/GerHobbelt/jison.git#master",
    "scope": null,
    "spec": "git://github.com/GerHobbelt/jison.git#master",
    "type": "hosted"
  },
  "_requiredBy": [
    "/gulp-jison"
  ],
  "_resolved": "git://github.com/GerHobbelt/jison.git#83d3881ff8f0fb5edf340c6e21de778b17ed8d17",
  "_shasum": "390207263baa43aa1c0c877e4c0393e896cb3a44",
  "_shrinkwrap": null,
  "_spec": "jison@git://github.com/GerHobbelt/jison.git#master",
  "_where": "/home/vagrant/visyond/server/v2/node_modules/gulp-jison",
  "author": {
    "email": "zach@carter.name",
    "name": "Zach Carter",
    "url": "http://zaa.ch"
  },
  "bin": {
    "jison": "lib/cli.js"
  },
  "bugs": {
    "email": "jison@librelist.com",
    "url": "http://github.com/zaach/jison/issues"
  },
  "dependencies": {
    "cjson": ">=0.4.0",
    "ebnf-parser": "github:gerhobbelt/ebnf-parser#master",
    "jison-lex": "github:gerhobbelt/jison-lex#master",
    "lex-parser": "github:gerhobbelt/lex-parser#master",
    "nomnom": "github:gerhobbelt/nomnom#master",
    "xregexp": "github:gerhobbelt/xregexp#master"
  },
  "description": "A parser generator with Bison's API",
  "devDependencies": {
    "browserify": ">=13.0.1",
    "test": ">=0.6.0",
    "uglify-js": ">=2.6.2"
  },
  "engines": {
    "node": ">=0.9"
  },
  "gitHead": "83d3881ff8f0fb5edf340c6e21de778b17ed8d17",
  "homepage": "http://jison.org",
  "keywords": [
    "bison",
    "compiler",
    "flex",
    "generator",
    "jison",
    "lexer",
    "parser",
    "tokenizer",
    "yacc"
  ],
  "license": "MIT",
  "main": "lib/jison",
  "name": "jison",
  "optionalDependencies": {},
  "preferGlobal": true,
  "readme": "Jison\n=====\n* [Issues](http://github.com/zaach/jison/issues)\n* [Discuss](mailto:jison@librelist.com)\n\n[![build status](https://secure.travis-ci.org/zaach/jison.png)](http://travis-ci.org/zaach/jison)\n\nAn API for creating parsers in JavaScript\n-----------------------------------------\n\nJison generates bottom-up parsers in JavaScript. Its API is similar to Bison's, hence the name. It supports many of Bison's major features, plus some of its own. If you are new to parser generators such as Bison, and Context-free Grammars in general, a [good introduction][1] is found in the Bison manual. If you already know Bison, Jison should be easy to pickup.\n\nBriefly, Jison takes a JSON encoded grammar or Bison style grammar and outputs a JavaScript file capable of parsing the language described by that grammar. You can then use the generated script to parse inputs and accept, reject, or perform actions based on the input.\n\nInstallation\n------------\nJison can be installed for [Node](http://nodejs.org) using [`npm`](http://github.com/isaacs/npm/)\n\nUsing npm:\n\n    npm install jison -g\n\nUsage from the command line\n---------------------------\n\nClone the github repository for examples:\n\n    git clone git://github.com/zaach/jison.git\n    cd jison/examples\n\nNow you're ready to generate some parsers:\n\n    jison calculator.jison\n\nThis will generate `calculator.js` in your current working directory. This file can be used to parse an input file, like so:\n\n    echo \"2^32 / 1024\" > testcalc\n    node calculator.js testcalc\n\nThis will print out `4194304`.\n\nFull cli option list:\n\n    Usage: jison [file] [lexfile] [options]\n\n    file        file containing a grammar\n    lexfile     file containing a lexical grammar\n\n    Options:\n       -j, --json                    force jison to expect a grammar in JSON format\n       -o FILE, --outfile FILE       Filename and base module name of the generated parser\n       -t, --debug                   Debug mode\n       -m TYPE, --module-type TYPE   The type of module to generate (commonjs, amd, js)\n       -p TYPE, --parser-type TYPE   The type of algorithm to use for the parser (lr0, slr, lalr, lr)\n       -V, --version                 print version and exit\n\n\nUsage from a CommonJS module\n----------------------------\n\nYou can generate parsers programatically from JavaScript as well. Assuming Jison is in your CommonJS environment's load path:\n\n```javascript\n// mygenerator.js\nvar Parser = require(\"jison\").Parser;\n\n// a grammar in JSON\nvar grammar = {\n    \"lex\": {\n        \"rules\": [\n           [\"\\\\s+\", \"/* skip whitespace */\"],\n           [\"[a-f0-9]+\", \"return 'HEX';\"]\n        ]\n    },\n\n    \"bnf\": {\n        \"hex_strings\" :[ \"hex_strings HEX\",\n                         \"HEX\" ]\n    }\n};\n\n// `grammar` can also be a string that uses jison's grammar format\nvar parser = new Parser(grammar);\n\n// generate source, ready to be written to disk\nvar parserSource = parser.generate();\n\n// you can also use the parser directly from memory\n\n// returns true\nparser.parse(\"adfe34bc e82a\");\n\n// throws lexical error\nparser.parse(\"adfe34bc zxg\");\n```\n\nMore Documentation\n------------------\nFor more information on creating grammars and using the generated parsers, read the [documentation](http://jison.org/docs).\n\nHow to contribute\n-----------------\n\nSee [CONTRIBUTING.md](https://github.com/zaach/jison/blob/master/CONTRIBUTING.md) for contribution guidelines, how to run the tests, etc.\n\nProjects using Jison\n--------------------\n\nView them on the [wiki](https://github.com/zaach/jison/wiki/ProjectsUsingJison), or add your own.\n\n\nContributors\n------------\n[Githubbers](http://github.com/zaach/jison/contributors)\n\nSpecial thanks to Jarred Ligatti, Manuel E. BermÃºdez\n\nLicense\n-------\n\n> Copyright (c) 2009-2014 Zachary Carter\n>\n>  Permission is hereby granted, free of\n> charge, to any person  obtaining a\n> copy of this software and associated\n> documentation  files (the \"Software\"),\n> to deal in the Software without\n> restriction, including without\n> limitation the rights to use,  copy,\n> modify, merge, publish, distribute,\n> sublicense, and/or sell  copies of the\n> Software, and to permit persons to\n> whom the  Software is furnished to do\n> so, subject to the following\n> conditions:\n>\n>  The above copyright notice and this\n> permission notice shall be  included\n> in all copies or substantial portions\n> of the Software.\n>\n>  THE SOFTWARE IS PROVIDED \"AS IS\",\n> WITHOUT WARRANTY OF ANY KIND,  EXPRESS\n> OR IMPLIED, INCLUDING BUT NOT LIMITED\n> TO THE WARRANTIES  OF MERCHANTABILITY,\n> FITNESS FOR A PARTICULAR PURPOSE AND\n> NONINFRINGEMENT. IN NO EVENT SHALL THE\n> AUTHORS OR COPYRIGHT  HOLDERS BE\n> LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n> LIABILITY,  WHETHER IN AN ACTION OF\n> CONTRACT, TORT OR OTHERWISE, ARISING\n> FROM, OUT OF OR IN CONNECTION WITH THE\n> SOFTWARE OR THE USE OR  OTHER DEALINGS\n> IN THE SOFTWARE.\n\n\n  [1]: http://dinosaur.compilertools.net/bison/bison_4.html\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/zaach/jison.git"
  },
  "scripts": {
    "test": "node tests/all-tests.js"
  },
  "version": "0.4.17-131"
}
