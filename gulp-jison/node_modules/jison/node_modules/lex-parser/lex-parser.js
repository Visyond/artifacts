/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$, ...),
                (where `...` denotes the (optional) additional arguments the user passed to `parser.parse(str, ...)`)
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),
        stateStackSize: function(),

        options: { ... },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (array describing the set of expected tokens; may be empty when we cannot easily produce such a set)
    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule available for this particular error)
  }
  
  You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
  These options are available:
  
  ### options which are global for all parser instances
  
  Parser.pre_parse: function(yy)
                              optional: you can specify a pre_parse() function in the chunk following the grammar, 
                              i.e. after the last `%%`.
  Parser.post_parse: function(yy, retval) { return retval; }
                              optional: you can specify a post_parse() function in the chunk following the grammar, 
                              i.e. after the last `%%`. When it does not return any value, the parser will return 
                              the original `retval`.
  
  ### options which can be set up per parser instance
  
  yy: {
      pre_parse:  function(yy)
                              optional: is invoked before the parse cycle starts (and before the first invocation 
                              of `lex()`) but immediately after the invocation of parser.pre_parse()).
      post_parse: function(yy, retval) { return retval; }
                              optional: is invoked when the parse terminates due to success ('accept') or failure 
                              (even when exceptions are thrown).  `retval` contains the return value to be produced
                              by `Parser.parse()`; this function can override the return value by returning another. 
                              When it does not return any value, the parser will return the original `retval`. 
                              This function is invoked immediately before `Parser.post_parse()`.
      parseError: function(str, hash)
                              optional: overrides the default `parseError` function.
  }
  
  parser.lexer.options: {
      ranges: boolean         optional: true ==> token location info will include a .range[] member.
      flex: boolean           optional: true ==> flex-like lexing behaviour where the rules are tested
                                                 exhaustively to find the longest match.
      backtrack_lexer: boolean
                              optional: true ==> lexer regexes are tested in order and for each matching
                                                 regex the action code is invoked; the lexer terminates
                                                 the scan when a token is returned by the action code.
      pre_lex:  function()
                              optional: is invoked before the lexer is invoked to produce another token.
                              `this` refers to the Lexer object.
      post_lex: function(token) { return token; }
                              optional: is invoked when the lexer has produced a token `token`;
                              this function can override the returned token value by returning another.
                              When it does not return any (truthy) value, the lexer will return the original `token`.
                              `this` refers to the Lexer object.
  }
*/
var lexParser = (function () {
var __expand__ = function (k, v, o) {
  o = o || {};
  for (var l = k.length; l--; ) {
    o[k[l]] = v;
  }
  return o;
},
    $V0=[11,23,34,37,39,42,43,47,48,49,52,53,54,56,57],
    $V1=[5,11,13,15,17],
    $V2=[5,11,13,15,17,23,34,38],
    $V3=[5,11,13,15,17,23,34,37,38,39,42,43,47,48,49,52,53,54,56,57],
    $V4=[34,38],
    $V5=[5,11,13,15,17,23,31,34,37,38,39,40,41,42,43,47,48,49,52,53,54,55,56,57],
    $V6=[5,11,13,15,17,19],
    $V7=[5,8,11,13,15,17,23,28,34,37,39,42,43,47,48,49,52,53,54,56,57,59],
    $V8=[5,8,11,23,28,34,37,39,42,43,47,48,49,52,53,54,56,57],
    $V9=[8,59],
    $Va=[23,25];
var parser = {
trace: function trace() { },
yy: {},
symbols_: {
  "error": 2,
  "lex": 3,
  "definitions": 4,
  "%%": 5,
  "rules": 6,
  "epilogue": 7,
  "EOF": 8,
  "extra_lexer_module_code": 9,
  "definition": 10,
  "ACTION": 11,
  "include_macro_code": 12,
  "NAME": 13,
  "regex": 14,
  "START_INC": 15,
  "names_inclusive": 16,
  "START_EXC": 17,
  "names_exclusive": 18,
  "START_COND": 19,
  "rule": 20,
  "start_conditions": 21,
  "action": 22,
  "{": 23,
  "action_body": 24,
  "}": 25,
  "action_comments_body": 26,
  "ACTION_BODY": 27,
  "<": 28,
  "name_list": 29,
  ">": 30,
  "*": 31,
  ",": 32,
  "regex_list": 33,
  "|": 34,
  "regex_concat": 35,
  "regex_base": 36,
  "(": 37,
  ")": 38,
  "SPECIAL_GROUP": 39,
  "+": 40,
  "?": 41,
  "/": 42,
  "/!": 43,
  "name_expansion": 44,
  "range_regex": 45,
  "any_group_regex": 46,
  ".": 47,
  "^": 48,
  "$": 49,
  "string": 50,
  "escape_char": 51,
  "NAME_BRACE": 52,
  "ANY_GROUP_REGEX": 53,
  "ESCAPE_CHAR": 54,
  "RANGE_REGEX": 55,
  "STRING_LIT": 56,
  "CHARACTER_LIT": 57,
  "optional_module_code_chunk": 58,
  "INCLUDE": 59,
  "PATH": 60,
  "module_code_chunk": 61,
  "CODE": 62,
  "$accept": 0,
  "$end": 1
},
terminals_: {
  2: "error",
  5: "%%",
  8: "EOF",
  11: "ACTION",
  13: "NAME",
  15: "START_INC",
  17: "START_EXC",
  19: "START_COND",
  23: "{",
  25: "}",
  27: "ACTION_BODY",
  28: "<",
  30: ">",
  31: "*",
  32: ",",
  34: "|",
  37: "(",
  38: ")",
  39: "SPECIAL_GROUP",
  40: "+",
  41: "?",
  42: "/",
  43: "/!",
  47: ".",
  48: "^",
  49: "$",
  52: "NAME_BRACE",
  53: "ANY_GROUP_REGEX",
  54: "ESCAPE_CHAR",
  55: "RANGE_REGEX",
  56: "STRING_LIT",
  57: "CHARACTER_LIT",
  59: "INCLUDE",
  60: "PATH",
  62: "CODE"
},
productions_: [
  0,
  [
    3,
    4
  ],
  [
    7,
    1
  ],
  [
    7,
    3
  ],
  [
    4,
    2
  ],
  [
    4,
    2
  ],
  [
    4,
    2
  ],
  [
    4,
    0
  ],
  [
    10,
    2
  ],
  [
    10,
    2
  ],
  [
    10,
    2
  ],
  [
    16,
    1
  ],
  [
    16,
    2
  ],
  [
    18,
    1
  ],
  [
    18,
    2
  ],
  [
    6,
    2
  ],
  [
    6,
    1
  ],
  [
    20,
    3
  ],
  [
    22,
    3
  ],
  [
    22,
    1
  ],
  [
    22,
    1
  ],
  [
    24,
    0
  ],
  [
    24,
    1
  ],
  [
    24,
    5
  ],
  [
    24,
    4
  ],
  [
    26,
    1
  ],
  [
    26,
    2
  ],
  [
    21,
    3
  ],
  [
    21,
    3
  ],
  [
    21,
    0
  ],
  [
    29,
    1
  ],
  [
    29,
    3
  ],
  [
    14,
    1
  ],
  [
    33,
    3
  ],
  [
    33,
    2
  ],
  [
    33,
    1
  ],
  [
    33,
    0
  ],
  [
    35,
    2
  ],
  [
    35,
    1
  ],
  [
    36,
    3
  ],
  [
    36,
    3
  ],
  [
    36,
    2
  ],
  [
    36,
    2
  ],
  [
    36,
    2
  ],
  [
    36,
    2
  ],
  [
    36,
    2
  ],
  [
    36,
    1
  ],
  [
    36,
    2
  ],
  [
    36,
    1
  ],
  [
    36,
    1
  ],
  [
    36,
    1
  ],
  [
    36,
    1
  ],
  [
    36,
    1
  ],
  [
    36,
    1
  ],
  [
    44,
    1
  ],
  [
    46,
    1
  ],
  [
    51,
    1
  ],
  [
    45,
    1
  ],
  [
    50,
    1
  ],
  [
    50,
    1
  ],
  [
    9,
    1
  ],
  [
    9,
    3
  ],
  [
    12,
    2
  ],
  [
    12,
    2
  ],
  [
    61,
    1
  ],
  [
    61,
    2
  ],
  [
    58,
    1
  ],
  [
    58,
    0
  ]
],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1 : 
/*! Production::     lex : definitions %% rules epilogue */
 
          this.$ = { rules: $$[$0-1] };
          if ($$[$0-3][0]) this.$.macros = $$[$0-3][0];
          if ($$[$0-3][1]) this.$.startConditions = $$[$0-3][1];
          if ($$[$0] && $$[$0].trim() !== '') this.$.moduleInclude = $$[$0];
          if (yy.options) this.$.options = yy.options;
          if (yy.actionInclude) this.$.actionInclude = yy.actionInclude;
          delete yy.options;
          delete yy.actionInclude;
          return this.$;
         
break;
case 2 : 
/*! Production::     epilogue : EOF */
  this.$ = null;  
break;
case 3 : 
/*! Production::     epilogue : %% extra_lexer_module_code EOF */
 case 18 : 
/*! Production::     action : { action_body } */
 case 27 : 
/*! Production::     start_conditions : < name_list > */
  this.$ = $$[$0-1];  
break;
case 4 : 
/*! Production::     definitions : definition definitions */
 
          this.$ = $$[$0];
          if ('length' in $$[$0-1]) {
            this.$[0] = this.$[0] || {};
            this.$[0][$$[$0-1][0]] = $$[$0-1][1];
          } else {
            this.$[1] = this.$[1] || {};
            for (var name in $$[$0-1]) {
              this.$[1][name] = $$[$0-1][name];
            }
          }
         
break;
case 5 : 
/*! Production::     definitions : ACTION definitions */
 case 6 : 
/*! Production::     definitions : include_macro_code definitions */
  yy.actionInclude += $$[$0-1]; this.$ = $$[$0];  
break;
case 7 : 
/*! Production::     definitions :  */
  yy.actionInclude = ''; this.$ = [null, null];  
break;
case 8 : 
/*! Production::     definition : NAME regex */
  this.$ = [$$[$0-1], $$[$0]];  
break;
case 9 : 
/*! Production::     definition : START_INC names_inclusive */
 case 10 : 
/*! Production::     definition : START_EXC names_exclusive */
 case 19 : 
/*! Production::     action : ACTION */
 case 20 : 
/*! Production::     action : include_macro_code */
 case 22 : 
/*! Production::     action_body : action_comments_body */
 case 25 : 
/*! Production::     action_comments_body : ACTION_BODY */
 case 55 : 
/*! Production::     any_group_regex : ANY_GROUP_REGEX */
 case 56 : 
/*! Production::     escape_char : ESCAPE_CHAR */
 case 57 : 
/*! Production::     range_regex : RANGE_REGEX */
 case 60 : 
/*! Production::     extra_lexer_module_code : optional_module_code_chunk */
 case 64 : 
/*! Production::     module_code_chunk : CODE */
 case 66 : 
/*! Production::     optional_module_code_chunk : module_code_chunk */
  this.$ = $$[$0];  
break;
case 11 : 
/*! Production::     names_inclusive : START_COND */
  this.$ = {}; this.$[$$[$0]] = 0;  
break;
case 12 : 
/*! Production::     names_inclusive : names_inclusive START_COND */
  this.$ = $$[$0-1]; this.$[$$[$0]] = 0;  
break;
case 13 : 
/*! Production::     names_exclusive : START_COND */
  this.$ = {}; this.$[$$[$0]] = 1;  
break;
case 14 : 
/*! Production::     names_exclusive : names_exclusive START_COND */
  this.$ = $$[$0-1]; this.$[$$[$0]] = 1;  
break;
case 15 : 
/*! Production::     rules : rules rule */
  this.$ = $$[$0-1]; this.$.push($$[$0]);  
break;
case 16 : 
/*! Production::     rules : rule */
 case 30 : 
/*! Production::     name_list : NAME */
  this.$ = [$$[$0]];  
break;
case 17 : 
/*! Production::     rule : start_conditions regex action */
  this.$ = $$[$0-2] ? [$$[$0-2], $$[$0-1], $$[$0]] : [$$[$0-1], $$[$0]];  
break;
case 21 : 
/*! Production::     action_body :  */
 case 36 : 
/*! Production::     regex_list :  */
 case 67 : 
/*! Production::     optional_module_code_chunk :  */
  this.$ = '';  
break;
case 23 : 
/*! Production::     action_body : action_body { action_body } action_comments_body */
  this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];  
break;
case 24 : 
/*! Production::     action_body : action_body { action_body } */
  this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];  
break;
case 26 : 
/*! Production::     action_comments_body : action_comments_body ACTION_BODY */
 case 37 : 
/*! Production::     regex_concat : regex_concat regex_base */
 case 47 : 
/*! Production::     regex_base : regex_base range_regex */
 case 65 : 
/*! Production::     module_code_chunk : module_code_chunk CODE */
  this.$ = $$[$0-1] + $$[$0];  
break;
case 28 : 
/*! Production::     start_conditions : < * > */
  this.$ = ['*'];  
break;
case 31 : 
/*! Production::     name_list : name_list , NAME */
  this.$ = $$[$0-2]; this.$.push($$[$0]);  
break;
case 32 : 
/*! Production::     regex : regex_list */
 
          this.$ = $$[$0];
          if (yy.options && yy.options.easy_keyword_rules && this.$.match(/[\w\d]$/) && !this.$.match(/\\(r|f|n|t|v|s|b|c[A-Z]|x[0-9A-F]{2}|u[a-fA-F0-9]{4}|[0-7]{1,3})$/)) {
              this.$ += "\\b";
          }
         
break;
case 33 : 
/*! Production::     regex_list : regex_list | regex_concat */
  this.$ = $$[$0-2] + '|' + $$[$0];  
break;
case 34 : 
/*! Production::     regex_list : regex_list | */
  this.$ = $$[$0-1] + '|';  
break;
case 39 : 
/*! Production::     regex_base : ( regex_list ) */
  this.$ = '(' + $$[$0-1] + ')';  
break;
case 40 : 
/*! Production::     regex_base : SPECIAL_GROUP regex_list ) */
  this.$ = $$[$0-2] + $$[$0-1] + ')';  
break;
case 41 : 
/*! Production::     regex_base : regex_base + */
  this.$ = $$[$0-1] + '+';  
break;
case 42 : 
/*! Production::     regex_base : regex_base * */
  this.$ = $$[$0-1] + '*';  
break;
case 43 : 
/*! Production::     regex_base : regex_base ? */
  this.$ = $$[$0-1] + '?';  
break;
case 44 : 
/*! Production::     regex_base : / regex_base */
  this.$ = '(?=' + $$[$0] + ')';  
break;
case 45 : 
/*! Production::     regex_base : /! regex_base */
  this.$ = '(?!' + $$[$0] + ')';  
break;
case 49 : 
/*! Production::     regex_base : . */
  this.$ = '.';  
break;
case 50 : 
/*! Production::     regex_base : ^ */
  this.$ = '^';  
break;
case 51 : 
/*! Production::     regex_base : $ */
  this.$ = '$';  
break;
case 58 : 
/*! Production::     string : STRING_LIT */
  this.$ = prepareString($$[$0].substr(1, $$[$0].length - 2));  
break;
case 61 : 
/*! Production::     extra_lexer_module_code : optional_module_code_chunk include_macro_code extra_lexer_module_code */
  this.$ = $$[$0-2] + $$[$0-1] + $$[$0];  
break;
case 62 : 
/*! Production::     include_macro_code : INCLUDE PATH */
  
            var fs = require('fs');
            var fileContent = fs.readFileSync($$[$0], { encoding: 'utf-8' });
            // And no, we don't support nested '%include':
            this.$ = '\n// Included by Jison: ' + $$[$0] + ':\n\n' + fileContent + '\n\n// End Of Include by Jison: ' + $$[$0] + '\n\n';
         
break;
case 63 : 
/*! Production::     include_macro_code : INCLUDE error */
  
            console.error("%include MUST be followed by a valid file path"); 
         
break;
}
},
table: [
  {
    3: 1,
    4: 2,
    5: [
      2,
      7
    ],
    10: 3,
    11: [
      1,
      4
    ],
    12: 5,
    13: [
      1,
      6
    ],
    15: [
      1,
      7
    ],
    17: [
      1,
      8
    ],
    59: [
      1,
      9
    ]
  },
  {
    1: [
      3
    ]
  },
  {
    5: [
      1,
      10
    ]
  },
  {
    4: 11,
    5: [
      2,
      7
    ],
    10: 3,
    11: [
      1,
      4
    ],
    12: 5,
    13: [
      1,
      6
    ],
    15: [
      1,
      7
    ],
    17: [
      1,
      8
    ],
    59: [
      1,
      9
    ]
  },
  {
    4: 12,
    5: [
      2,
      7
    ],
    10: 3,
    11: [
      1,
      4
    ],
    12: 5,
    13: [
      1,
      6
    ],
    15: [
      1,
      7
    ],
    17: [
      1,
      8
    ],
    59: [
      1,
      9
    ]
  },
  {
    4: 13,
    5: [
      2,
      7
    ],
    10: 3,
    11: [
      1,
      4
    ],
    12: 5,
    13: [
      1,
      6
    ],
    15: [
      1,
      7
    ],
    17: [
      1,
      8
    ],
    59: [
      1,
      9
    ]
  },
  __expand__([5,11,13,15,17,34], [
      2,
      36
    ], {14:14,33:15,35:16,36:17,44:22,46:23,50:27,51:28,37:[
      1,
      18
    ],39:[
      1,
      19
    ],42:[
      1,
      20
    ],43:[
      1,
      21
    ],47:[
      1,
      24
    ],48:[
      1,
      25
    ],49:[
      1,
      26
    ],52:[
      1,
      29
    ],53:[
      1,
      30
    ],54:[
      1,
      33
    ],56:[
      1,
      31
    ],57:[
      1,
      32
    ],59:[
      2,
      36
    ]
  }),
  {
    16: 34,
    19: [
      1,
      35
    ]
  },
  {
    18: 36,
    19: [
      1,
      37
    ]
  },
  {
    2: [
      1,
      39
    ],
    60: [
      1,
      38
    ]
  },
  __expand__($V0, [
      2,
      29
    ], {6:40,20:41,21:42,28:[
      1,
      43
    ],59:[
      2,
      29
    ]
  }),
  {
    5: [
      2,
      4
    ]
  },
  {
    5: [
      2,
      5
    ]
  },
  {
    5: [
      2,
      6
    ]
  },
  __expand__($V1, [
      2,
      8
    ], {59:[
      2,
      8
    ]
  }),
  __expand__([5,11,13,15,17,23], [
      2,
      32
    ], {34:[
      1,
      44
    ],59:[
      2,
      32
    ]
  }),
  __expand__($V2, [
      2,
      35
    ], {44:22,46:23,50:27,51:28,36:45,37:[
      1,
      18
    ],39:[
      1,
      19
    ],42:[
      1,
      20
    ],43:[
      1,
      21
    ],47:[
      1,
      24
    ],48:[
      1,
      25
    ],49:[
      1,
      26
    ],52:[
      1,
      29
    ],53:[
      1,
      30
    ],54:[
      1,
      33
    ],56:[
      1,
      31
    ],57:[
      1,
      32
    ],59:[
      2,
      35
    ]
  }),
  __expand__($V3, [
      2,
      38
    ], {45:49,31:[
      1,
      47
    ],40:[
      1,
      46
    ],41:[
      1,
      48
    ],55:[
      1,
      50
    ],59:[
      2,
      38
    ]
  }),
  __expand__($V4, [
      2,
      36
    ], {35:16,36:17,44:22,46:23,50:27,51:28,33:51,37:[
      1,
      18
    ],39:[
      1,
      19
    ],42:[
      1,
      20
    ],43:[
      1,
      21
    ],47:[
      1,
      24
    ],48:[
      1,
      25
    ],49:[
      1,
      26
    ],52:[
      1,
      29
    ],53:[
      1,
      30
    ],54:[
      1,
      33
    ],56:[
      1,
      31
    ],57:[
      1,
      32
    ]
  }),
  __expand__($V4, [
      2,
      36
    ], {35:16,36:17,44:22,46:23,50:27,51:28,33:52,37:[
      1,
      18
    ],39:[
      1,
      19
    ],42:[
      1,
      20
    ],43:[
      1,
      21
    ],47:[
      1,
      24
    ],48:[
      1,
      25
    ],49:[
      1,
      26
    ],52:[
      1,
      29
    ],53:[
      1,
      30
    ],54:[
      1,
      33
    ],56:[
      1,
      31
    ],57:[
      1,
      32
    ]
  }),
  {
    36: 53,
    37: [
      1,
      18
    ],
    39: [
      1,
      19
    ],
    42: [
      1,
      20
    ],
    43: [
      1,
      21
    ],
    44: 22,
    46: 23,
    47: [
      1,
      24
    ],
    48: [
      1,
      25
    ],
    49: [
      1,
      26
    ],
    50: 27,
    51: 28,
    52: [
      1,
      29
    ],
    53: [
      1,
      30
    ],
    54: [
      1,
      33
    ],
    56: [
      1,
      31
    ],
    57: [
      1,
      32
    ]
  },
  {
    36: 54,
    37: [
      1,
      18
    ],
    39: [
      1,
      19
    ],
    42: [
      1,
      20
    ],
    43: [
      1,
      21
    ],
    44: 22,
    46: 23,
    47: [
      1,
      24
    ],
    48: [
      1,
      25
    ],
    49: [
      1,
      26
    ],
    50: 27,
    51: 28,
    52: [
      1,
      29
    ],
    53: [
      1,
      30
    ],
    54: [
      1,
      33
    ],
    56: [
      1,
      31
    ],
    57: [
      1,
      32
    ]
  },
  __expand__($V5, [
      2,
      46
    ], {59:[
      2,
      46
    ]
  }),
  __expand__($V5, [
      2,
      48
    ], {59:[
      2,
      48
    ]
  }),
  __expand__($V5, [
      2,
      49
    ], {59:[
      2,
      49
    ]
  }),
  __expand__($V5, [
      2,
      50
    ], {59:[
      2,
      50
    ]
  }),
  __expand__($V5, [
      2,
      51
    ], {59:[
      2,
      51
    ]
  }),
  __expand__($V5, [
      2,
      52
    ], {59:[
      2,
      52
    ]
  }),
  __expand__($V5, [
      2,
      53
    ], {59:[
      2,
      53
    ]
  }),
  __expand__($V5, [
      2,
      54
    ], {59:[
      2,
      54
    ]
  }),
  __expand__($V5, [
      2,
      55
    ], {59:[
      2,
      55
    ]
  }),
  __expand__($V5, [
      2,
      58
    ], {59:[
      2,
      58
    ]
  }),
  __expand__($V5, [
      2,
      59
    ], {59:[
      2,
      59
    ]
  }),
  __expand__($V5, [
      2,
      56
    ], {59:[
      2,
      56
    ]
  }),
  __expand__($V1, [
      2,
      9
    ], {19:[
      1,
      55
    ],59:[
      2,
      9
    ]
  }),
  __expand__($V6, [
      2,
      11
    ], {59:[
      2,
      11
    ]
  }),
  __expand__($V1, [
      2,
      10
    ], {19:[
      1,
      56
    ],59:[
      2,
      10
    ]
  }),
  __expand__($V6, [
      2,
      13
    ], {59:[
      2,
      13
    ]
  }),
  __expand__($V7, [
      2,
      62
    ], {62:[
      2,
      62
    ]
  }),
  __expand__($V7, [
      2,
      63
    ], {62:[
      2,
      63
    ]
  }),
  __expand__($V0, [
      2,
      29
    ], {21:42,7:57,20:58,5:[
      1,
      60
    ],8:[
      1,
      59
    ],28:[
      1,
      43
    ],59:[
      2,
      29
    ]
  }),
  __expand__($V8, [
      2,
      16
    ], {59:[
      2,
      16
    ]
  }),
  __expand__([11,23,34], [
      2,
      36
    ], {33:15,35:16,36:17,44:22,46:23,50:27,51:28,14:61,37:[
      1,
      18
    ],39:[
      1,
      19
    ],42:[
      1,
      20
    ],43:[
      1,
      21
    ],47:[
      1,
      24
    ],48:[
      1,
      25
    ],49:[
      1,
      26
    ],52:[
      1,
      29
    ],53:[
      1,
      30
    ],54:[
      1,
      33
    ],56:[
      1,
      31
    ],57:[
      1,
      32
    ],59:[
      2,
      36
    ]
  }),
  {
    13: [
      1,
      64
    ],
    29: 62,
    31: [
      1,
      63
    ]
  },
  __expand__($V2, [
      2,
      34
    ], {36:17,44:22,46:23,50:27,51:28,35:65,37:[
      1,
      18
    ],39:[
      1,
      19
    ],42:[
      1,
      20
    ],43:[
      1,
      21
    ],47:[
      1,
      24
    ],48:[
      1,
      25
    ],49:[
      1,
      26
    ],52:[
      1,
      29
    ],53:[
      1,
      30
    ],54:[
      1,
      33
    ],56:[
      1,
      31
    ],57:[
      1,
      32
    ],59:[
      2,
      34
    ]
  }),
  __expand__($V3, [
      2,
      37
    ], {45:49,31:[
      1,
      47
    ],40:[
      1,
      46
    ],41:[
      1,
      48
    ],55:[
      1,
      50
    ],59:[
      2,
      37
    ]
  }),
  __expand__($V5, [
      2,
      41
    ], {59:[
      2,
      41
    ]
  }),
  __expand__($V5, [
      2,
      42
    ], {59:[
      2,
      42
    ]
  }),
  __expand__($V5, [
      2,
      43
    ], {59:[
      2,
      43
    ]
  }),
  __expand__($V5, [
      2,
      47
    ], {59:[
      2,
      47
    ]
  }),
  __expand__($V5, [
      2,
      57
    ], {59:[
      2,
      57
    ]
  }),
  {
    34: [
      1,
      44
    ],
    38: [
      1,
      66
    ]
  },
  {
    34: [
      1,
      44
    ],
    38: [
      1,
      67
    ]
  },
  __expand__($V3, [
      2,
      44
    ], {45:49,31:[
      1,
      47
    ],40:[
      1,
      46
    ],41:[
      1,
      48
    ],55:[
      1,
      50
    ],59:[
      2,
      44
    ]
  }),
  __expand__($V3, [
      2,
      45
    ], {45:49,31:[
      1,
      47
    ],40:[
      1,
      46
    ],41:[
      1,
      48
    ],55:[
      1,
      50
    ],59:[
      2,
      45
    ]
  }),
  __expand__($V6, [
      2,
      12
    ], {59:[
      2,
      12
    ]
  }),
  __expand__($V6, [
      2,
      14
    ], {59:[
      2,
      14
    ]
  }),
  {
    1: [
      2,
      1
    ]
  },
  __expand__($V8, [
      2,
      15
    ], {59:[
      2,
      15
    ]
  }),
  {
    1: [
      2,
      2
    ]
  },
  __expand__($V9, [
      2,
      67
    ], {9:68,58:69,61:70,62:[
      1,
      71
    ]
  }),
  {
    11: [
      1,
      74
    ],
    12: 75,
    22: 72,
    23: [
      1,
      73
    ],
    59: [
      1,
      9
    ]
  },
  {
    30: [
      1,
      76
    ],
    32: [
      1,
      77
    ]
  },
  {
    30: [
      1,
      78
    ]
  },
  {
    30: [
      2,
      30
    ],
    32: [
      2,
      30
    ]
  },
  __expand__($V2, [
      2,
      33
    ], {44:22,46:23,50:27,51:28,36:45,37:[
      1,
      18
    ],39:[
      1,
      19
    ],42:[
      1,
      20
    ],43:[
      1,
      21
    ],47:[
      1,
      24
    ],48:[
      1,
      25
    ],49:[
      1,
      26
    ],52:[
      1,
      29
    ],53:[
      1,
      30
    ],54:[
      1,
      33
    ],56:[
      1,
      31
    ],57:[
      1,
      32
    ],59:[
      2,
      33
    ]
  }),
  __expand__($V5, [
      2,
      39
    ], {59:[
      2,
      39
    ]
  }),
  __expand__($V5, [
      2,
      40
    ], {59:[
      2,
      40
    ]
  }),
  {
    8: [
      1,
      79
    ]
  },
  {
    8: [
      2,
      60
    ],
    12: 80,
    59: [
      1,
      9
    ]
  },
  __expand__($V9, [
      2,
      66
    ], {62:[
      1,
      81
    ]
  }),
  __expand__($V9, [
      2,
      64
    ], {62:[
      2,
      64
    ]
  }),
  __expand__($V8, [
      2,
      17
    ], {59:[
      2,
      17
    ]
  }),
  __expand__($Va, [
      2,
      21
    ], {24:82,26:83,27:[
      1,
      84
    ]
  }),
  __expand__($V8, [
      2,
      19
    ], {59:[
      2,
      19
    ]
  }),
  __expand__($V8, [
      2,
      20
    ], {59:[
      2,
      20
    ]
  }),
  __expand__($V0, [
      2,
      27
    ], {59:[
      2,
      27
    ]
  }),
  {
    13: [
      1,
      85
    ]
  },
  __expand__($V0, [
      2,
      28
    ], {59:[
      2,
      28
    ]
  }),
  {
    1: [
      2,
      3
    ]
  },
  __expand__($V9, [
      2,
      67
    ], {58:69,61:70,9:86,62:[
      1,
      71
    ]
  }),
  __expand__($V9, [
      2,
      65
    ], {62:[
      2,
      65
    ]
  }),
  {
    23: [
      1,
      88
    ],
    25: [
      1,
      87
    ]
  },
  __expand__($Va, [
      2,
      22
    ], {27:[
      1,
      89
    ]
  }),
  __expand__($Va, [
      2,
      25
    ], {27:[
      2,
      25
    ]
  }),
  {
    30: [
      2,
      31
    ],
    32: [
      2,
      31
    ]
  },
  {
    8: [
      2,
      61
    ]
  },
  __expand__($V8, [
      2,
      18
    ], {59:[
      2,
      18
    ]
  }),
  __expand__($Va, [
      2,
      21
    ], {26:83,24:90,27:[
      1,
      84
    ]
  }),
  __expand__($Va, [
      2,
      26
    ], {27:[
      2,
      26
    ]
  }),
  {
    23: [
      1,
      88
    ],
    25: [
      1,
      91
    ]
  },
  __expand__($Va, [
      2,
      24
    ], {26:92,27:[
      1,
      84
    ]
  }),
  __expand__($Va, [
      2,
      23
    ], {27:[
      1,
      89
    ]
  })
],
defaultActions: {
  11: [
    2,
    4
  ],
  12: [
    2,
    5
  ],
  13: [
    2,
    6
  ],
  57: [
    2,
    1
  ],
  59: [
    2,
    2
  ],
  79: [
    2,
    3
  ],
  86: [
    2,
    61
  ]
},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = new Error();

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],

        vstack = [null],    // semantic value stack
        lstack = [],        // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,     // (only used when the grammar contains error recovery rules)
        error_signaled = false,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer;
    if (this.__lexer__) {
        lexer = this.__lexer__;
    } else {
        lexer = this.__lexer__ = Object.create(this.lexer);
    }

    var sharedState = { 
      yy: {} 
    };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc === 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError; // because in the generated code 'this.__proto__.parseError' doesn't work for everyone: http://javascriptweblog.wordpress.com/2010/06/07/understanding-javascript-prototypes/
    }

    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

    function lex() {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol;
    var preErrorSymbol = null;
    var state, action, a, r;
    var yyval = {};
    var p, len, len1, this_production, lstack_begin, lstack_end, newState;
    var expected = [];
    var retval = false;

    if (this.pre_parse) {
        this.pre_parse.call(this, sharedState.yy);
    }
    if (sharedState.yy.pre_parse) {
        sharedState.yy.pre_parse.call(this, sharedState.yy);
    }

    // Return the rule stack depth where the nearest error rule can be found.
    // Return FALSE when no error recovery rule was found.
    function locateNearestErrorRecoveryRule(state) {
        var stack_probe = stack.length - 1;
        var depth = 0;

        // try to recover from error
        for (;;) {
            // check for error recovery rule in this state
            if ((TERROR.toString()) in table[state]) {
                return depth;
            }
            if (state === 0 || stack_probe < 2) {
                return false; // No suitable error recovery rule available.
            }
            stack_probe -= 2; // popStack(1): [symbol, action]
            state = stack[stack_probe];
            ++depth;
        }
    }


    function collect_expected_token_set(state) {
        var tokenset = [];
        for (var p in table[state]) {
            if (p > TERROR) {
                if (self.terminal_descriptions_ && self.terminal_descriptions_[p]) {
                    tokenset.push(self.terminal_descriptions_[p]);
                }
                else if (self.terminals_[p]) {
                    tokenset.push("'" + self.terminals_[p] + "'");
                }
            }
        }
        return tokenset;
    }

    try {
        for (;;) {
            // retrieve state number from top of stack
            state = stack[stack.length - 1];

            // use default actions if available
            if (this.defaultActions[state]) {
                action = this.defaultActions[state];
            } else {
                if (symbol === null || typeof symbol === 'undefined') {
                    symbol = lex();
                }
                // read action for current state and first input
                action = table[state] && table[state][symbol];
            }

            // handle parse error
            if (typeof action === 'undefined' || !action.length || !action[0]) {
                var error_rule_depth;
                var errStr = '';

                if (!recovering) {
                    // first see if there's any chance at hitting an error recovery rule:
                    error_rule_depth = locateNearestErrorRecoveryRule(state);

                    // Report error
                    expected = collect_expected_token_set(state);
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' +
                                 (symbol === EOF ? 'end of input' :
                                  ("'" + (this.terminals_[symbol] || symbol) + "'"));
                    }
                    error_signaled = true;
                    a = this.parseError(errStr, p = {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected,
                        recoverable: (error_rule_depth !== false)
                    });
                    if (!p.recoverable) {
                        retval = a;
                        break;
                    }
                } else if (preErrorSymbol !== EOF) {
                    error_rule_depth = locateNearestErrorRecoveryRule(state);
                }

                // just recovered from another error
                if (recovering === 3) {
                    if (symbol === EOF || preErrorSymbol === EOF) {
                        error_signaled = true;
                        retval = this.parseError(errStr || 'Parsing halted while starting to recover from another error.', {
                            text: lexer.match,
                            token: this.terminals_[symbol] || symbol,
                            line: lexer.yylineno,
                            loc: yyloc,
                            expected: expected,
                            recoverable: false
                        });
                        break;
                    }

                    // discard current lookahead and grab another
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    symbol = lex();
                }

                // try to recover from error
                if (error_rule_depth === false) {
                    error_signaled = true;
                    retval = this.parseError(errStr || 'Parsing halted. No suitable error recovery rule available.', {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected,
                        recoverable: false
                    });
                    break;
                }
                popStack(error_rule_depth);

                preErrorSymbol = (symbol === TERROR ? null : symbol); // save the lookahead token
                symbol = TERROR;         // insert generic error symbol as new lookahead
                state = stack[stack.length - 1];
                action = table[state] && table[state][TERROR];
                recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
            }


            // this shouldn't happen, unless resolve defaults are off
            if (action[0] instanceof Array && action.length > 1) {
                error_signaled = true;
                retval = this.parseError('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: false
                });
                break;
            }

            switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution / no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                continue;

            case 2:
                // reduce
                //this.reductionCount++;

                this_production = this.productions_[action[1]]; 
                len = this_production[1];
                lstack_end = lstack.length;
                lstack_begin = lstack_end - (len1 || 1);
                lstack_end--;

                // perform semantic action
                yyval.$ = vstack[vstack.length - len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack_begin].first_line,
                    last_line: lstack[lstack_end].last_line,
                    first_column: lstack[lstack_begin].first_column,
                    last_column: lstack[lstack_end].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack_begin].range[0], lstack[lstack_end].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    retval = r;
                    error_signaled = true;
                    break;
                }

                // pop off stack
                if (len) {
                    popStack(len);
                }

                stack.push(this_production[0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                stack.push(newState);
                continue;

            case 3:
                // accept
                retval = true;
                error_signaled = true;
                break;
            }

            // break out of loop: we accept or fail with error
            if (!error_signaled) {
                // b0rk b0rk b0rk!
            }
            break;
        }
    } finally {
        var rv;

        if (sharedState.yy.post_parse) {
            rv = sharedState.yy.post_parse.call(this, sharedState.yy, retval);
            if (typeof rv !== 'undefined') retval = rv;
        }
        if (this.post_parse) {
            rv = this.post_parse.call(this, sharedState.yy, retval);
            if (typeof rv !== 'undefined') retval = rv;
        }
    }

    return retval;
}
};


function encodeRE (s) {
    return s.replace(/([.*+?^${}()|[\]\/\\])/g, '\\$1').replace(/\\\\u([a-fA-F0-9]{4})/g, '\\u$1');
}

function prepareString (s) {
    // unescape slashes
    s = s.replace(/\\\\/g, "\\");
    s = encodeRE(s);
    return s;
};


/* generated by jison-lex 0.3.4 */
var lexer = (function () {
var lexer = ({

EOF:1,

ERROR:2,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            return this.yy.parser.parseError(str, hash) || this.ERROR;
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this._signaled_error_token = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        // Count the linenumber up when we hit the LF (or a stand-alone CR).
        // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
        // and we advance immediately past the LF as well, returning both together as if 
        // it was all a single 'character' only.
        var slice_len = 1;
        var lines = false;
        if (ch === '\n') {
            lines = true;
        } else if (ch === '\r') {
            lines = true;
            var ch2 = this._input[1];
            if (ch2 === '\n') {
                slice_len++;
                ch += ch2;
                this.yytext += ch2;
                this.yyleng++;
                this.offset++;
                this.match += ch2;
                this.matched += ch2;
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }
            }
        } 
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(slice_len);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - len);
        this.matched = this.matched.substr(0, this.matched.length - len);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                + oldLines[oldLines.length - lines.length].length - lines[0].length :
                this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            // when the parseError() call returns, we MUST ensure that the error is registered.
            // We accomplish this by signaling an 'error' token to be produced for the current
            // .lex() run.
            this._signaled_error_token = (this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: this.match,
                token: null,
                line: this.yylineno,
                loc: this.yylloc
            }) || this.ERROR);
        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// return (part of the) already matched input, i.e. for error messages
pastInput:function (maxSize) {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        if (maxSize < 0)
            maxSize = past.length;
        else if (!maxSize)
            maxSize = 20;
        return (past.length > maxSize ? '...' + past.substr(-maxSize) : past);
    },

// return (part of the) upcoming input, i.e. for error messages
upcomingInput:function (maxSize) {
        var next = this.match;
        if (maxSize < 0)
            maxSize = next.length + this._input.length;
        else if (!maxSize)
            maxSize = 20;
        if (next.length < maxSize) {
            next += this._input.substr(0, maxSize - next.length);
        }
        return (next.length > maxSize ? next.substr(0, maxSize) + '...' : next);
    },

// return a string which displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput().replace(/\s/g, ' ');
        var c = new Array(pre.length + 1).join('-');
        return pre + this.upcomingInput().replace(/\s/g, ' ') + '\n' + c + '^';
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset + this.yyleng];
        }
        this.offset += this.yyleng;
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        } else if (this._signaled_error_token) {
            // produce one 'error' token as .parseError() in reject() did not guarantee a failure signal by throwing an exception!
            token = this._signaled_error_token;
            this._signaled_error_token = false;
            return token;
        }
        return false;
    },

// return next match in input
next:function () {
        function clear() {
            this.yytext = '';
            this.yyleng = 0;
            this.match = '';
            this.matches = false;
            this._more = false;
            this._backtrack = false;
        }

        if (this.done) {
            clear.call(this);
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            clear.call(this);
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === '') {
            clear.call(this);
            this.done = true;
            return this.EOF;
        } else {
            token = this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: this.match + this._input,
                token: null,
                line: this.yylineno,
                loc: this.yylloc
            }) || this.ERROR;
            if (token === this.ERROR) {
                // we can try to recover from a lexer error that parseError() did not 'recover' for us, by moving forward one character at a time:
                if (!this.match.length) {
                    this.input();
                }
            }
            return token;
        }
    },

// return next match that has a token
lex:function lex() {
        var r;
        // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
        if (typeof this.options.pre_lex === 'function') {
            r = this.options.pre_lex.call(this);
        }
        while (!r) {
            r = this.next();
        }
        if (typeof this.options.post_lex === 'function') {
            // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.options.post_lex.call(this, r) || r;
        }
        return r;
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions['INITIAL'].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return 'INITIAL';
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {
  "easy_keyword_rules": true,
  "ranges": true
},
performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {

var YYSTATE = YY_START;
switch($avoiding_name_collisions) {
case 2 : 
/*! Conditions:: action */ 
/*! Rule::       \/[^ /]*?['"{}'][^ ]*?\/ */ 
 return 27; // regexp with braces or quotes (and no spaces) 
break;
case 7 : 
/*! Conditions:: action */ 
/*! Rule::       \{ */ 
 yy.depth++; return 23; 
break;
case 8 : 
/*! Conditions:: action */ 
/*! Rule::       \} */ 
 if (yy.depth == 0) { this.begin('trail'); } else { yy.depth--; } return 25; 
break;
case 10 : 
/*! Conditions:: conditions */ 
/*! Rule::       > */ 
 this.popState(); return 30; 
break;
case 13 : 
/*! Conditions:: rules */ 
/*! Rule::       {BR}+ */ 
 /* empty */ 
break;
case 14 : 
/*! Conditions:: rules */ 
/*! Rule::       \s+{BR}+ */ 
 /* empty */ 
break;
case 15 : 
/*! Conditions:: rules */ 
/*! Rule::       \s+ */ 
 this.begin('indented'); 
break;
case 16 : 
/*! Conditions:: rules */ 
/*! Rule::       %% */ 
 this.begin('code'); return 5; 
break;
case 18 : 
/*! Conditions:: options */ 
/*! Rule::       {NAME} */ 
 yy.options[yy_.yytext] = true; 
break;
case 19 : 
/*! Conditions:: options */ 
/*! Rule::       {BR}+ */ 
 this.popState(); 
break;
case 20 : 
/*! Conditions:: options */ 
/*! Rule::       \s+{BR}+ */ 
 this.popState(); 
break;
case 21 : 
/*! Conditions:: options */ 
/*! Rule::       \s+ */ 
 /* empty */ 
break;
case 23 : 
/*! Conditions:: start_condition */ 
/*! Rule::       {BR}+ */ 
 this.popState(); 
break;
case 24 : 
/*! Conditions:: start_condition */ 
/*! Rule::       \s+{BR}+ */ 
 this.popState(); 
break;
case 25 : 
/*! Conditions:: start_condition */ 
/*! Rule::       \s+ */ 
 /* empty */ 
break;
case 26 : 
/*! Conditions:: trail */ 
/*! Rule::       \s*{BR}+ */ 
 this.begin('rules'); 
break;
case 27 : 
/*! Conditions:: indented */ 
/*! Rule::       \{ */ 
 yy.depth = 0; this.begin('action'); return 23; 
break;
case 28 : 
/*! Conditions:: indented */ 
/*! Rule::       %\{(.|{BR})*?%\} */ 
 this.begin('trail'); yy_.yytext = yy_.yytext.substr(2, yy_.yytext.length - 4); return 11; 
break;
case 29 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       %\{(.|{BR})*?%\} */ 
 yy_.yytext = yy_.yytext.substr(2, yy_.yytext.length - 4); return 11; 
break;
case 30 : 
/*! Conditions:: indented */ 
/*! Rule::       %include\b */ 
 
                                            // This is an include instruction in place of an action: 
                                            // thanks to the `<indented>.+` rule immediately below we need to semi-duplicate 
                                            // the `%include` token recognition here vs. the almost-identical rule for the same 
                                            // further below.
                                            // There's no real harm as we need to do something special in this case anyway:
                                            // push 2 (two!) conditions.
                                            //
                                            // (Anecdotal: to find that we needed to place this almost-copy here to make the test grammar
                                            // parse correctly took several hours as the debug facilities were - and are - too meager to
                                            // quickly diagnose the problem while we hadn't. So the code got littered with debug prints
                                            // and finally it hit me what the *F* went wrong, after which I saw I needed to add *this* rule!)

                                            // first push the 'trail' condition which will be the follow-up after we're done parsing the path parameter...
                                            this.pushState('trail'); 
                                            // then push the immediate need: the 'path' condition.
                                            this.pushState('path'); 
                                            return 59;
                                         
break;
case 31 : 
/*! Conditions:: indented */ 
/*! Rule::       .+ */ 
 this.begin('rules'); return 11; 
break;
case 32 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       \/\*(.|\n|\r)*?\*\/ */ 
 /* ignore */ 
break;
case 33 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       \/\/.* */ 
 /* ignore */ 
break;
case 34 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       {BR}+ */ 
 /* empty */ 
break;
case 35 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       \s+ */ 
 /* empty */ 
break;
case 37 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       "(\\\\|\\"|[^"])*" */ 
 yy_.yytext = yy_.yytext.replace(/\\"/g,'"'); return 56; 
break;
case 38 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       '(\\\\|\\'|[^'])*' */ 
 yy_.yytext = yy_.yytext.replace(/\\'/g,"'"); return 56; 
break;
case 52 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       < */ 
 this.begin('conditions'); return 28; 
break;
case 56 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       \\. */ 
 yy_.yytext = yy_.yytext.replace(/^\\/g, ''); return 54; 
break;
case 59 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       %options\b */ 
 if (!yy.options) { yy.options = {}; } this.begin('options'); return false; 
break;
case 60 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       %s\b */ 
 this.begin('start_condition'); return 15; 
break;
case 61 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       %x\b */ 
 this.begin('start_condition'); return 17; 
break;
case 62 : 
/*! Conditions:: INITIAL trail code */ 
/*! Rule::       %include\b */ 
 this.pushState('path'); return 59; 
break;
case 63 : 
/*! Conditions:: INITIAL rules trail code */ 
/*! Rule::       %{NAME}[^\r\n]+ */ 
  
                                            /* ignore unrecognized decl */
                                            console.warn('ignoring unsupported lexer option: ', yy_.yytext, ' @ ' + JSON.stringify(yy_.yylloc) + 'while lexing in ' + this.topState() + ' state:', this._input, ' /////// ', this.matched);
                                         
break;
case 64 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       %% */ 
 this.begin('rules'); return 5; 
break;
case 69 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       . */ 
 throw new Error("unsupported input character: " + yy_.yytext + " @ " + JSON.stringify(yy_.yylloc)); /* b0rk on bad characters */ 
break;
case 72 : 
/*! Conditions:: code */ 
/*! Rule::       [^\r\n]+ */ 
 return 62;      // the bit of CODE just before EOF... 
break;
case 73 : 
/*! Conditions:: path */ 
/*! Rule::       [\r\n] */ 
 this.popState(); this.unput(yy_.yytext); 
break;
case 74 : 
/*! Conditions:: path */ 
/*! Rule::       '[^\r\n]+' */ 
 yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2); this.popState(); return 60; 
break;
case 75 : 
/*! Conditions:: path */ 
/*! Rule::       "[^\r\n]+" */ 
 yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2); this.popState(); return 60; 
break;
case 76 : 
/*! Conditions:: path */ 
/*! Rule::       \s+ */ 
 // skip whitespace in the line 
break;
case 77 : 
/*! Conditions:: path */ 
/*! Rule::       [^\s\r\n]+ */ 
 this.popState(); return 60; 
break;
case 78 : 
/*! Conditions:: * */ 
/*! Rule::       . */ 
  
                                            /* ignore unrecognized decl */
                                            console.warn('ignoring unsupported lexer input: ', yy_.yytext, ' @ ' + JSON.stringify(yy_.yylloc) + 'while lexing in ' + this.topState() + ' state:', this._input, ' /////// ', this.matched);
                                         
break;
default:
  return this.simpleCaseActionClusters[$avoiding_name_collisions];
}
},
simpleCaseActionClusters: {

  /*! Conditions:: action */ 
  /*! Rule::       \/\*(.|\n|\r)*?\*\/ */ 
   0 : 27,
  /*! Conditions:: action */ 
  /*! Rule::       \/\/.* */ 
   1 : 27,
  /*! Conditions:: action */ 
  /*! Rule::       "(\\\\|\\"|[^"])*" */ 
   3 : 27,
  /*! Conditions:: action */ 
  /*! Rule::       '(\\\\|\\'|[^'])*' */ 
   4 : 27,
  /*! Conditions:: action */ 
  /*! Rule::       [/"'][^{}/"']+ */ 
   5 : 27,
  /*! Conditions:: action */ 
  /*! Rule::       [^{}/"']+ */ 
   6 : 27,
  /*! Conditions:: conditions */ 
  /*! Rule::       {NAME} */ 
   9 : 13,
  /*! Conditions:: conditions */ 
  /*! Rule::       , */ 
   11 : 32,
  /*! Conditions:: conditions */ 
  /*! Rule::       \* */ 
   12 : 31,
  /*! Conditions:: rules */ 
  /*! Rule::       [a-zA-Z0-9_]+ */ 
   17 : 57,
  /*! Conditions:: start_condition */ 
  /*! Rule::       {NAME} */ 
   22 : 19,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       {NAME} */ 
   36 : 13,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \| */ 
   39 : 34,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \[(\\\\|\\\]|[^\]])*\] */ 
   40 : 53,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \(\?: */ 
   41 : 39,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \(\?= */ 
   42 : 39,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \(\?! */ 
   43 : 39,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \( */ 
   44 : 37,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \) */ 
   45 : 38,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \+ */ 
   46 : 40,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \* */ 
   47 : 31,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \? */ 
   48 : 41,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \^ */ 
   49 : 48,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       , */ 
   50 : 32,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       <<EOF>> */ 
   51 : 49,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \/! */ 
   53 : 43,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \/ */ 
   54 : 42,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \\([0-7]{1,3}|[rfntvsSbBwWdD\\*+()${}|[\]\/.^?]|c[A-Z]|x[0-9A-F]{2}|u[a-fA-F0-9]{4}) */ 
   55 : 54,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \$ */ 
   57 : 49,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \. */ 
   58 : 47,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \{\d+(,\s?\d+|,)?\} */ 
   65 : 55,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \{{NAME}\} */ 
   66 : 52,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \{ */ 
   67 : 23,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \} */ 
   68 : 25,
  /*! Conditions:: * */ 
  /*! Rule::       $ */ 
   70 : 8,
  /*! Conditions:: code */ 
  /*! Rule::       [^\r\n]*(\r|\n)+ */ 
   71 : 62
},
rules: [
/^(?:\/\*(.|\n|\r)*?\*\/)/,
/^(?:\/\/.*)/,
/^(?:\/[^ \/]*?['"{}'][^ ]*?\/)/,
/^(?:"(\\\\|\\"|[^"])*")/,
/^(?:'(\\\\|\\'|[^'])*')/,
/^(?:[\/"'][^{}\/"']+)/,
/^(?:[^{}\/"']+)/,
/^(?:\{)/,
/^(?:\})/,
/^(?:([a-zA-Z_](?:[a-zA-Z0-9_-]*[a-zA-Z0-9_])?))/,
/^(?:>)/,
/^(?:,)/,
/^(?:\*)/,
/^(?:(\r\n|\n|\r)+)/,
/^(?:\s+(\r\n|\n|\r)+)/,
/^(?:\s+)/,
/^(?:%%)/,
/^(?:[a-zA-Z0-9_]+)/,
/^(?:([a-zA-Z_](?:[a-zA-Z0-9_-]*[a-zA-Z0-9_])?))/,
/^(?:(\r\n|\n|\r)+)/,
/^(?:\s+(\r\n|\n|\r)+)/,
/^(?:\s+)/,
/^(?:([a-zA-Z_](?:[a-zA-Z0-9_-]*[a-zA-Z0-9_])?))/,
/^(?:(\r\n|\n|\r)+)/,
/^(?:\s+(\r\n|\n|\r)+)/,
/^(?:\s+)/,
/^(?:\s*(\r\n|\n|\r)+)/,
/^(?:\{)/,
/^(?:%\{(.|(\r\n|\n|\r))*?%\})/,
/^(?:%\{(.|(\r\n|\n|\r))*?%\})/,
/^(?:%include\b)/,
/^(?:.+)/,
/^(?:\/\*(.|\n|\r)*?\*\/)/,
/^(?:\/\/.*)/,
/^(?:(\r\n|\n|\r)+)/,
/^(?:\s+)/,
/^(?:([a-zA-Z_](?:[a-zA-Z0-9_-]*[a-zA-Z0-9_])?))/,
/^(?:"(\\\\|\\"|[^"])*")/,
/^(?:'(\\\\|\\'|[^'])*')/,
/^(?:\|)/,
/^(?:\[(\\\\|\\\]|[^\]])*\])/,
/^(?:\(\?:)/,
/^(?:\(\?=)/,
/^(?:\(\?!)/,
/^(?:\()/,
/^(?:\))/,
/^(?:\+)/,
/^(?:\*)/,
/^(?:\?)/,
/^(?:\^)/,
/^(?:,)/,
/^(?:<<EOF>>)/,
/^(?:<)/,
/^(?:\/!)/,
/^(?:\/)/,
/^(?:\\([0-7]{1,3}|[rfntvsSbBwWdD\\*+()${}|[\]\/.^?]|c[A-Z]|x[0-9A-F]{2}|u[a-fA-F0-9]{4}))/,
/^(?:\\.)/,
/^(?:\$)/,
/^(?:\.)/,
/^(?:%options\b)/,
/^(?:%s\b)/,
/^(?:%x\b)/,
/^(?:%include\b)/,
/^(?:%([a-zA-Z_](?:[a-zA-Z0-9_-]*[a-zA-Z0-9_])?)[^\r\n]+)/,
/^(?:%%)/,
/^(?:\{\d+(,\s?\d+|,)?\})/,
/^(?:\{([a-zA-Z_](?:[a-zA-Z0-9_-]*[a-zA-Z0-9_])?)\})/,
/^(?:\{)/,
/^(?:\})/,
/^(?:.)/,
/^(?:$)/,
/^(?:[^\r\n]*(\r|\n)+)/,
/^(?:[^\r\n]+)/,
/^(?:[\r\n])/,
/^(?:'[^\r\n]+')/,
/^(?:"[^\r\n]+")/,
/^(?:\s+)/,
/^(?:[^\s\r\n]+)/,
/^(?:.)/
],
conditions: {
  "code": {
    "rules": [
      62,
      63,
      70,
      71,
      72,
      78
    ],
    "inclusive": false
  },
  "start_condition": {
    "rules": [
      22,
      23,
      24,
      25,
      70,
      78
    ],
    "inclusive": false
  },
  "options": {
    "rules": [
      18,
      19,
      20,
      21,
      70,
      78
    ],
    "inclusive": false
  },
  "conditions": {
    "rules": [
      9,
      10,
      11,
      12,
      70,
      78
    ],
    "inclusive": false
  },
  "action": {
    "rules": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      70,
      78
    ],
    "inclusive": false
  },
  "path": {
    "rules": [
      70,
      73,
      74,
      75,
      76,
      77,
      78
    ],
    "inclusive": false
  },
  "indented": {
    "rules": [
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      78
    ],
    "inclusive": true
  },
  "trail": {
    "rules": [
      26,
      29,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      78
    ],
    "inclusive": true
  },
  "rules": {
    "rules": [
      13,
      14,
      15,
      16,
      17,
      29,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      78
    ],
    "inclusive": true
  },
  "INITIAL": {
    "rules": [
      29,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      78
    ],
    "inclusive": true
  }
}
});
return lexer;
})();
parser.lexer = lexer;

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;
parser.Parser = Parser;

return new Parser();
})();




if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = lexParser;
exports.Parser = lexParser.Parser;
exports.parse = function () {
  return lexParser.parse.apply(lexParser, arguments);
};

}
