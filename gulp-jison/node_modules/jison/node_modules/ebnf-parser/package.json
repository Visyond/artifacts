{
  "author": {
    "name": "Zach Carter",
    "email": "zach@carter.name",
    "url": "http://zaa.ch"
  },
  "name": "ebnf-parser",
  "version": "0.1.10-122",
  "description": "A parser for BNF and EBNF grammars used by jison",
  "main": "ebnf-parser.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zaach/ebnf-parser.git"
  },
  "keywords": [
    "bnf",
    "ebnf",
    "grammar",
    "parser",
    "jison"
  ],
  "license": "MIT",
  "engines": {
    "node": ">=0.9"
  },
  "devDependencies": {
    "jison": "github:gerhobbelt/jison#master",
    "lex-parser": "github:gerhobbelt/lex-parser#master",
    "test": ">=0.6.0"
  },
  "gitHead": "29c521c81db17eaf22177c6befffaf88fb687125",
  "readme": "# ebnf-parser\n\nA parser for BNF and EBNF grammars used by jison.\n\n\n## install\n\n    npm install ebnf-parser\n\n\n## build\n\nTo build the parser yourself, clone the git repo then run:\n\n    make\n\nThis will generate `parser.js`, which is required by `ebnf-parser.js`.\n\n\n## usage\n\nThe parser translates a string grammar or JSON grammar into a JSON grammar that jison can use (ENBF is transformed into BNF).\n\n    var ebnfParser = require('ebnf-parser');\n\n    // parse a bnf or ebnf string grammar\n    ebnfParser.parse(\"%start ... %\");\n\n    // transform an ebnf JSON gramamr\n    ebnfParser.transform({\"ebnf\": ...});\n\n\n## example grammar\n\nThe parser can parse its own BNF grammar, shown below:\n\n```\n%start spec\n\n/* grammar for parsing jison grammar files */\n\n%{\nvar transform = require('./ebnf-transform').transform;\nvar ebnf = false;\n%}\n\n%%\n\nspec\n    : declaration_list '%%' grammar optional_end_block EOF\n        {\n            $$ = $declaration_list;\n            if ($optional_end_block && $optional_end_block.trim() !== '') {\n                yy.addDeclaration($$, { include: $optional_end_block });\n            }\n            return extend($$, $grammar);\n        }\n    ;\n\noptional_end_block\n    :\n    | '%%' extra_parser_module_code \n        { $$ = $extra_parser_module_code; }\n    ;\n\noptional_action_header_block\n    :\n        { $$ = {}; }\n    | optional_action_header_block ACTION\n        {\n            $$ = $optional_action_header_block;\n            yy.addDeclaration($$, { actionInclude: $ACTION });\n        }\n    | optional_action_header_block include_macro_code\n        {\n            $$ = $optional_action_header_block;\n            yy.addDeclaration($$, { actionInclude: $include_macro_code });\n        }\n    ;\n\ndeclaration_list\n    : declaration_list declaration\n        { $$ = $declaration_list; yy.addDeclaration($$, $declaration); }\n    |\n        { $$ = {}; }\n    ;\n\ndeclaration\n    : START id\n        { $$ = {start: $id}; }\n    | LEX_BLOCK\n        { $$ = {lex: $LEX_BLOCK}; }\n    | operator\n        { $$ = {operator: $operator}; }\n    | TOKEN full_token_definitions\n        { $$ = {token_list: $full_token_definitions}; }\n    | ACTION\n        { $$ = {include: $ACTION}; }\n    | include_macro_code\n        { $$ = {include: $include_macro_code}; }\n    | parse_param\n        { $$ = {parseParam: $parse_param}; }\n    | parser_type\n        { $$ = {parserType: $parser_type}; }\n    | options\n        { $$ = {options: $options}; }\n    ;\n\noptions\n    : OPTIONS token_list\n        { $$ = $token_list; }\n    ;\n\nparse_param\n    : PARSE_PARAM token_list\n        { $$ = $token_list; }\n    ;\n\nparser_type\n    : PARSER_TYPE symbol\n        { $$ = $symbol; }\n    ;\n    \noperator\n    : associativity token_list\n        { $$ = [$associativity]; $$.push.apply($$, $token_list); }\n    ;\n\nassociativity\n    : LEFT\n        { $$ = 'left'; }\n    | RIGHT\n        { $$ = 'right'; }\n    | NONASSOC\n        { $$ = 'nonassoc'; }\n    ;\n\ntoken_list\n    : token_list symbol\n        { $$ = $token_list; $$.push($symbol); }\n    | symbol\n        { $$ = [$symbol]; }\n    ;\n\nfull_token_definitions\n    : full_token_definitions full_token_definition\n        { $$ = $full_token_definitions; $$.push($full_token_definition); }\n    | full_token_definition\n        { $$ = [$full_token_definition]; }\n    ;\n\n// As per http://www.gnu.org/software/bison/manual/html_node/Token-Decl.html\nfull_token_definition\n    : optional_token_type id optional_token_value optional_token_description\n        {\n            $$ = {id: $id};\n            if ($optional_token_type) {\n                $$.type = $optional_token_type;\n            }\n            if ($optional_token_value) {\n                $$.value = $optional_token_value;\n            }\n            if ($optional_token_description) {\n                $$.description = $optional_token_description;\n            }\n        }\n    ;\n\noptional_token_type\n    : /* epsilon */\n        { $$ = false; }\n    | TOKEN_TYPE\n    ;\n\noptional_token_value\n    : /* epsilon */\n        { $$ = false; }\n    | INTEGER\n    ;\n\noptional_token_description\n    : /* epsilon */\n        { $$ = false; }\n    | STRING\n    ;\n\nid_list\n    : id_list id\n        { $$ = $id_list; $$.push($id); }\n    | id\n        { $$ = [$id]; }\n    ;\n\ntoken_id\n    : TOKEN_TYPE id\n        { $$ = $id; }\n    | id\n        { $$ = $id; }\n    ;\n\ngrammar\n    : optional_action_header_block production_list\n        {\n            $$ = $optional_action_header_block;\n            $$.grammar = $production_list;\n        }\n    ;\n\nproduction_list\n    : production_list production\n        {\n            $$ = $production_list;\n            if ($production[0] in $$) {\n                $$[$production[0]] = $$[$production[0]].concat($production[1]);\n            } else {\n                $$[$production[0]] = $production[1];\n            }\n        }\n    | production\n        { $$ = {}; $$[$production[0]] = $production[1]; }\n    ;\n\nproduction\n    : id ':' handle_list ';'\n        {$$ = [$id, $handle_list];}\n    ;\n\nhandle_list\n    : handle_list '|' handle_action\n        {\n            $$ = $handle_list;\n            $$.push($handle_action);\n        }\n    | handle_action\n        {\n            $$ = [$handle_action];\n        }\n    ;\n\nhandle_action\n    : handle prec action\n        {\n            $$ = [($handle.length ? $handle.join(' ') : '')];\n            if ($action) {\n                $$.push($action);\n            }\n            if ($prec) {\n                $$.push($prec);\n            }\n            if ($$.length === 1) {\n                $$ = $$[0];\n            }\n        }\n    ;\n\nhandle\n    : handle expression_suffix\n        {\n            $$ = $handle;\n            $$.push($expression_suffix);\n        }\n    |\n        {\n            $$ = [];\n        }\n    ;\n\nhandle_sublist\n    : handle_sublist '|' handle\n        {\n            $$ = $handle_sublist;\n            $$.push($handle.join(' '));\n        }\n    | handle\n        {\n            $$ = [$handle.join(' ')];\n        }\n    ;\n\nexpression_suffix\n    : expression suffix ALIAS\n        {\n            $$ = $expression + $suffix + \"[\" + $ALIAS + \"]\";\n        }\n    | expression suffix\n        {\n            $$ = $expression + $suffix;\n        }\n    ;\n\nexpression\n    : ID\n        {\n            $$ = $ID;\n        }\n    | STRING\n        {\n            $$ = ebnf ? \"'\" + $STRING + \"'\" : $STRING;\n        }\n    | '(' handle_sublist ')'\n        {\n            $$ = '(' + $handle_sublist.join(' | ') + ')';\n        }\n    ;\n\nsuffix\n    : /* epsilon */\n        { $$ = ''; }\n    | '*'\n    | '?'\n    | '+'\n    ;\n\nprec\n    : PREC symbol\n        {\n            $$ = { prec: $symbol };\n        }\n    |\n        {\n            $$ = null;\n        }\n    ;\n\nsymbol\n    : id\n        { $$ = $id; }\n    | STRING\n        { $$ = $STRING; }\n    ;\n\nid\n    : ID\n        { $$ = $ID; }\n    ;\n\naction\n    : '{' action_body '}'\n        { $$ = $action_body; }\n    | ACTION\n        { $$ = $ACTION; }\n    | include_macro_code\n        { $$ = $include_macro_code; }\n    | ARROW_ACTION\n        { $$ = '$$ =' + $ARROW_ACTION + ';'; }\n    |\n        { $$ = ''; }\n    ;\n\naction_body\n    :\n        { $$ = ''; }\n    | action_comments_body\n        { $$ = $action_comments_body; }\n    | action_body '{' action_body '}' action_comments_body\n        { $$ = $1 + $2 + $3 + $4 + $5; }\n    | action_body '{' action_body '}'\n        { $$ = $1 + $2 + $3 + $4; }\n    ;\n\naction_comments_body\n    : ACTION_BODY\n        { $$ = $ACTION_BODY; }\n    | action_comments_body ACTION_BODY\n        { $$ = $action_comments_body + $ACTION_BODY; }\n    ;\n\nextra_parser_module_code\n    : optional_module_code_chunk\n        { $$ = $optional_module_code_chunk; }\n    | optional_module_code_chunk include_macro_code extra_parser_module_code\n        { $$ = $optional_module_code_chunk + $include_macro_code + $extra_parser_module_code; }\n    ;\n\ninclude_macro_code\n    : INCLUDE PATH\n        { \n            var fs = require('fs');\n            var fileContent = fs.readFileSync($PATH, { encoding: 'utf-8' });\n            // And no, we don't support nested '%include':\n            $$ = '\\n// Included by Jison: ' + $PATH + ':\\n\\n' + fileContent + '\\n\\n// End Of Include by Jison: ' + $PATH + '\\n\\n';\n        }\n    | INCLUDE error\n        { \n            console.error(\"%include MUST be followed by a valid file path\"); \n        }\n    ;\n\nmodule_code_chunk\n    : CODE\n        { $$ = $CODE; }\n    | module_code_chunk CODE\n        { $$ = $module_code_chunk + $CODE; }\n    ;\n\noptional_module_code_chunk\n    : module_code_chunk\n        { $$ = $module_code_chunk; }\n    | /* nil */\n        { $$ = ''; }\n    ;\n\n%%\n\n// transform ebnf to bnf if necessary\nfunction extend(json, grammar) {\n    json.bnf = ebnf ? transform(grammar.grammar) : grammar.grammar;\n    if (grammar.actionInclude) {\n        json.actionInclude = grammar.actionInclude;\n    }\n    return json;\n}\n```\n\n\n## license\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/zaach/ebnf-parser/issues"
  },
  "homepage": "https://github.com/zaach/ebnf-parser#readme",
  "_id": "ebnf-parser@0.1.10-122",
  "_shasum": "67ab50969dac55d6055800db5d5a52a925bb6352",
  "_from": "gerhobbelt/ebnf-parser#master",
  "_resolved": "git://github.com/gerhobbelt/ebnf-parser.git#29c521c81db17eaf22177c6befffaf88fb687125"
}
