/* parser generated by jison 0.4.15-113 */
/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    trace: function(errorMessage, errorHash),
 *    JisonParserError: function(msg, hash),
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    productions_: [...],
 *    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$, ...),
 *                (where `...` denotes the (optional) additional arguments the user passed to `parser.parse(str, ...)`)
 *    table: [...],
 *    defaultActions: {...},
 *    parseError: function(str, hash),
 *    parse: function(input),
 *
 *    lexer: {
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash),
 *        setInput: function(input),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(),
 *        upcomingInput: function(),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index),
 *        next: function(),
 *        lex: function(),
 *        begin: function(condition),
 *        popState: function(),
 *        _currentRules: function(),
 *        topState: function(),
 *        pushState: function(condition),
 *        stateStackSize: function(),
 *
 *        options: { ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
 *  }
 *
 * ---
 *
 * The parseError function receives a 'hash' object with these members for lexer and parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens; may be empty when we cannot easily produce such a set)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used, for instance, for advanced error analysis and reporting)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 *  When `parseError` is invoked by the lexer, `this` will still reference the related *parser* instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                              optional: you can specify a pre_parse() function in the chunk following the grammar, 
 *                              i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval) { return retval; }
 *                              optional: you can specify a post_parse() function in the chunk following the grammar, 
 *                              i.e. after the last `%%`. When it does not return any value, the parser will return 
 *                              the original `retval`.
 *
 * ### options which can be set up per parser instance
 *  
 *  yy: {
 *      pre_parse:  function(yy)
 *                              optional: is invoked before the parse cycle starts (and before the first invocation 
 *                              of `lex()`) but immediately after the invocation of parser.pre_parse()).
 *      post_parse: function(yy, retval) { return retval; }
 *                              optional: is invoked when the parse terminates due to success ('accept') or failure 
 *                              (even when exceptions are thrown).  `retval` contains the return value to be produced
 *                              by `Parser.parse()`; this function can override the return value by returning another. 
 *                              When it does not return any value, the parser will return the original `retval`. 
 *                              This function is invoked immediately before `Parser.post_parse()`.
 *      parseError: function(str, hash)
 *                              optional: overrides the default `parseError` function.
 *  }
 *
 *  parser.lexer.options: {
 *      ranges: boolean         optional: true ==> token location info will include a .range[] member.
 *      flex: boolean           optional: true ==> flex-like lexing behaviour where the rules are tested
 *                                                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                              optional: true ==> lexer regexes are tested in order and for each matching
 *                                                 regex the action code is invoked; the lexer terminates
 *                                                 the scan when a token is returned by the action code.
 *      pre_lex:  function()
 *                              optional: is invoked before the lexer is invoked to produce another token.
 *                              `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                              optional: is invoked when the lexer has produced a token `token`;
 *                              this function can override the returned token value by returning another.
 *                              When it does not return any (truthy) value, the lexer will return the original `token`.
 *                              `this` refers to the Lexer object.
 *  }
 */
var lexParser = (function () {
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript
function JisonParserError(msg, hash) {
    this.message = msg;
    this.hash = hash;
    var stacktrace = (new Error(msg)).stack;
    if (stacktrace) {
      this.stack = stacktrace;
    }
}
JisonParserError.prototype = Object.create(Error.prototype);
JisonParserError.prototype.constructor = JisonParserError;
JisonParserError.prototype.name = 'JisonParserError';

function __expand__(k, v, o) {
  o = o || {};
  for (var l = k.length; l--; ) {
    o[k[l]] = v;
  }
  return o;
}

var $V0=[130,136,138,140,142,145,174],
    $V1=[36,40,46,47,94,123,124,142,157,158,164,165,170,172,173],
    $V2=[41,123,124,130,136,138,140,142,145,174],
    $V3=[36,40,41,46,47,94,123,124,130,136,138,140,142,145,157,158,164,165,170,172,173,174],
    $V4=[41,124],
    $V5=[36,40,41,42,43,46,47,63,94,123,124,130,136,138,140,142,145,157,158,164,165,170,171,172,173,174],
    $V6=[130,136,138,140,142,145,146,174],
    $V7=[36,40,46,47,60,94,123,124,130,132,136,138,140,142,145,157,158,164,165,170,172,173,174,180],
    $V8=[132,180],
    $V9=[36,40,46,47,60,94,123,124,130,132,142,157,158,164,165,170,172,173],
    $Va=[164,167],
    $Vb=[123,125];

var parser = {
trace: function trace() { },
JisonParserError: JisonParserError,
yy: {},
symbols_: {
  "$": 36,
  "$accept": 0,
  "$end": 1,
  "%%": 130,
  "(": 40,
  ")": 41,
  "*": 42,
  "+": 43,
  ",": 44,
  ".": 46,
  "/": 47,
  "/!": 158,
  "<": 60,
  "=": 61,
  ">": 62,
  "?": 63,
  "ACTION": 142,
  "ACTION_BODY": 152,
  "CHARACTER_LIT": 173,
  "CODE": 183,
  "EOF": 132,
  "ESCAPE_CHAR": 170,
  "INCLUDE": 180,
  "NAME": 136,
  "NAME_BRACE": 164,
  "OPTIONS": 174,
  "OPTIONS_END": 176,
  "OPTION_VALUE": 178,
  "PATH": 181,
  "RANGE_REGEX": 171,
  "REGEX_SET": 169,
  "REGEX_SET_END": 167,
  "REGEX_SET_START": 165,
  "SPECIAL_GROUP": 157,
  "START_COND": 146,
  "START_EXC": 140,
  "START_INC": 138,
  "STRING_LIT": 172,
  "UNKNOWN_DECL": 145,
  "^": 94,
  "action": 149,
  "action_body": 150,
  "action_comments_body": 151,
  "any_group_regex": 161,
  "definition": 135,
  "definitions": 129,
  "error": 2,
  "escape_char": 163,
  "extra_lexer_module_code": 133,
  "include_macro_code": 143,
  "init": 128,
  "lex": 127,
  "module_code_chunk": 182,
  "name_expansion": 159,
  "name_list": 153,
  "names_exclusive": 141,
  "names_inclusive": 139,
  "option": 177,
  "option_list": 175,
  "optional_module_code_chunk": 179,
  "options": 144,
  "range_regex": 160,
  "regex": 137,
  "regex_base": 156,
  "regex_concat": 155,
  "regex_list": 154,
  "regex_set": 166,
  "regex_set_atom": 168,
  "rule": 147,
  "rules": 134,
  "rules_and_epilogue": 131,
  "start_conditions": 148,
  "string": 162,
  "{": 123,
  "|": 124,
  "}": 125
},
terminals_: {
  1: "$end",
  2: "error",
  36: "$",
  40: "(",
  41: ")",
  42: "*",
  43: "+",
  44: ",",
  46: ".",
  47: "/",
  60: "<",
  61: "=",
  62: ">",
  63: "?",
  94: "^",
  123: "{",
  124: "|",
  125: "}",
  130: "%%",
  132: "EOF",
  136: "NAME",
  138: "START_INC",
  140: "START_EXC",
  142: "ACTION",
  145: "UNKNOWN_DECL",
  146: "START_COND",
  152: "ACTION_BODY",
  157: "SPECIAL_GROUP",
  158: "/!",
  164: "NAME_BRACE",
  165: "REGEX_SET_START",
  167: "REGEX_SET_END",
  169: "REGEX_SET",
  170: "ESCAPE_CHAR",
  171: "RANGE_REGEX",
  172: "STRING_LIT",
  173: "CHARACTER_LIT",
  174: "OPTIONS",
  176: "OPTIONS_END",
  178: "OPTION_VALUE",
  180: "INCLUDE",
  181: "PATH",
  183: "CODE"
},
nonterminals_: {
  "$accept": {
    0: "lex $end"
  },
  "lex": {
    1: "init definitions %% rules_and_epilogue"
  },
  "rules_and_epilogue": {
    2: "EOF",
    3: "%% extra_lexer_module_code EOF",
    4: "rules %% extra_lexer_module_code EOF",
    5: "rules EOF"
  },
  "init": {
    6: "<epsilon>"
  },
  "definitions": {
    7: "definition definitions",
    8: "<epsilon>"
  },
  "definition": {
    9: "NAME regex",
    10: "START_INC names_inclusive",
    11: "START_EXC names_exclusive",
    12: "ACTION",
    13: "include_macro_code",
    14: "options",
    15: "UNKNOWN_DECL"
  },
  "names_inclusive": {
    16: "START_COND",
    17: "names_inclusive START_COND"
  },
  "names_exclusive": {
    18: "START_COND",
    19: "names_exclusive START_COND"
  },
  "rules": {
    20: "rules rule",
    21: "rule"
  },
  "rule": {
    22: "start_conditions regex action"
  },
  "action": {
    23: "{ action_body }",
    24: "ACTION",
    25: "include_macro_code"
  },
  "action_body": {
    26: "action_comments_body",
    27: "action_body { action_body } action_comments_body"
  },
  "action_comments_body": {
    28: "<epsilon>",
    29: "action_comments_body ACTION_BODY"
  },
  "start_conditions": {
    30: "< name_list >",
    31: "< * >",
    32: "<epsilon>"
  },
  "name_list": {
    33: "NAME",
    34: "name_list , NAME"
  },
  "regex": {
    35: "regex_list"
  },
  "regex_list": {
    36: "regex_list | regex_concat",
    37: "regex_list |",
    38: "regex_concat",
    39: "<epsilon>"
  },
  "regex_concat": {
    40: "regex_concat regex_base",
    41: "regex_base"
  },
  "regex_base": {
    42: "( regex_list )",
    43: "SPECIAL_GROUP regex_list )",
    44: "regex_base +",
    45: "regex_base *",
    46: "regex_base ?",
    47: "/ regex_base",
    48: "/! regex_base",
    49: "name_expansion",
    50: "regex_base range_regex",
    51: "any_group_regex",
    52: ".",
    53: "^",
    54: "$",
    55: "string",
    56: "escape_char"
  },
  "name_expansion": {
    57: "NAME_BRACE"
  },
  "any_group_regex": {
    58: "REGEX_SET_START regex_set REGEX_SET_END"
  },
  "regex_set": {
    59: "regex_set_atom regex_set",
    60: "regex_set_atom"
  },
  "regex_set_atom": {
    61: "REGEX_SET",
    62: "name_expansion"
  },
  "escape_char": {
    63: "ESCAPE_CHAR"
  },
  "range_regex": {
    64: "RANGE_REGEX"
  },
  "string": {
    65: "STRING_LIT",
    66: "CHARACTER_LIT"
  },
  "options": {
    67: "OPTIONS option_list OPTIONS_END"
  },
  "option_list": {
    68: "option option_list",
    69: "option"
  },
  "option": {
    70: "NAME",
    71: "NAME = OPTION_VALUE",
    72: "NAME = NAME"
  },
  "extra_lexer_module_code": {
    73: "optional_module_code_chunk",
    74: "optional_module_code_chunk include_macro_code extra_lexer_module_code"
  },
  "include_macro_code": {
    75: "INCLUDE PATH",
    76: "INCLUDE error"
  },
  "module_code_chunk": {
    77: "CODE",
    78: "module_code_chunk CODE"
  },
  "optional_module_code_chunk": {
    79: "module_code_chunk",
    80: "<epsilon>"
  }
},
productions_: [
  0,
  [
    127,
    4
  ],
  [
    131,
    1
  ],
  [
    131,
    3
  ],
  [
    131,
    4
  ],
  [
    131,
    2
  ],
  [
    128,
    0
  ],
  [
    129,
    2
  ],
  [
    129,
    0
  ],
  [
    135,
    2
  ],
  [
    135,
    2
  ],
  [
    135,
    2
  ],
  [
    135,
    1
  ],
  [
    135,
    1
  ],
  [
    135,
    1
  ],
  [
    135,
    1
  ],
  [
    139,
    1
  ],
  [
    139,
    2
  ],
  [
    141,
    1
  ],
  [
    141,
    2
  ],
  [
    134,
    2
  ],
  [
    134,
    1
  ],
  [
    147,
    3
  ],
  [
    149,
    3
  ],
  [
    149,
    1
  ],
  [
    149,
    1
  ],
  [
    150,
    1
  ],
  [
    150,
    5
  ],
  [
    151,
    0
  ],
  [
    151,
    2
  ],
  [
    148,
    3
  ],
  [
    148,
    3
  ],
  [
    148,
    0
  ],
  [
    153,
    1
  ],
  [
    153,
    3
  ],
  [
    137,
    1
  ],
  [
    154,
    3
  ],
  [
    154,
    2
  ],
  [
    154,
    1
  ],
  [
    154,
    0
  ],
  [
    155,
    2
  ],
  [
    155,
    1
  ],
  [
    156,
    3
  ],
  [
    156,
    3
  ],
  [
    156,
    2
  ],
  [
    156,
    2
  ],
  [
    156,
    2
  ],
  [
    156,
    2
  ],
  [
    156,
    2
  ],
  [
    156,
    1
  ],
  [
    156,
    2
  ],
  [
    156,
    1
  ],
  [
    156,
    1
  ],
  [
    156,
    1
  ],
  [
    156,
    1
  ],
  [
    156,
    1
  ],
  [
    156,
    1
  ],
  [
    159,
    1
  ],
  [
    161,
    3
  ],
  [
    166,
    2
  ],
  [
    166,
    1
  ],
  [
    168,
    1
  ],
  [
    168,
    1
  ],
  [
    163,
    1
  ],
  [
    160,
    1
  ],
  [
    162,
    1
  ],
  [
    162,
    1
  ],
  [
    144,
    3
  ],
  [
    175,
    2
  ],
  [
    175,
    1
  ],
  [
    177,
    1
  ],
  [
    177,
    3
  ],
  [
    177,
    3
  ],
  [
    133,
    1
  ],
  [
    133,
    3
  ],
  [
    143,
    2
  ],
  [
    143,
    2
  ],
  [
    182,
    1
  ],
  [
    182,
    2
  ],
  [
    179,
    1
  ],
  [
    179,
    0
  ]
],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */, yystack) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1 : 
/*! Production::     lex : init definitions '%%' rules_and_epilogue */
 
          this.$ = $$[$0];
          if ($$[$0-2][0]) this.$.macros = $$[$0-2][0];
          if ($$[$0-2][1]) this.$.startConditions = $$[$0-2][1];
          if ($$[$0-2][2]) this.$.unknownDecls = $$[$0-2][2];
          // if there are any options, add them all, otherwise set options to NULL:
          // can't check for 'empty object' by `if (yy.options) ...` so we do it this way:
          for (var k in yy.options) {
            this.$.options = yy.options;
            break;
          }
          if (yy.actionInclude) this.$.actionInclude = yy.actionInclude;
          delete yy.options;
          delete yy.actionInclude;
          return this.$;
         
break;
case 2 : 
/*! Production::     rules_and_epilogue : EOF */
 
        this.$ = { rules: [] };
       
break;
case 3 : 
/*! Production::     rules_and_epilogue : '%%' extra_lexer_module_code EOF */
 
        if ($$[$0-1] && $$[$0-1].trim() !== '') {
          this.$ = { rules: [], moduleInclude: $$[$0-1] };
        } else {
          this.$ = { rules: [] };
        }
       
break;
case 4 : 
/*! Production::     rules_and_epilogue : rules '%%' extra_lexer_module_code EOF */
 
        if ($$[$0-1] && $$[$0-1].trim() !== '') {
          this.$ = { rules: $$[$0-3], moduleInclude: $$[$0-1] };
        } else {
          this.$ = { rules: $$[$0-3] };
        }
       
break;
case 5 : 
/*! Production::     rules_and_epilogue : rules EOF */
 
        this.$ = { rules: $$[$0-1] };
       
break;
case 6 : 
/*! Production::     init :  */
 
            yy.actionInclude = '';
            if (!yy.options) yy.options = {};
         
break;
case 7 : 
/*! Production::     definitions : definition definitions */
 
          this.$ = $$[$0];
          if ($$[$0-1] != null) {
            if ('length' in $$[$0-1]) {
              this.$[0] = this.$[0] || {};
              this.$[0][$$[$0-1][0]] = $$[$0-1][1];
            } else if ($$[$0-1].type === 'names') {
              this.$[1] = this.$[1] || {};
              for (var name in $$[$0-1].names) {
                this.$[1][name] = $$[$0-1].names[name];
              }
            } else if ($$[$0-1].type === 'unknown') {
              this.$[2] = this.$[2] || [];
              this.$[2].push($$[$0-1].body);
            }
          }
         
break;
case 8 : 
/*! Production::     definitions :  */
  this.$ = [null, null];  
break;
case 9 : 
/*! Production::     definition : NAME regex */
  this.$ = [$$[$0-1], $$[$0]];  
break;
case 10 : 
/*! Production::     definition : START_INC names_inclusive */
 case 11 : 
/*! Production::     definition : START_EXC names_exclusive */
 case 24 : 
/*! Production::     action : ACTION */
 case 25 : 
/*! Production::     action : include_macro_code */
 case 26 : 
/*! Production::     action_body : action_comments_body */
 case 63 : 
/*! Production::     escape_char : ESCAPE_CHAR */
 case 64 : 
/*! Production::     range_regex : RANGE_REGEX */
 case 73 : 
/*! Production::     extra_lexer_module_code : optional_module_code_chunk */
 case 77 : 
/*! Production::     module_code_chunk : CODE */
 case 79 : 
/*! Production::     optional_module_code_chunk : module_code_chunk */
  this.$ = $$[$0];  
break;
case 12 : 
/*! Production::     definition : ACTION */
 case 13 : 
/*! Production::     definition : include_macro_code */
  yy.actionInclude += $$[$0]; this.$ = null;  
break;
case 14 : 
/*! Production::     definition : options */
  this.$ = null;  
break;
case 15 : 
/*! Production::     definition : UNKNOWN_DECL */
  this.$ = {type: 'unknown', body: $$[$0]};  
break;
case 16 : 
/*! Production::     names_inclusive : START_COND */
  this.$ = {type: 'names', names: {}}; this.$.names[$$[$0]] = 0;  
break;
case 17 : 
/*! Production::     names_inclusive : names_inclusive START_COND */
  this.$ = $$[$0-1]; this.$.names[$$[$0]] = 0;  
break;
case 18 : 
/*! Production::     names_exclusive : START_COND */
  this.$ = {type: 'names', names: {}}; this.$.names[$$[$0]] = 1;  
break;
case 19 : 
/*! Production::     names_exclusive : names_exclusive START_COND */
  this.$ = $$[$0-1]; this.$.names[$$[$0]] = 1;  
break;
case 20 : 
/*! Production::     rules : rules rule */
  this.$ = $$[$0-1]; this.$.push($$[$0]);  
break;
case 21 : 
/*! Production::     rules : rule */
 case 33 : 
/*! Production::     name_list : NAME */
  this.$ = [$$[$0]];  
break;
case 22 : 
/*! Production::     rule : start_conditions regex action */
  this.$ = $$[$0-2] ? [$$[$0-2], $$[$0-1], $$[$0]] : [$$[$0-1], $$[$0]];  
break;
case 23 : 
/*! Production::     action : '{' action_body '}' */
 case 30 : 
/*! Production::     start_conditions : '<' name_list '>' */
  this.$ = $$[$0-1];  
break;
case 27 : 
/*! Production::     action_body : action_body '{' action_body '}' action_comments_body */
  this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];  
break;
case 28 : 
/*! Production::     action_comments_body :  */
 case 39 : 
/*! Production::     regex_list :  */
 case 80 : 
/*! Production::     optional_module_code_chunk :  */
  this.$ = '';  
break;
case 29 : 
/*! Production::     action_comments_body : action_comments_body ACTION_BODY */
 case 40 : 
/*! Production::     regex_concat : regex_concat regex_base */
 case 50 : 
/*! Production::     regex_base : regex_base range_regex */
 case 59 : 
/*! Production::     regex_set : regex_set_atom regex_set */
 case 78 : 
/*! Production::     module_code_chunk : module_code_chunk CODE */
  this.$ = $$[$0-1] + $$[$0];  
break;
case 31 : 
/*! Production::     start_conditions : '<' '*' '>' */
  this.$ = ['*'];  
break;
case 34 : 
/*! Production::     name_list : name_list ',' NAME */
  this.$ = $$[$0-2]; this.$.push($$[$0]);  
break;
case 35 : 
/*! Production::     regex : regex_list */
 
          this.$ = $$[$0];
          if (yy.options && yy.options.easy_keyword_rules && this.$.match(/[\w\d]$/) && !this.$.match(/\\(r|f|n|t|v|s|b|c[A-Z]|x[0-9A-F]{2}|u[a-fA-F0-9]{4}|[0-7]{1,3})$/)) {
              this.$ += "\\b";
          }
         
break;
case 36 : 
/*! Production::     regex_list : regex_list '|' regex_concat */
  this.$ = $$[$0-2] + '|' + $$[$0];  
break;
case 37 : 
/*! Production::     regex_list : regex_list '|' */
  this.$ = $$[$0-1] + '|';  
break;
case 42 : 
/*! Production::     regex_base : '(' regex_list ')' */
  this.$ = '(' + $$[$0-1] + ')';  
break;
case 43 : 
/*! Production::     regex_base : SPECIAL_GROUP regex_list ')' */
  this.$ = $$[$0-2] + $$[$0-1] + ')';  
break;
case 44 : 
/*! Production::     regex_base : regex_base '+' */
  this.$ = $$[$0-1] + '+';  
break;
case 45 : 
/*! Production::     regex_base : regex_base '*' */
  this.$ = $$[$0-1] + '*';  
break;
case 46 : 
/*! Production::     regex_base : regex_base '?' */
  this.$ = $$[$0-1] + '?';  
break;
case 47 : 
/*! Production::     regex_base : '/' regex_base */
  this.$ = '(?=' + $$[$0] + ')';  
break;
case 48 : 
/*! Production::     regex_base : '/!' regex_base */
  this.$ = '(?!' + $$[$0] + ')';  
break;
case 52 : 
/*! Production::     regex_base : '.' */
  this.$ = '.';  
break;
case 53 : 
/*! Production::     regex_base : '^' */
  this.$ = '^';  
break;
case 54 : 
/*! Production::     regex_base : '$' */
  this.$ = '$';  
break;
case 58 : 
/*! Production::     any_group_regex : REGEX_SET_START regex_set REGEX_SET_END */
 case 74 : 
/*! Production::     extra_lexer_module_code : optional_module_code_chunk include_macro_code extra_lexer_module_code */
  this.$ = $$[$0-2] + $$[$0-1] + $$[$0];  
break;
case 62 : 
/*! Production::     regex_set_atom : name_expansion */
  this.$ = '{[' + $$[$0] + ']}';  
break;
case 65 : 
/*! Production::     string : STRING_LIT */
  this.$ = prepareString($$[$0].substr(1, $$[$0].length - 2));  
break;
case 70 : 
/*! Production::     option : NAME[option] */
  yy.options[$$[$0]] = true;  
break;
case 71 : 
/*! Production::     option : NAME[option] '=' OPTION_VALUE[value] */
 case 72 : 
/*! Production::     option : NAME[option] '=' NAME[value] */
  yy.options[$$[$0-2]] = $$[$0];  
break;
case 75 : 
/*! Production::     include_macro_code : INCLUDE PATH */
 
            var fs = require('fs');
            var fileContent = fs.readFileSync($$[$0], { encoding: 'utf-8' });
            // And no, we don't support nested '%include':
            this.$ = '\n// Included by Jison: ' + $$[$0] + ':\n\n' + fileContent + '\n\n// End Of Include by Jison: ' + $$[$0] + '\n\n';
         
break;
case 76 : 
/*! Production::     include_macro_code : INCLUDE error */
 
            console.error("%include MUST be followed by a valid file path");
         
break;
}
},
table: [
  __expand__($V0, [
      2,
      6
    ], {127:1,128:2,180:[
      2,
      6
    ]
  }),
  {
    1: [
      3
    ]
  },
  {
    129: 3,
    130: [
      2,
      8
    ],
    135: 4,
    136: [
      1,
      5
    ],
    138: [
      1,
      6
    ],
    140: [
      1,
      7
    ],
    142: [
      1,
      8
    ],
    143: 9,
    144: 10,
    145: [
      1,
      11
    ],
    174: [
      1,
      13
    ],
    180: [
      1,
      12
    ]
  },
  {
    130: [
      1,
      14
    ]
  },
  {
    129: 15,
    130: [
      2,
      8
    ],
    135: 4,
    136: [
      1,
      5
    ],
    138: [
      1,
      6
    ],
    140: [
      1,
      7
    ],
    142: [
      1,
      8
    ],
    143: 9,
    144: 10,
    145: [
      1,
      11
    ],
    174: [
      1,
      13
    ],
    180: [
      1,
      12
    ]
  },
  __expand__([124,130,136,138,140,142,145,174], [
      2,
      39
    ], {137:16,154:17,155:18,156:19,159:24,161:25,162:29,163:30,36:[
      1,
      28
    ],40:[
      1,
      20
    ],46:[
      1,
      26
    ],47:[
      1,
      22
    ],94:[
      1,
      27
    ],157:[
      1,
      21
    ],158:[
      1,
      23
    ],164:[
      1,
      31
    ],165:[
      1,
      32
    ],170:[
      1,
      35
    ],172:[
      1,
      33
    ],173:[
      1,
      34
    ],180:[
      2,
      39
    ]
  }),
  {
    139: 36,
    146: [
      1,
      37
    ]
  },
  {
    141: 38,
    146: [
      1,
      39
    ]
  },
  __expand__($V0, [
      2,
      12
    ], {180:[
      2,
      12
    ]
  }),
  __expand__($V0, [
      2,
      13
    ], {180:[
      2,
      13
    ]
  }),
  __expand__($V0, [
      2,
      14
    ], {180:[
      2,
      14
    ]
  }),
  __expand__($V0, [
      2,
      15
    ], {180:[
      2,
      15
    ]
  }),
  {
    2: [
      1,
      41
    ],
    181: [
      1,
      40
    ]
  },
  {
    136: [
      1,
      44
    ],
    175: 42,
    177: 43
  },
  __expand__($V1, [
      2,
      32
    ], {131:45,134:48,147:49,148:50,60:[
      1,
      51
    ],130:[
      1,
      47
    ],132:[
      1,
      46
    ],180:[
      2,
      32
    ]
  }),
  {
    130: [
      2,
      7
    ]
  },
  __expand__($V0, [
      2,
      9
    ], {180:[
      2,
      9
    ]
  }),
  __expand__([123,130,136,138,140,142,145,174], [
      2,
      35
    ], {124:[
      1,
      52
    ],180:[
      2,
      35
    ]
  }),
  __expand__($V2, [
      2,
      38
    ], {159:24,161:25,162:29,163:30,156:53,36:[
      1,
      28
    ],40:[
      1,
      20
    ],46:[
      1,
      26
    ],47:[
      1,
      22
    ],94:[
      1,
      27
    ],157:[
      1,
      21
    ],158:[
      1,
      23
    ],164:[
      1,
      31
    ],165:[
      1,
      32
    ],170:[
      1,
      35
    ],172:[
      1,
      33
    ],173:[
      1,
      34
    ],180:[
      2,
      38
    ]
  }),
  __expand__($V3, [
      2,
      41
    ], {160:57,42:[
      1,
      55
    ],43:[
      1,
      54
    ],63:[
      1,
      56
    ],171:[
      1,
      58
    ],180:[
      2,
      41
    ]
  }),
  __expand__($V4, [
      2,
      39
    ], {155:18,156:19,159:24,161:25,162:29,163:30,154:59,36:[
      1,
      28
    ],40:[
      1,
      20
    ],46:[
      1,
      26
    ],47:[
      1,
      22
    ],94:[
      1,
      27
    ],157:[
      1,
      21
    ],158:[
      1,
      23
    ],164:[
      1,
      31
    ],165:[
      1,
      32
    ],170:[
      1,
      35
    ],172:[
      1,
      33
    ],173:[
      1,
      34
    ]
  }),
  __expand__($V4, [
      2,
      39
    ], {155:18,156:19,159:24,161:25,162:29,163:30,154:60,36:[
      1,
      28
    ],40:[
      1,
      20
    ],46:[
      1,
      26
    ],47:[
      1,
      22
    ],94:[
      1,
      27
    ],157:[
      1,
      21
    ],158:[
      1,
      23
    ],164:[
      1,
      31
    ],165:[
      1,
      32
    ],170:[
      1,
      35
    ],172:[
      1,
      33
    ],173:[
      1,
      34
    ]
  }),
  {
    36: [
      1,
      28
    ],
    40: [
      1,
      20
    ],
    46: [
      1,
      26
    ],
    47: [
      1,
      22
    ],
    94: [
      1,
      27
    ],
    156: 61,
    157: [
      1,
      21
    ],
    158: [
      1,
      23
    ],
    159: 24,
    161: 25,
    162: 29,
    163: 30,
    164: [
      1,
      31
    ],
    165: [
      1,
      32
    ],
    170: [
      1,
      35
    ],
    172: [
      1,
      33
    ],
    173: [
      1,
      34
    ]
  },
  {
    36: [
      1,
      28
    ],
    40: [
      1,
      20
    ],
    46: [
      1,
      26
    ],
    47: [
      1,
      22
    ],
    94: [
      1,
      27
    ],
    156: 62,
    157: [
      1,
      21
    ],
    158: [
      1,
      23
    ],
    159: 24,
    161: 25,
    162: 29,
    163: 30,
    164: [
      1,
      31
    ],
    165: [
      1,
      32
    ],
    170: [
      1,
      35
    ],
    172: [
      1,
      33
    ],
    173: [
      1,
      34
    ]
  },
  __expand__($V5, [
      2,
      49
    ], {180:[
      2,
      49
    ]
  }),
  __expand__($V5, [
      2,
      51
    ], {180:[
      2,
      51
    ]
  }),
  __expand__($V5, [
      2,
      52
    ], {180:[
      2,
      52
    ]
  }),
  __expand__($V5, [
      2,
      53
    ], {180:[
      2,
      53
    ]
  }),
  __expand__($V5, [
      2,
      54
    ], {180:[
      2,
      54
    ]
  }),
  __expand__($V5, [
      2,
      55
    ], {180:[
      2,
      55
    ]
  }),
  __expand__($V5, [
      2,
      56
    ], {180:[
      2,
      56
    ]
  }),
  __expand__([36,40,41,42,43,46,47,63,94,123,124,130,136,138,140,142,145,157,158,164,165,167,169,170,171,172,173,174], [
      2,
      57
    ], {180:[
      2,
      57
    ]
  }),
  {
    159: 66,
    164: [
      1,
      31
    ],
    166: 63,
    168: 64,
    169: [
      1,
      65
    ]
  },
  __expand__($V5, [
      2,
      65
    ], {180:[
      2,
      65
    ]
  }),
  __expand__($V5, [
      2,
      66
    ], {180:[
      2,
      66
    ]
  }),
  __expand__($V5, [
      2,
      63
    ], {180:[
      2,
      63
    ]
  }),
  __expand__($V0, [
      2,
      10
    ], {146:[
      1,
      67
    ],180:[
      2,
      10
    ]
  }),
  __expand__($V6, [
      2,
      16
    ], {180:[
      2,
      16
    ]
  }),
  __expand__($V0, [
      2,
      11
    ], {146:[
      1,
      68
    ],180:[
      2,
      11
    ]
  }),
  __expand__($V6, [
      2,
      18
    ], {180:[
      2,
      18
    ]
  }),
  __expand__($V7, [
      2,
      75
    ], {183:[
      2,
      75
    ]
  }),
  __expand__($V7, [
      2,
      76
    ], {183:[
      2,
      76
    ]
  }),
  {
    176: [
      1,
      69
    ]
  },
  {
    136: [
      1,
      44
    ],
    175: 70,
    176: [
      2,
      69
    ],
    177: 43
  },
  {
    61: [
      1,
      71
    ],
    136: [
      2,
      70
    ],
    176: [
      2,
      70
    ]
  },
  {
    1: [
      2,
      1
    ]
  },
  {
    1: [
      2,
      2
    ]
  },
  __expand__($V8, [
      2,
      80
    ], {133:72,179:73,182:74,183:[
      1,
      75
    ]
  }),
  __expand__($V1, [
      2,
      32
    ], {148:50,147:78,60:[
      1,
      51
    ],130:[
      1,
      76
    ],132:[
      1,
      77
    ],180:[
      2,
      32
    ]
  }),
  __expand__($V9, [
      2,
      21
    ], {180:[
      2,
      21
    ]
  }),
  __expand__([123,124,142], [
      2,
      39
    ], {154:17,155:18,156:19,159:24,161:25,162:29,163:30,137:79,36:[
      1,
      28
    ],40:[
      1,
      20
    ],46:[
      1,
      26
    ],47:[
      1,
      22
    ],94:[
      1,
      27
    ],157:[
      1,
      21
    ],158:[
      1,
      23
    ],164:[
      1,
      31
    ],165:[
      1,
      32
    ],170:[
      1,
      35
    ],172:[
      1,
      33
    ],173:[
      1,
      34
    ],180:[
      2,
      39
    ]
  }),
  {
    42: [
      1,
      81
    ],
    136: [
      1,
      82
    ],
    153: 80
  },
  __expand__($V2, [
      2,
      37
    ], {156:19,159:24,161:25,162:29,163:30,155:83,36:[
      1,
      28
    ],40:[
      1,
      20
    ],46:[
      1,
      26
    ],47:[
      1,
      22
    ],94:[
      1,
      27
    ],157:[
      1,
      21
    ],158:[
      1,
      23
    ],164:[
      1,
      31
    ],165:[
      1,
      32
    ],170:[
      1,
      35
    ],172:[
      1,
      33
    ],173:[
      1,
      34
    ],180:[
      2,
      37
    ]
  }),
  __expand__($V3, [
      2,
      40
    ], {160:57,42:[
      1,
      55
    ],43:[
      1,
      54
    ],63:[
      1,
      56
    ],171:[
      1,
      58
    ],180:[
      2,
      40
    ]
  }),
  __expand__($V5, [
      2,
      44
    ], {180:[
      2,
      44
    ]
  }),
  __expand__($V5, [
      2,
      45
    ], {180:[
      2,
      45
    ]
  }),
  __expand__($V5, [
      2,
      46
    ], {180:[
      2,
      46
    ]
  }),
  __expand__($V5, [
      2,
      50
    ], {180:[
      2,
      50
    ]
  }),
  __expand__($V5, [
      2,
      64
    ], {180:[
      2,
      64
    ]
  }),
  {
    41: [
      1,
      84
    ],
    124: [
      1,
      52
    ]
  },
  {
    41: [
      1,
      85
    ],
    124: [
      1,
      52
    ]
  },
  __expand__($V3, [
      2,
      47
    ], {160:57,42:[
      1,
      55
    ],43:[
      1,
      54
    ],63:[
      1,
      56
    ],171:[
      1,
      58
    ],180:[
      2,
      47
    ]
  }),
  __expand__($V3, [
      2,
      48
    ], {160:57,42:[
      1,
      55
    ],43:[
      1,
      54
    ],63:[
      1,
      56
    ],171:[
      1,
      58
    ],180:[
      2,
      48
    ]
  }),
  {
    167: [
      1,
      86
    ]
  },
  {
    159: 66,
    164: [
      1,
      31
    ],
    166: 87,
    167: [
      2,
      60
    ],
    168: 64,
    169: [
      1,
      65
    ]
  },
  __expand__($Va, [
      2,
      61
    ], {169:[
      2,
      61
    ]
  }),
  __expand__($Va, [
      2,
      62
    ], {169:[
      2,
      62
    ]
  }),
  __expand__($V6, [
      2,
      17
    ], {180:[
      2,
      17
    ]
  }),
  __expand__($V6, [
      2,
      19
    ], {180:[
      2,
      19
    ]
  }),
  __expand__($V0, [
      2,
      67
    ], {180:[
      2,
      67
    ]
  }),
  {
    176: [
      2,
      68
    ]
  },
  {
    136: [
      1,
      89
    ],
    178: [
      1,
      88
    ]
  },
  {
    132: [
      1,
      90
    ]
  },
  {
    132: [
      2,
      73
    ],
    143: 91,
    180: [
      1,
      12
    ]
  },
  __expand__($V8, [
      2,
      79
    ], {183:[
      1,
      92
    ]
  }),
  __expand__($V8, [
      2,
      77
    ], {183:[
      2,
      77
    ]
  }),
  __expand__($V8, [
      2,
      80
    ], {179:73,182:74,133:93,183:[
      1,
      75
    ]
  }),
  {
    1: [
      2,
      5
    ]
  },
  __expand__($V9, [
      2,
      20
    ], {180:[
      2,
      20
    ]
  }),
  {
    123: [
      1,
      95
    ],
    142: [
      1,
      96
    ],
    143: 97,
    149: 94,
    180: [
      1,
      12
    ]
  },
  {
    44: [
      1,
      99
    ],
    62: [
      1,
      98
    ]
  },
  {
    62: [
      1,
      100
    ]
  },
  {
    44: [
      2,
      33
    ],
    62: [
      2,
      33
    ]
  },
  __expand__($V2, [
      2,
      36
    ], {159:24,161:25,162:29,163:30,156:53,36:[
      1,
      28
    ],40:[
      1,
      20
    ],46:[
      1,
      26
    ],47:[
      1,
      22
    ],94:[
      1,
      27
    ],157:[
      1,
      21
    ],158:[
      1,
      23
    ],164:[
      1,
      31
    ],165:[
      1,
      32
    ],170:[
      1,
      35
    ],172:[
      1,
      33
    ],173:[
      1,
      34
    ],180:[
      2,
      36
    ]
  }),
  __expand__($V5, [
      2,
      42
    ], {180:[
      2,
      42
    ]
  }),
  __expand__($V5, [
      2,
      43
    ], {180:[
      2,
      43
    ]
  }),
  __expand__($V5, [
      2,
      58
    ], {180:[
      2,
      58
    ]
  }),
  {
    167: [
      2,
      59
    ]
  },
  {
    136: [
      2,
      71
    ],
    176: [
      2,
      71
    ]
  },
  {
    136: [
      2,
      72
    ],
    176: [
      2,
      72
    ]
  },
  {
    1: [
      2,
      3
    ]
  },
  __expand__($V8, [
      2,
      80
    ], {179:73,182:74,133:101,183:[
      1,
      75
    ]
  }),
  __expand__($V8, [
      2,
      78
    ], {183:[
      2,
      78
    ]
  }),
  {
    132: [
      1,
      102
    ]
  },
  __expand__($V9, [
      2,
      22
    ], {180:[
      2,
      22
    ]
  }),
  __expand__($Vb, [
      2,
      28
    ], {150:103,151:104,152:[
      2,
      28
    ]
  }),
  __expand__($V9, [
      2,
      24
    ], {180:[
      2,
      24
    ]
  }),
  __expand__($V9, [
      2,
      25
    ], {180:[
      2,
      25
    ]
  }),
  __expand__($V1, [
      2,
      30
    ], {180:[
      2,
      30
    ]
  }),
  {
    136: [
      1,
      105
    ]
  },
  __expand__($V1, [
      2,
      31
    ], {180:[
      2,
      31
    ]
  }),
  {
    132: [
      2,
      74
    ]
  },
  {
    1: [
      2,
      4
    ]
  },
  {
    123: [
      1,
      107
    ],
    125: [
      1,
      106
    ]
  },
  __expand__($Vb, [
      2,
      26
    ], {152:[
      1,
      108
    ]
  }),
  {
    44: [
      2,
      34
    ],
    62: [
      2,
      34
    ]
  },
  __expand__($V9, [
      2,
      23
    ], {180:[
      2,
      23
    ]
  }),
  __expand__($Vb, [
      2,
      28
    ], {151:104,150:109,152:[
      2,
      28
    ]
  }),
  __expand__($Vb, [
      2,
      29
    ], {152:[
      2,
      29
    ]
  }),
  {
    123: [
      1,
      107
    ],
    125: [
      1,
      110
    ]
  },
  __expand__($Vb, [
      2,
      28
    ], {151:111,152:[
      2,
      28
    ]
  }),
  __expand__($Vb, [
      2,
      27
    ], {152:[
      1,
      108
    ]
  })
],
defaultActions: {
  15: [
    2,
    7
  ],
  45: [
    2,
    1
  ],
  46: [
    2,
    2
  ],
  70: [
    2,
    68
  ],
  77: [
    2,
    5
  ],
  87: [
    2,
    59
  ],
  90: [
    2,
    3
  ],
  101: [
    2,
    74
  ],
  102: [
    2,
    4
  ]
},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new this.JisonParserError(str, hash);
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],

        vstack = [null],    // semantic value stack
        lstack = [],        // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,     // (only used when the grammar contains error recovery rules)
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer;
    if (this.__lexer__) {
        lexer = this.__lexer__;
    } else {
        lexer = this.__lexer__ = Object.create(this.lexer);
    }

    var sharedState = {
      yy: {}
    };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc === 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    // Does the shared state override the default `parseError` that already comes with this instance?
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    }

    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

    function lex() {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol;
    var preErrorSymbol = null;
    var state, action, a, r;
    var yyval = {};
    var p, len, this_production, lstack_begin, lstack_end, newState;
    var expected = [];
    var retval = false;

    if (this.pre_parse) {
        this.pre_parse.call(this, sharedState.yy);
    }
    if (sharedState.yy.pre_parse) {
        sharedState.yy.pre_parse.call(this, sharedState.yy);
    }

    // Return the rule stack depth where the nearest error rule can be found.
    // Return FALSE when no error recovery rule was found.
    function locateNearestErrorRecoveryRule(state) {
        var stack_probe = stack.length - 1;
        var depth = 0;

        // try to recover from error
        for (;;) {
            // check for error recovery rule in this state
            if ((TERROR.toString()) in table[state]) {
                return depth;
            }
            if (state === 0 || stack_probe < 2) {
                return false; // No suitable error recovery rule available.
            }
            stack_probe -= 2; // popStack(1): [symbol, action]
            state = stack[stack_probe];
            ++depth;
        }
    }


    function collect_expected_token_set(state) {
        var tokenset = [];
        for (var p in table[state]) {
            if (p > TERROR) {
                if (self.terminal_descriptions_ && self.terminal_descriptions_[p]) {
                    tokenset.push(self.terminal_descriptions_[p]);
                }
                else if (self.terminals_[p]) {
                    tokenset.push("'" + self.terminals_[p] + "'");
                }
            }
        }
        return tokenset;
    }

    try {
        for (;;) {
            // retrieve state number from top of stack
            state = stack[stack.length - 1];

            // use default actions if available
            if (this.defaultActions[state]) {
                action = this.defaultActions[state];
            } else {
                if (symbol === null || typeof symbol === 'undefined') {
                    symbol = lex();
                }
                // read action for current state and first input
                action = table[state] && table[state][symbol];
            }

            // handle parse error
            if (typeof action === 'undefined' || !action.length || !action[0]) {
                var error_rule_depth;
                var errStr = '';

                if (!recovering) {
                    // first see if there's any chance at hitting an error recovery rule:
                    error_rule_depth = locateNearestErrorRecoveryRule(state);

                    // Report error
                    expected = collect_expected_token_set(state);
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' +
                                 (symbol === EOF ? 'end of input' :
                                  ("'" + (this.terminals_[symbol] || symbol) + "'"));
                    }
                    a = this.parseError(errStr, p = {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        token_id: symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected,
                        recoverable: (error_rule_depth !== false),
                        state_stack: stack
                    });
                    if (!p.recoverable) {
                        retval = a;
                        break;
                    }
                } else if (preErrorSymbol !== EOF) {
                    error_rule_depth = locateNearestErrorRecoveryRule(state);
                }

                // just recovered from another error
                if (recovering === 3) {
                    if (symbol === EOF || preErrorSymbol === EOF) {
                        retval = this.parseError(errStr || 'Parsing halted while starting to recover from another error.', {
                            text: lexer.match,
                            token: this.terminals_[symbol] || symbol,
                            token_id: symbol,
                            line: lexer.yylineno,
                            loc: yyloc,
                            expected: expected,
                            recoverable: false,
                            state_stack: stack
                        });
                        break;
                    }

                    // discard current lookahead and grab another
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    symbol = lex();
                }

                // try to recover from error
                if (error_rule_depth === false) {
                    retval = this.parseError(errStr || 'Parsing halted. No suitable error recovery rule available.', {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        token_id: symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected,
                        recoverable: false,
                        state_stack: stack
                    });
                    break;
                }
                popStack(error_rule_depth);

                preErrorSymbol = (symbol === TERROR ? null : symbol); // save the lookahead token
                symbol = TERROR;         // insert generic error symbol as new lookahead
                state = stack[stack.length - 1];
                action = table[state] && table[state][TERROR];
                recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
            }


            // this shouldn't happen, unless resolve defaults are off
            if (action[0] instanceof Array && action.length > 1) {
                retval = this.parseError('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    token_id: symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: false,
                    state_stack: stack
                });
                break;
            }

            switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution / no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                continue;

            case 2:
                // reduce
                //this.reductionCount++;

                this_production = this.productions_[action[1]];
                len = this_production[1];
                lstack_end = lstack.length;
                lstack_begin = lstack_end - (len || 1);
                lstack_end--;

                // perform semantic action
                yyval.$ = vstack[vstack.length - len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack_begin].first_line,
                    last_line: lstack[lstack_end].last_line,
                    first_column: lstack[lstack_begin].first_column,
                    last_column: lstack[lstack_end].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack_begin].range[0], lstack[lstack_end].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack, stack].concat(args));

                if (typeof r !== 'undefined') {
                    retval = r;
                    break;
                }

                // pop off stack
                if (len) {
                    popStack(len);
                }

                stack.push(this_production[0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                stack.push(newState);
                continue;

            case 3:
                // accept
                retval = true;
                break;
            }

            // break out of loop: we accept or fail with error
            break;
        }
    } finally {
        var rv;

        if (sharedState.yy.post_parse) {
            rv = sharedState.yy.post_parse.call(this, sharedState.yy, retval);
            if (typeof rv !== 'undefined') retval = rv;
        }
        if (this.post_parse) {
            rv = this.post_parse.call(this, sharedState.yy, retval);
            if (typeof rv !== 'undefined') retval = rv;
        }
    }

    return retval;
}
};


function encodeRE (s) {
    return s.replace(/([.*+?^${}()|[\]\/\\])/g, '\\$1').replace(/\\\\u([a-fA-F0-9]{4})/g, '\\u$1');
}

function prepareString (s) {
    // unescape slashes
    s = s.replace(/\\\\/g, "\\");
    s = encodeRE(s);
    return s;
};


/* generated by jison-lex 0.3.4-112 */
var lexer = (function () {
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript
function JisonLexerError(msg, hash) {
    this.message = msg;
    this.hash = hash;
    var stacktrace = (new Error(msg)).stack;
    if (stacktrace) {
      this.stack = stacktrace;
    }
}
JisonLexerError.prototype = Object.create(Error.prototype);
JisonLexerError.prototype.constructor = JisonLexerError;
JisonLexerError.prototype.name = 'JisonLexerError';

var lexer = {

EOF:1,

ERROR:2,

parseError:function parseError(str, hash) {
        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {
            return this.yy.parser.parseError(str, hash) || this.ERROR;
        } else {
            throw new this.JisonLexerError(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this._signaled_error_token = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        if (!this._input) {
            this.done = true;
            return null;
        }
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        // Count the linenumber up when we hit the LF (or a stand-alone CR).
        // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
        // and we advance immediately past the LF as well, returning both together as if
        // it was all a single 'character' only.
        var slice_len = 1;
        var lines = false;
        if (ch === '\n') {
            lines = true;
        } else if (ch === '\r') {
            lines = true;
            var ch2 = this._input[1];
            if (ch2 === '\n') {
                slice_len++;
                ch += ch2;
                this.yytext += ch2;
                this.yyleng++;
                this.offset++;
                this.match += ch2;
                this.matched += ch2;
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }
            }
        }
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(slice_len);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - len);
        this.matched = this.matched.substr(0, this.matched.length - len);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }

        this.yylloc.last_line = this.yylineno + 1;
        this.yylloc.last_column = (lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                + oldLines[oldLines.length - lines.length].length - lines[0].length :
                this.yylloc.first_column - len);

        if (this.options.ranges) {
            this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng - len;
        }
        this.yyleng = this.yytext.length;
        this.done = false;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            // when the parseError() call returns, we MUST ensure that the error is registered.
            // We accomplish this by signaling an 'error' token to be produced for the current
            // .lex() run.
            this._signaled_error_token = (this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: this.match,
                token: null,
                line: this.yylineno,
                loc: this.yylloc,
                lexer: this
            }) || this.ERROR);
        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// return (part of the) already matched input, i.e. for error messages
pastInput:function (maxSize) {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        if (maxSize < 0)
            maxSize = past.length;
        else if (!maxSize)
            maxSize = 20;
        return (past.length > maxSize ? '...' + past.substr(-maxSize) : past);
    },

// return (part of the) upcoming input, i.e. for error messages
upcomingInput:function (maxSize) {
        var next = this.match;
        if (maxSize < 0)
            maxSize = next.length + this._input.length;
        else if (!maxSize)
            maxSize = 20;
        if (next.length < maxSize) {
            next += this._input.substr(0, maxSize - next.length);
        }
        return (next.length > maxSize ? next.substr(0, maxSize) + '...' : next);
    },

// return a string which displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput().replace(/\s/g, ' ');
        var c = new Array(pre.length + 1).join('-');
        return pre + this.upcomingInput().replace(/\s/g, ' ') + '\n' + c + '^';
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset + this.yyleng];
        }
        this.offset += this.yyleng;
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        } else if (this._signaled_error_token) {
            // produce one 'error' token as .parseError() in reject() did not guarantee a failure signal by throwing an exception!
            token = this._signaled_error_token;
            this._signaled_error_token = false;
            return token;
        }
        return false;
    },

// return next match in input
next:function () {
        function clear() {
            this.yytext = '';
            this.yyleng = 0;
            this.match = '';
            this.matches = false;
            this._more = false;
            this._backtrack = false;
        }

        if (this.done) {
            clear.call(this);
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            clear.call(this);
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === '') {
            clear.call(this);
            this.done = true;
            return this.EOF;
        } else {
            token = this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: this.match + this._input,
                token: null,
                line: this.yylineno,
                loc: this.yylloc,
                lexer: this
            }) || this.ERROR;
            if (token === this.ERROR) {
                // we can try to recover from a lexer error that parseError() did not 'recover' for us, by moving forward at least one character at a time:
                if (!this.match.length) {
                    this.input();
                }
            }
            return token;
        }
    },

// return next match that has a token
lex:function lex() {
        var r;
        // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
        if (typeof this.options.pre_lex === 'function') {
            r = this.options.pre_lex.call(this);
        }
        while (!r) {
            r = this.next();
        }
        if (typeof this.options.post_lex === 'function') {
            // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.options.post_lex.call(this, r) || r;
        }
        return r;
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions['INITIAL'].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return 'INITIAL';
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {
  easy_keyword_rules: true,
  ranges: true
},
JisonLexerError: JisonLexerError,
performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {

var YYSTATE = YY_START;
switch($avoiding_name_collisions) {
case 2 : 
/*! Conditions:: action */ 
/*! Rule::       \/[^ /]*?['"{}'][^ ]*?\/ */ 
 return 152; // regexp with braces or quotes (and no spaces) 
break;
case 7 : 
/*! Conditions:: action */ 
/*! Rule::       \{ */ 
 yy.depth++; return 123; 
break;
case 8 : 
/*! Conditions:: action */ 
/*! Rule::       \} */ 
 if (yy.depth == 0) { this.begin('trail'); } else { yy.depth--; } return 125; 
break;
case 10 : 
/*! Conditions:: conditions */ 
/*! Rule::       > */ 
 this.popState(); return 62; 
break;
case 13 : 
/*! Conditions:: rules */ 
/*! Rule::       {BR}+ */ 
 /* empty */ 
break;
case 14 : 
/*! Conditions:: rules */ 
/*! Rule::       \s+{BR}+ */ 
 /* empty */ 
break;
case 15 : 
/*! Conditions:: rules */ 
/*! Rule::       \s+ */ 
 this.begin('indented'); 
break;
case 16 : 
/*! Conditions:: rules */ 
/*! Rule::       %% */ 
 this.begin('code'); return 130; 
break;
case 17 : 
/*! Conditions:: rules */ 
/*! Rule::       [^\s\r\n<>\[\](){}.*+?:!=|%\/\\^$,'""]+ */ 
 
                                            // accept any non-regex, non-lex, non-string-delim,
                                            // non-escape-starter, non-space character as-is
                                            return 173;
                                         
break;
case 20 : 
/*! Conditions:: options */ 
/*! Rule::       "(\\\\|\\"|[^"])*" */ 
 yy_.yytext = yy_.yytext.substr(1, yy_.yytext.length - 2); return 178; 
break;
case 21 : 
/*! Conditions:: options */ 
/*! Rule::       '(\\\\|\\'|[^'])*' */ 
 yy_.yytext = yy_.yytext.substr(1, yy_.yytext.length - 2); return 178; 
break;
case 23 : 
/*! Conditions:: options */ 
/*! Rule::       {BR}+ */ 
 this.popState(); return 176; 
break;
case 24 : 
/*! Conditions:: options */ 
/*! Rule::       \s+{BR}+ */ 
 this.popState(); return 176; 
break;
case 25 : 
/*! Conditions:: options */ 
/*! Rule::       \s+ */ 
 /* empty */ 
break;
case 27 : 
/*! Conditions:: start_condition */ 
/*! Rule::       {BR}+ */ 
 this.popState(); 
break;
case 28 : 
/*! Conditions:: start_condition */ 
/*! Rule::       \s+{BR}+ */ 
 this.popState(); 
break;
case 29 : 
/*! Conditions:: start_condition */ 
/*! Rule::       \s+ */ 
 /* empty */ 
break;
case 30 : 
/*! Conditions:: trail */ 
/*! Rule::       \s*{BR}+ */ 
 this.begin('rules'); 
break;
case 31 : 
/*! Conditions:: indented */ 
/*! Rule::       \{ */ 
 yy.depth = 0; this.begin('action'); return 123; 
break;
case 32 : 
/*! Conditions:: indented */ 
/*! Rule::       %\{(.|{BR})*?%\} */ 
 this.begin('trail'); yy_.yytext = yy_.yytext.substr(2, yy_.yytext.length - 4); return 142; 
break;
case 33 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       %\{(.|{BR})*?%\} */ 
 yy_.yytext = yy_.yytext.substr(2, yy_.yytext.length - 4); return 142; 
break;
case 34 : 
/*! Conditions:: indented */ 
/*! Rule::       %include\b */ 
 
                                            // This is an include instruction in place of an action:
                                            // thanks to the `<indented>.+` rule immediately below we need to semi-duplicate
                                            // the `%include` token recognition here vs. the almost-identical rule for the same
                                            // further below.
                                            // There's no real harm as we need to do something special in this case anyway:
                                            // push 2 (two!) conditions.
                                            //
                                            // (Anecdotal: to find that we needed to place this almost-copy here to make the test grammar
                                            // parse correctly took several hours as the debug facilities were - and are - too meager to
                                            // quickly diagnose the problem while we hadn't. So the code got littered with debug prints
                                            // and finally it hit me what the *F* went wrong, after which I saw I needed to add *this* rule!)

                                            // first push the 'trail' condition which will be the follow-up after we're done parsing the path parameter...
                                            this.pushState('trail');
                                            // then push the immediate need: the 'path' condition.
                                            this.pushState('path');
                                            return 180;
                                         
break;
case 35 : 
/*! Conditions:: indented */ 
/*! Rule::       .+ */ 
 this.begin('rules'); return 142; 
break;
case 36 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       \/\*(.|\n|\r)*?\*\/ */ 
 /* ignore */ 
break;
case 37 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       \/\/.* */ 
 /* ignore */ 
break;
case 38 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       {BR}+ */ 
 /* empty */ 
break;
case 39 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       \s+ */ 
 /* empty */ 
break;
case 41 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       "(\\\\|\\"|[^"])*" */ 
 yy_.yytext = yy_.yytext.replace(/\\"/g,'"'); return 172; 
break;
case 42 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       '(\\\\|\\'|[^'])*' */ 
 yy_.yytext = yy_.yytext.replace(/\\'/g,"'"); return 172; 
break;
case 43 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       \[ */ 
 this.pushState('set'); return 165; 
break;
case 56 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       < */ 
 this.begin('conditions'); return 60; 
break;
case 57 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       \/! */ 
 return 158;                    // treated as `(?!atom)` 
break;
case 58 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       \/ */ 
 return 47;                     // treated as `(?=atom)` 
break;
case 60 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       \\. */ 
 yy_.yytext = yy_.yytext.replace(/^\\/g, ''); return 170; 
break;
case 63 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       %options\b */ 
 this.begin('options'); return 174; 
break;
case 64 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       %s\b */ 
 this.begin('start_condition'); return 138; 
break;
case 65 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       %x\b */ 
 this.begin('start_condition'); return 140; 
break;
case 66 : 
/*! Conditions:: INITIAL trail code */ 
/*! Rule::       %include\b */ 
 this.pushState('path'); return 180; 
break;
case 67 : 
/*! Conditions:: INITIAL rules trail code */ 
/*! Rule::       %{NAME}[^\r\n]+ */ 
 
                                            /* ignore unrecognized decl */
                                            console.warn('ignoring unsupported lexer option: ', yy_.yytext + ' while lexing in ' + this.topState() + ' state:', this._input, ' /////// ', this.matched);
                                            return 145;
                                         
break;
case 68 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       %% */ 
 this.begin('rules'); return 130; 
break;
case 74 : 
/*! Conditions:: indented trail rules INITIAL */ 
/*! Rule::       . */ 
 throw new Error("unsupported input character: " + yy_.yytext + " @ " + JSON.stringify(yy_.yylloc)); /* b0rk on bad characters */ 
break;
case 78 : 
/*! Conditions:: set */ 
/*! Rule::       \] */ 
 this.popState('set'); return 167; 
break;
case 80 : 
/*! Conditions:: code */ 
/*! Rule::       [^\r\n]+ */ 
 return 183;      // the bit of CODE just before EOF... 
break;
case 81 : 
/*! Conditions:: path */ 
/*! Rule::       [\r\n] */ 
 this.popState(); this.unput(yy_.yytext); 
break;
case 82 : 
/*! Conditions:: path */ 
/*! Rule::       '[^\r\n]+' */ 
 yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2); this.popState(); return 181; 
break;
case 83 : 
/*! Conditions:: path */ 
/*! Rule::       "[^\r\n]+" */ 
 yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2); this.popState(); return 181; 
break;
case 84 : 
/*! Conditions:: path */ 
/*! Rule::       \s+ */ 
 // skip whitespace in the line 
break;
case 85 : 
/*! Conditions:: path */ 
/*! Rule::       [^\s\r\n]+ */ 
 this.popState(); return 181; 
break;
case 86 : 
/*! Conditions:: * */ 
/*! Rule::       . */ 
 
                                            /* ignore unrecognized decl */
                                            console.warn('ignoring unsupported lexer input: ', yy_.yytext, ' @ ' + JSON.stringify(yy_.yylloc) + 'while lexing in ' + this.topState() + ' state:', this._input, ' /////// ', this.matched);
                                         
break;
default:
  return this.simpleCaseActionClusters[$avoiding_name_collisions];
}
},
simpleCaseActionClusters: {

  /*! Conditions:: action */ 
  /*! Rule::       \/\*(.|\n|\r)*?\*\/ */ 
   0 : 152,
  /*! Conditions:: action */ 
  /*! Rule::       \/\/.* */ 
   1 : 152,
  /*! Conditions:: action */ 
  /*! Rule::       "(\\\\|\\"|[^"])*" */ 
   3 : 152,
  /*! Conditions:: action */ 
  /*! Rule::       '(\\\\|\\'|[^'])*' */ 
   4 : 152,
  /*! Conditions:: action */ 
  /*! Rule::       [/"'][^{}/"']+ */ 
   5 : 152,
  /*! Conditions:: action */ 
  /*! Rule::       [^{}/"']+ */ 
   6 : 152,
  /*! Conditions:: conditions */ 
  /*! Rule::       {NAME} */ 
   9 : 136,
  /*! Conditions:: conditions */ 
  /*! Rule::       , */ 
   11 : 44,
  /*! Conditions:: conditions */ 
  /*! Rule::       \* */ 
   12 : 42,
  /*! Conditions:: options */ 
  /*! Rule::       {NAME} */ 
   18 : 136,
  /*! Conditions:: options */ 
  /*! Rule::       = */ 
   19 : 61,
  /*! Conditions:: options */ 
  /*! Rule::       [^\s\r\n]+ */ 
   22 : 178,
  /*! Conditions:: start_condition */ 
  /*! Rule::       {ID} */ 
   26 : 146,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       {ID} */ 
   40 : 136,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \| */ 
   44 : 124,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \(\?: */ 
   45 : 157,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \(\?= */ 
   46 : 157,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \(\?! */ 
   47 : 157,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \( */ 
   48 : 40,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \) */ 
   49 : 41,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \+ */ 
   50 : 43,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \* */ 
   51 : 42,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \? */ 
   52 : 63,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \^ */ 
   53 : 94,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       , */ 
   54 : 44,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       <<EOF>> */ 
   55 : 36,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \\([0-7]{1,3}|[rfntvsSbBwWdD\\*+()${}|[\]\/.^?]|c[A-Z]|x[0-9A-F]{2}|u[a-fA-F0-9]{4}) */ 
   59 : 170,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \$ */ 
   61 : 36,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \. */ 
   62 : 46,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \{\d+(,\s?\d+|,)?\} */ 
   69 : 171,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \{{ID}\} */ 
   70 : 164,
  /*! Conditions:: set options */ 
  /*! Rule::       \{{ID}\} */ 
   71 : 164,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \{ */ 
   72 : 123,
  /*! Conditions:: indented trail rules INITIAL */ 
  /*! Rule::       \} */ 
   73 : 125,
  /*! Conditions:: * */ 
  /*! Rule::       $ */ 
   75 : 132,
  /*! Conditions:: set */ 
  /*! Rule::       (\\\\|\\\]|[^\]{])+ */ 
   76 : 169,
  /*! Conditions:: set */ 
  /*! Rule::       \{ */ 
   77 : 169,
  /*! Conditions:: code */ 
  /*! Rule::       [^\r\n]*(\r|\n)+ */ 
   79 : 183
},
rules: [
/^(?:\/\*(.|\n|\r)*?\*\/)/,
/^(?:\/\/.*)/,
/^(?:\/[^ \/]*?['"{}'][^ ]*?\/)/,
/^(?:"(\\\\|\\"|[^"])*")/,
/^(?:'(\\\\|\\'|[^'])*')/,
/^(?:[\/"'][^{}\/"']+)/,
/^(?:[^{}\/"']+)/,
/^(?:\{)/,
/^(?:\})/,
/^(?:([a-zA-Z_](?:[a-zA-Z0-9_-]*[a-zA-Z0-9_])?))/,
/^(?:>)/,
/^(?:,)/,
/^(?:\*)/,
/^(?:(\r\n|\n|\r)+)/,
/^(?:\s+(\r\n|\n|\r)+)/,
/^(?:\s+)/,
/^(?:%%)/,
/^(?:[^\s\r\n<>\[\](){}.*+?:!=|%\/\\^$,'""]+)/,
/^(?:([a-zA-Z_](?:[a-zA-Z0-9_-]*[a-zA-Z0-9_])?))/,
/^(?:=)/,
/^(?:"(\\\\|\\"|[^"])*")/,
/^(?:'(\\\\|\\'|[^'])*')/,
/^(?:[^\s\r\n]+)/,
/^(?:(\r\n|\n|\r)+)/,
/^(?:\s+(\r\n|\n|\r)+)/,
/^(?:\s+)/,
/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/,
/^(?:(\r\n|\n|\r)+)/,
/^(?:\s+(\r\n|\n|\r)+)/,
/^(?:\s+)/,
/^(?:\s*(\r\n|\n|\r)+)/,
/^(?:\{)/,
/^(?:%\{(.|(\r\n|\n|\r))*?%\})/,
/^(?:%\{(.|(\r\n|\n|\r))*?%\})/,
/^(?:%include\b)/,
/^(?:.+)/,
/^(?:\/\*(.|\n|\r)*?\*\/)/,
/^(?:\/\/.*)/,
/^(?:(\r\n|\n|\r)+)/,
/^(?:\s+)/,
/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/,
/^(?:"(\\\\|\\"|[^"])*")/,
/^(?:'(\\\\|\\'|[^'])*')/,
/^(?:\[)/,
/^(?:\|)/,
/^(?:\(\?:)/,
/^(?:\(\?=)/,
/^(?:\(\?!)/,
/^(?:\()/,
/^(?:\))/,
/^(?:\+)/,
/^(?:\*)/,
/^(?:\?)/,
/^(?:\^)/,
/^(?:,)/,
/^(?:<<EOF>>)/,
/^(?:<)/,
/^(?:\/!)/,
/^(?:\/)/,
/^(?:\\([0-7]{1,3}|[rfntvsSbBwWdD\\*+()${}|[\]\/.^?]|c[A-Z]|x[0-9A-F]{2}|u[a-fA-F0-9]{4}))/,
/^(?:\\.)/,
/^(?:\$)/,
/^(?:\.)/,
/^(?:%options\b)/,
/^(?:%s\b)/,
/^(?:%x\b)/,
/^(?:%include\b)/,
/^(?:%([a-zA-Z_](?:[a-zA-Z0-9_-]*[a-zA-Z0-9_])?)[^\r\n]+)/,
/^(?:%%)/,
/^(?:\{\d+(,\s?\d+|,)?\})/,
/^(?:\{([a-zA-Z_][a-zA-Z0-9_]*)\})/,
/^(?:\{([a-zA-Z_][a-zA-Z0-9_]*)\})/,
/^(?:\{)/,
/^(?:\})/,
/^(?:.)/,
/^(?:$)/,
/^(?:(\\\\|\\\]|[^\]{])+)/,
/^(?:\{)/,
/^(?:\])/,
/^(?:[^\r\n]*(\r|\n)+)/,
/^(?:[^\r\n]+)/,
/^(?:[\r\n])/,
/^(?:'[^\r\n]+')/,
/^(?:"[^\r\n]+")/,
/^(?:\s+)/,
/^(?:[^\s\r\n]+)/,
/^(?:.)/
],
conditions: {
  "code": {
    rules: [
      66,
      67,
      75,
      79,
      80,
      86
    ],
    inclusive: false
  },
  "start_condition": {
    rules: [
      26,
      27,
      28,
      29,
      75,
      86
    ],
    inclusive: false
  },
  "options": {
    rules: [
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      71,
      75,
      86
    ],
    inclusive: false
  },
  "conditions": {
    rules: [
      9,
      10,
      11,
      12,
      75,
      86
    ],
    inclusive: false
  },
  "action": {
    rules: [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      75,
      86
    ],
    inclusive: false
  },
  "path": {
    rules: [
      75,
      81,
      82,
      83,
      84,
      85,
      86
    ],
    inclusive: false
  },
  "set": {
    rules: [
      71,
      75,
      76,
      77,
      78,
      86
    ],
    inclusive: false
  },
  "indented": {
    rules: [
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      68,
      69,
      70,
      72,
      73,
      74,
      75,
      86
    ],
    inclusive: true
  },
  "trail": {
    rules: [
      30,
      33,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      72,
      73,
      74,
      75,
      86
    ],
    inclusive: true
  },
  "rules": {
    rules: [
      13,
      14,
      15,
      16,
      17,
      33,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      67,
      68,
      69,
      70,
      72,
      73,
      74,
      75,
      86
    ],
    inclusive: true
  },
  "INITIAL": {
    rules: [
      33,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      72,
      73,
      74,
      75,
      86
    ],
    inclusive: true
  }
}
};

// lexer.JisonLexerError = JisonLexerError;
return lexer;
})();
parser.lexer = lexer;

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;
parser.Parser = Parser;
// parser.JisonParserError = JisonParserError;

return new Parser();
})();




if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = lexParser;
exports.Parser = lexParser.Parser;
exports.parse = function () {
  return lexParser.parse.apply(lexParser, arguments);
};

}
