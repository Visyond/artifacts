{
  "_args": [
    [
      "lex-parser@git://github.com/GerHobbelt/lex-parser.git#master",
      "/home/doctor/prog/environment_root/server/v2/node_modules/jison-lex"
    ]
  ],
  "_from": "git://github.com/GerHobbelt/lex-parser.git#master",
  "_id": "lex-parser@0.1.4",
  "_inCache": true,
  "_location": "/jison-lex/lex-parser",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/GerHobbelt/lex-parser/master/package.json",
      "gitUrl": "git://github.com/GerHobbelt/lex-parser.git#master",
      "httpsUrl": "git+https://github.com/GerHobbelt/lex-parser.git#master",
      "shortcut": "github:GerHobbelt/lex-parser#master",
      "ssh": "git@github.com:GerHobbelt/lex-parser.git#master",
      "sshUrl": "git+ssh://git@github.com/GerHobbelt/lex-parser.git#master",
      "type": "github"
    },
    "name": "lex-parser",
    "raw": "lex-parser@git://github.com/GerHobbelt/lex-parser.git#master",
    "rawSpec": "git://github.com/GerHobbelt/lex-parser.git#master",
    "scope": null,
    "spec": "git://github.com/GerHobbelt/lex-parser.git#master",
    "type": "hosted"
  },
  "_requiredBy": [
    "/jison-lex"
  ],
  "_resolved": "git://github.com/GerHobbelt/lex-parser.git#eb7bcb85775fe9a8a4a68960d6e32472021d801c",
  "_shasum": "9eeaff65165e3289312ce60e21dfa2bde31b5ccd",
  "_shrinkwrap": null,
  "_spec": "lex-parser@git://github.com/GerHobbelt/lex-parser.git#master",
  "_where": "/home/doctor/prog/environment_root/server/v2/node_modules/jison-lex",
  "author": {
    "email": "zach@carter.name",
    "name": "Zach Carter",
    "url": "http://zaa.ch"
  },
  "dependencies": {},
  "description": "A parser for lexical grammars used by jison",
  "devDependencies": {
    "jison": "git://github.com/GerHobbelt/jison.git#master",
    "test": ">=0.6.0"
  },
  "gitHead": "eb7bcb85775fe9a8a4a68960d6e32472021d801c",
  "installable": true,
  "keywords": [
    "grammar",
    "jison",
    "lexical",
    "parser"
  ],
  "license": "MIT",
  "main": "lex-parser.js",
  "name": "lex-parser",
  "optionalDependencies": {},
  "readme": "# lex-parser\n\nA parser for lexical grammars used by [jison](http://jison.org) and jison-lex.\n\n## install\n\n    npm install lex-parser\n\n## build\n\nTo build the parser yourself, clone the git repo then run:\n\n    make\n\nThis will generate `lex-parser.js`.\n\n## usage\n\n    var lexParser = require(\"lex-parser\");\n\n    // parse a lexical grammar and return JSON\n    lexParser.parse(\"%% ... \");\n\n## example\n\nThe parser can parse its own lexical grammar, shown below:\n\n    NAME                                    [a-zA-Z_][a-zA-Z0-9_-]*\n    BR                                      \\r\\n|\\n|\\r\n\n    %s indented trail rules\n    %x code start_condition options conditions action\n\n    %%\n\n    <action>\"/*\"(.|\\n|\\r)*?\"*/\"             return 'ACTION_BODY';\n    <action>\"//\".*                          return 'ACTION_BODY';\n    <action>\"/\"[^ /]*?['\"{}'][^ ]*?\"/\"      return 'ACTION_BODY'; // regexp with braces or quotes (and no spaces)\n    <action>\\\"(\"\\\\\\\\\"|'\\\"'|[^\"])*\\\"         return 'ACTION_BODY';\n    <action>\"'\"(\"\\\\\\\\\"|\"\\'\"|[^'])*\"'\"       return 'ACTION_BODY';\n    <action>[/\"'][^{}/\"']+                  return 'ACTION_BODY';\n    <action>[^{}/\"']+                       return 'ACTION_BODY';\n    <action>\"{\"                             yy.depth++; return '{';\n    <action>\"}\"                             if (yy.depth == 0) { this.begin('trail'); } else { yy.depth--; } return '}';\n\n    <conditions>{NAME}                      return 'NAME';\n    <conditions>\">\"                         this.popState(); return '>';\n    <conditions>\",\"                         return ',';\n    <conditions>\"*\"                         return '*';\n\n    <rules>{BR}+                            /* empty */\n    <rules>\\s+{BR}+                         /* empty */\n    <rules>\\s+                              this.begin('indented');\n    <rules>\"%%\"                             this.begin('code'); return '%%';\n    <rules>[a-zA-Z0-9_]+                    return 'CHARACTER_LIT';\n\n    <options>{NAME}                         yy.options[yytext] = true;\n    <options>{BR}+                          this.begin('INITIAL');\n    <options>\\s+{BR}+                       this.begin('INITIAL');\n    <options>\\s+                            /* empty */\n\n    <start_condition>{NAME}                 return 'START_COND';\n    <start_condition>{BR}+                  this.begin('INITIAL');\n    <start_condition>\\s+{BR}+               this.begin('INITIAL');\n    <start_condition>\\s+                    /* empty */\n\n    <trail>\\s*{BR}+                         this.begin('rules');\n\n    <indented>\"{\"                           yy.depth = 0; this.begin('action'); return '{';\n    <indented>\"%{\"(.|{BR})*?\"%}\"            this.begin('trail'); yytext = yytext.substr(2, yytext.length - 4); return 'ACTION';\n    \"%{\"(.|{BR})*?\"%}\"                      yytext = yytext.substr(2, yytext.length - 4); return 'ACTION';\n    <indented>.+                            this.begin('rules'); return 'ACTION';\n\n    \"/*\"(.|\\n|\\r)*?\"*/\"                     /* empty */\n    \"//\".*                                  /* empty */\n\n    {BR}+                                   /* ignore */\n    \\s+                                     /* ignore */\n    {NAME}                                  return 'NAME';\n    \\\"(\"\\\\\\\\\"|'\\\"'|[^\"])*\\\"                 yytext = yytext.replace(/\\\\\"/g,'\"'); return 'STRING_LIT';\n    \"'\"(\"\\\\\\\\\"|\"\\'\"|[^'])*\"'\"               yytext = yytext.replace(/\\\\'/g,\"'\"); return 'STRING_LIT';\n    \"|\"                                     return '|';\n    \"[\"(\"\\\\\\\\\"|\"\\]\"|[^\\]])*\"]\"              return 'ANY_GROUP_REGEX';\n    \"(?:\"                                   return 'SPECIAL_GROUP';\n    \"(?=\"                                   return 'SPECIAL_GROUP';\n    \"(?!\"                                   return 'SPECIAL_GROUP';\n    \"(\"                                     return '(';\n    \")\"                                     return ')';\n    \"+\"                                     return '+';\n    \"*\"                                     return '*';\n    \"?\"                                     return '?';\n    \"^\"                                     return '^';\n    \",\"                                     return ',';\n    \"<<EOF>>\"                               return '$';\n    \"<\"                                     this.begin('conditions'); return '<';\n    \"/!\"                                    return '/!';\n    \"/\"                                     return '/';\n    \"\\\\\"([0-7]{1,3}|[rfntvsSbBwWdD\\\\*+()${}|[\\]\\/.^?]|\"c\"[A-Z]|\"x\"[0-9A-F]{2}|\"u\"[a-fA-F0-9]{4})\n                                            return 'ESCAPE_CHAR';\n    \"\\\\\".                                   yytext = yytext.replace(/^\\\\/g,''); return 'ESCAPE_CHAR';\n    \"$\"                                     return '$';\n    \".\"                                     return '.';\n    \"%options\"                              yy.options = {}; this.begin('options');\n    \"%s\"                                    this.begin('start_condition'); return 'START_INC';\n    \"%x\"                                    this.begin('start_condition'); return 'START_EXC';\n    \"%%\"                                    this.begin('rules'); return '%%';\n    \"{\"\\d+(\",\"\\s?\\d+|\",\")?\"}\"               return 'RANGE_REGEX';\n    \"{\"{NAME}\"}\"                            return 'NAME_BRACE';\n    \"{\"                                     return '{';\n    \"}\"                                     return '}';\n    .                                       throw new Error(\"unsupported input character: \" + yytext + \" @ \" + JSON.stringify(yylloc)); /* b0rk on bad characters */\n    <*><<EOF>>                              return 'EOF';\n\n    <code>(.|{BR})+                         return 'CODE';\n\n    %%\n\n## license\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "repository": "https://github.com/zaach/lex-parser.git",
    "type": "git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.1.4"
}
