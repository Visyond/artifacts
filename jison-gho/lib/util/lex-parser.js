/* parser generated by jison 0.4.18-178 */

/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack, ...),
 *               where `...` denotes the (optional) additional arguments the user passed to
 *               `parser.parse(str, ...)` and specified by way of `%parse-param ...` in the grammar file
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
 *                             to store/reference the rule value `$$` and location info `@$`.
 *
 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
 *                 data from one reduce action through to the next within a single parse run, then you
 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
 *
 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
 *                             to match this rule. This is *not* the look-ahead token, but the last token
 *                             that's actually part of this rule.
 *
 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
 *                 the current look-ahead token.
 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
 *
 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
 *
 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
 *
 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
 *
 *               - `yystate` : the current parser state number, used internally for dispatching and
 *                             executing the action code chunk matching the rule currently being reduced.
 *
 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *                 Also note that you can access this and other stack index values using the new double-hash
 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
 *                 This is made available to write very advanced grammar action rules, e.g. when you want
 *                 to investigate the parse state stack in your action code, which would, for example,
 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
 *                 to the work described here:
 *
 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
 *                   In Journées Francophones des Languages Applicatifs.
 *
 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
 *
 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
 *                             constructs.
 *
 *               - `yylstack`: reference to the parser token location stack. Also accessed via
 *                             the `@1` etc. constructs.
 *
 *               - `yystack` : reference to the parser token id stack. Also accessed via the
 *                             `#1` etc. constructs.
 *
 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
 *                 want access for your own purposes, such as error analysis as mentioned above!
 *
 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
 *                 *reduced*.
 *
 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
 *                             *states* such as the one in `yystate`, which are used to represent
 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
 *                             what can I say? If you access this one, you're clearly doing wicked things
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             grammar definition file.
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash, ExceptionClass),
 *    yyError: function(str, ...),
 *    yyRecovering: function(),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
 *
 *    originalParseError: function(str, hash, ExceptionClass),
 *               The basic `parseError` handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are passed verbatim to the grammar rules' action code.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash, ExceptionClass),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index, ...),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *        cleanupAfterLex: function()
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *    parser:      (reference to the current parser instance)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 * from either the parser or lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 * Please do note that in the latter situation, the `expected` field will be omitted as
 * this type of failure is assumed not to be due to *parse errors* but rather due to user
 * action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy [, optional parse() args])
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval [, optional parse() args]) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *
 *  yy: {
 *      pre_parse:  function(yy [, optional parse() args])
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval [, optional parse() args]) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another.
 *                 When it does not return any value, the parser will return the original
 *                 `retval`.
 *                 This function is invoked immediately before `Parser.post_parse()`.
 *
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */
var lexParser = (function () {

// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function JisonParserError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonParserError'
    });

    if (msg == null) msg = '???';

    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });

    this.hash = hash;

    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) { // V8
            Error.captureStackTrace(this, this.constructor);
        } else {
            stacktrace = (new Error(msg)).stack;
        }
    }
    if (stacktrace) {
        Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
}

if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);
} else {
    JisonParserError.prototype = Object.create(Error.prototype);
}
JisonParserError.prototype.constructor = JisonParserError;
JisonParserError.prototype.name = 'JisonParserError';




// helper: reconstruct the productions[] table
function bp(s) {
    var rv = [];
    var p = s.pop;
    var r = s.rule;
    for (var i = 0, l = p.length; i < l; i++) {
        rv.push([
            p[i],
            r[i]
        ]);
    }
    return rv;
}



// helper: reconstruct the defaultActions[] table
function bda(s) {
    var rv = {};
    var d = s.idx;
    var g = s.goto;
    for (var i = 0, l = d.length; i < l; i++) {
        var j = d[i];
        rv[j] = g[i];
    }
    return rv;
}



// helper: reconstruct the 'goto' table
function bt(s) {
    var rv = [];
    var d = s.len;
    var y = s.symbol;
    var t = s.type;
    var a = s.state;
    var m = s.mode;
    var g = s.goto;
    for (var i = 0, l = d.length; i < l; i++) {
        var n = d[i];
        var q = {};
        for (var j = 0; j < n; j++) {
            var z = y.shift();
            switch (t.shift()) {
            case 2:
                q[z] = [
                    m.shift(),
                    g.shift()
                ];
                break;

            case 0:
                q[z] = a.shift();
                break;

            default:
                // type === 1: accept
                q[z] = [
                    3
                ];
            }
        }
        rv.push(q);
    }
    return rv;
}



// helper: runlength encoding with increment step: code, length: step (default step = 0)
// `this` references an array
function s(c, l, a) {
    a = a || 0;
    for (var i = 0; i < l; i++) {
        this.push(c);
        c += a;
    }
}

// helper: duplicate sequence from *relative* offset and length.
// `this` references an array
function c(i, l) {
    i = this.length - i;
    for (l += i; i < l; i++) {
        this.push(this[i]);
    }
}

// helper: unpack an array using helpers and data, all passed in an array argument 'a'.
function u(a) {
    var rv = [];
    for (var i = 0, l = a.length; i < l; i++) {
        var e = a[i];
        // Is this entry a helper function?
        if (typeof e === 'function') {
            i++;
            e.apply(rv, a[i]);
        } else {
            rv.push(e);
        }
    }
    return rv;
}


var parser = {
    // Code Generator Information Report
    // ---------------------------------
    //
    // Options:
    //
    //   no default action: ............... false
    //   no try..catch: ................... false
    //   no default resolve on conflict:    false
    //   on-demand look-ahead: ............ false
    //   error recovery token skip maximum: 3
    //   debug grammar/output: ............ false
    //   has partial LR conflict upgrade:   true
    //   rudimentary token-stack support:   false
    //   parser table compression mode: ... 2
    //   export debug tables: ............. false
    //   export *all* tables: ............. false
    //   module type: ..................... commonjs
    //   parser engine type: .............. lalr
    //   output main() in the module: ..... true
    //   number of expected conflicts: .... 0
    //
    //
    // Parser Analysis flags:
    //
    //   all actions are default: ......... false
    //   uses yyleng: ..................... false
    //   uses yylineno: ................... false
    //   uses yytext: ..................... false
    //   uses yylloc: ..................... false
    //   uses ParseError API: ............. false
    //   uses YYERROR: .................... false
    //   uses YYRECOVERING: ............... false
    //   uses YYERROK: .................... false
    //   uses YYCLEARIN: .................. false
    //   tracks rule values: .............. true
    //   assigns rule values: ............. true
    //   uses location tracking: .......... false
    //   assigns location: ................ false
    //   uses yystack: .................... false
    //   uses yysstack: ................... false
    //   uses yysp: ....................... true
    //   has error recovery: .............. true
    //
    // --------- END OF REPORT -----------

trace: function no_op_trace() { },
JisonParserError: JisonParserError,
yy: {},
options: {
  type: "lalr",
  hasPartialLrUpgradeOnConflict: true,
  errorRecoveryTokenDiscardCount: 3
},
symbols_: {
  "$": 17,
  "$accept": 0,
  "$end": 1,
  "%%": 19,
  "(": 10,
  ")": 11,
  "*": 7,
  "+": 12,
  ",": 8,
  ".": 15,
  "/": 14,
  "/!": 28,
  "<": 5,
  "=": 18,
  ">": 6,
  "?": 13,
  "ACTION": 23,
  "ACTION_BODY": 26,
  "CHARACTER_LIT": 36,
  "CODE": 43,
  "EOF": 1,
  "ESCAPE_CHAR": 33,
  "INCLUDE": 41,
  "NAME": 20,
  "NAME_BRACE": 29,
  "OPTIONS": 37,
  "OPTIONS_END": 38,
  "OPTION_STRING_VALUE": 39,
  "OPTION_VALUE": 40,
  "PATH": 42,
  "RANGE_REGEX": 34,
  "REGEX_SET": 32,
  "REGEX_SET_END": 31,
  "REGEX_SET_START": 30,
  "SPECIAL_GROUP": 27,
  "START_COND": 25,
  "START_EXC": 22,
  "START_INC": 21,
  "STRING_LIT": 35,
  "UNKNOWN_DECL": 24,
  "^": 16,
  "action": 55,
  "action_body": 57,
  "action_comments_body": 58,
  "any_group_regex": 67,
  "definition": 48,
  "definitions": 47,
  "error": 2,
  "escape_char": 70,
  "extra_lexer_module_code": 76,
  "include_macro_code": 77,
  "init": 46,
  "lex": 44,
  "module_code_chunk": 78,
  "name_expansion": 66,
  "name_list": 60,
  "names_exclusive": 50,
  "names_inclusive": 49,
  "nonempty_regex_list": 63,
  "option": 75,
  "option_list": 74,
  "optional_module_code_chunk": 79,
  "options": 73,
  "range_regex": 71,
  "regex": 61,
  "regex_base": 65,
  "regex_concat": 64,
  "regex_list": 62,
  "regex_set": 68,
  "regex_set_atom": 69,
  "rule": 54,
  "rule_block": 53,
  "rules": 51,
  "rules_and_epilogue": 45,
  "rules_collective": 52,
  "start_conditions": 59,
  "string": 72,
  "unbracketed_action_body": 56,
  "{": 3,
  "|": 9,
  "}": 4
},
terminals_: {
  1: "EOF",
  2: "error",
  3: "{",
  4: "}",
  5: "<",
  6: ">",
  7: "*",
  8: ",",
  9: "|",
  10: "(",
  11: ")",
  12: "+",
  13: "?",
  14: "/",
  15: ".",
  16: "^",
  17: "$",
  18: "=",
  19: "%%",
  20: "NAME",
  21: "START_INC",
  22: "START_EXC",
  23: "ACTION",
  24: "UNKNOWN_DECL",
  25: "START_COND",
  26: "ACTION_BODY",
  27: "SPECIAL_GROUP",
  28: "/!",
  29: "NAME_BRACE",
  30: "REGEX_SET_START",
  31: "REGEX_SET_END",
  32: "REGEX_SET",
  33: "ESCAPE_CHAR",
  34: "RANGE_REGEX",
  35: "STRING_LIT",
  36: "CHARACTER_LIT",
  37: "OPTIONS",
  38: "OPTIONS_END",
  39: "OPTION_STRING_VALUE",
  40: "OPTION_VALUE",
  41: "INCLUDE",
  42: "PATH",
  43: "CODE"
},
TERROR: 2,
EOF: 1,

// internals: defined here so the object *structure* doesn't get modified by parse() et al,
// thus helping JIT compilers like Chrome V8.
originalQuoteName: null,
originalParseError: null,
cleanupAfterParse: null,
constructParseErrorInfo: null,

__reentrant_call_depth: 0,      // INTERNAL USE ONLY
__error_infos: [],              // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup

// APIs which will be set up depending on user action code analysis:
//yyRecovering: 0,
//yyErrOk: 0,
//yyClearIn: 0,

// Helper APIs
// -----------

// Helper function which can be overridden by user code later on: put suitable quotes around
// literal IDs in a description string.
quoteName: function parser_quoteName(id_str) {
    return '"' + id_str + '"';
},

// Return a more-or-less human-readable description of the given symbol, when available,
// or the symbol itself, serving as its own 'description' for lack of something better to serve up.
//
// Return NULL when the symbol is unknown to the parser.
describeSymbol: function parser_describeSymbol(symbol) {
    if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {
        return this.terminal_descriptions_[symbol];
    }
    else if (symbol === this.EOF) {
        return 'end of input';
    }
    else if (this.terminals_[symbol]) {
        return this.quoteName(this.terminals_[symbol]);
    }
    // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
    //
    // An example of this may be where a rule's action code contains a call like this:
    //
    //      parser.describeSymbol(#$)
    //
    // to obtain a human-readable description or name of the current grammar rule. This comes handy in
    // error handling action code blocks, for example.
    var s = this.symbols_;
    for (var key in s) {
        if (s[key] === symbol) {
            return key;
        }
    }
    return null;
},

// Produce a (more or less) human-readable list of expected tokens at the point of failure.
//
// The produced list may contain token or token set descriptions instead of the tokens
// themselves to help turning this output into something that easier to read by humans
// unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
// expected terminals and nonterminals is produced.
//
// The returned list (array) will not contain any duplicate entries.
collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
    var TERROR = this.TERROR;
    var tokenset = [];
    var check = {};
    // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
    // If so, use that one instead of the less palatable token set.
    if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {
        return [
            this.state_descriptions_[state]
        ];
    }
    for (var p in this.table[state]) {
        p = +p;
        if (p !== TERROR) {
            var d = do_not_describe ? p : this.describeSymbol(p);
            if (d && !check[d]) {
                tokenset.push(d);
                check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.
            }
        }
    }
    return tokenset;
},
productions_: bp({
  pop: u([
  44,
  s,
  [45, 3],
  46,
  47,
  47,
  s,
  [48, 8],
  49,
  49,
  50,
  50,
  51,
  51,
  52,
  52,
  53,
  53,
  54,
  s,
  [55, 3],
  56,
  56,
  57,
  57,
  58,
  58,
  s,
  [59, 3],
  60,
  60,
  61,
  62,
  62,
  s,
  [63, 3],
  64,
  64,
  s,
  [65, 15],
  66,
  67,
  68,
  68,
  69,
  s,
  [69, 4, 1],
  72,
  73,
  74,
  74,
  s,
  [75, 4],
  76,
  76,
  77,
  77,
  78,
  78,
  79,
  79
]),
  rule: u([
  4,
  4,
  2,
  0,
  0,
  2,
  0,
  s,
  [2, 3],
  3,
  s,
  [1, 5],
  2,
  1,
  2,
  c,
  [14, 3],
  c,
  [21, 3],
  c,
  [16, 5],
  2,
  1,
  5,
  c,
  [9, 3],
  3,
  0,
  1,
  c,
  [13, 3],
  0,
  3,
  c,
  [28, 3],
  1,
  3,
  3,
  s,
  [2, 5],
  c,
  [10, 3],
  s,
  [1, 6],
  c,
  [21, 3],
  c,
  [9, 10],
  s,
  [3, 3],
  c,
  [8, 3],
  c,
  [29, 4],
  0
])
}),
performAction: function parser__PerformAction(yystate /* action[1] */, yysp, yyvstack) {
/* this == yyval */
var yy = this.yy;

switch (yystate) {
case 1:
    /*! Production::    lex : init definitions rules_and_epilogue EOF */
    this.$ = yyvstack[yysp - 1];
    this.$.macros = yyvstack[yysp - 2].macros;
    this.$.startConditions = yyvstack[yysp - 2].startConditions;
    this.$.unknownDecls = yyvstack[yysp - 2].unknownDecls;
    // if there are any options, add them all, otherwise set options to NULL:
    // can't check for 'empty object' by `if (yy.options) ...` so we do it this way:
    for (var k in yy.options) {
      this.$.options = yy.options;
      break;
    }
    if (yy.actionInclude) {
      var asrc = yy.actionInclude.join('\n\n');
      // Only a non-empty action code chunk should actually make it through:
      if (asrc.trim() !== '') {
        this.$.actionInclude = asrc;
      }
    }
    delete yy.options;
    delete yy.actionInclude;
    return this.$;
    break;

case 2:
    /*! Production::    rules_and_epilogue : "%%" rules "%%" extra_lexer_module_code */
    if (yyvstack[yysp] && yyvstack[yysp].trim() !== '') {
      this.$ = { rules: yyvstack[yysp - 2], moduleInclude: yyvstack[yysp] };
    } else {
      this.$ = { rules: yyvstack[yysp - 2] };
    }
    break;

case 3:
    /*! Production::    rules_and_epilogue : "%%" rules */
    this.$ = { rules: yyvstack[yysp] };
    break;

case 4:
    /*! Production::    rules_and_epilogue : ε */
    this.$ = { rules: [] };
    break;

case 5:
    /*! Production::    init : ε */
    yy.actionInclude = [];
    if (!yy.options) yy.options = {};
    break;

case 6:
    /*! Production::    definitions : definition definitions */
    this.$ = yyvstack[yysp];
    if (yyvstack[yysp - 1] != null) {
      if ('length' in yyvstack[yysp - 1]) {
        this.$.macros[yyvstack[yysp - 1][0]] = yyvstack[yysp - 1][1];
      } else if (yyvstack[yysp - 1].type === 'names') {
        for (var name in yyvstack[yysp - 1].names) {
          this.$.startConditions[name] = yyvstack[yysp - 1].names[name];
        }
      } else if (yyvstack[yysp - 1].type === 'unknown') {
        this.$.unknownDecls.push(yyvstack[yysp - 1].body);
      }
    }
    break;

case 7:
    /*! Production::    definitions : ε */
    this.$ = {
      macros: {},           // { hash table }
      startConditions: {},  // { hash table }
      unknownDecls: []      // [ array of [key,value] pairs }
    };
    break;

case 8:
    /*! Production::    definition : NAME regex */
case 26:
    /*! Production::    rule : regex action */
    this.$ = [yyvstack[yysp - 1], yyvstack[yysp]];
    break;

case 9:
    /*! Production::    definition : START_INC names_inclusive */
case 10:
    /*! Production::    definition : START_EXC names_exclusive */
case 28:
    /*! Production::    action : unbracketed_action_body */
case 29:
    /*! Production::    action : include_macro_code */
case 32:
    /*! Production::    action_body : action_comments_body */
case 70:
    /*! Production::    escape_char : ESCAPE_CHAR */
case 71:
    /*! Production::    range_regex : RANGE_REGEX */
case 81:
    /*! Production::    extra_lexer_module_code : optional_module_code_chunk */
case 85:
    /*! Production::    module_code_chunk : CODE */
case 87:
    /*! Production::    optional_module_code_chunk : module_code_chunk */
    this.$ = yyvstack[yysp];
    break;

case 11:
    /*! Production::    definition : "{" action_body "}" */
    yy.actionInclude.push(yyvstack[yysp - 1]); this.$ = null;
    break;

case 12:
    /*! Production::    definition : ACTION */
case 13:
    /*! Production::    definition : include_macro_code */
    yy.actionInclude.push(yyvstack[yysp]); this.$ = null;
    break;

case 14:
    /*! Production::    definition : options */
    this.$ = null;
    break;

case 15:
    /*! Production::    definition : UNKNOWN_DECL */
    this.$ = {type: 'unknown', body: yyvstack[yysp]};
    break;

case 16:
    /*! Production::    names_inclusive : START_COND */
    this.$ = {type: 'names', names: {}}; this.$.names[yyvstack[yysp]] = 0;
    break;

case 17:
    /*! Production::    names_inclusive : names_inclusive START_COND */
    this.$ = yyvstack[yysp - 1]; this.$.names[yyvstack[yysp]] = 0;
    break;

case 18:
    /*! Production::    names_exclusive : START_COND */
    this.$ = {type: 'names', names: {}}; this.$.names[yyvstack[yysp]] = 1;
    break;

case 19:
    /*! Production::    names_exclusive : names_exclusive START_COND */
    this.$ = yyvstack[yysp - 1]; this.$.names[yyvstack[yysp]] = 1;
    break;

case 20:
    /*! Production::    rules : rules rules_collective */
    this.$ = yyvstack[yysp - 1].concat(yyvstack[yysp]);
    break;

case 21:
    /*! Production::    rules : ε */
case 25:
    /*! Production::    rule_block : ε */
    this.$ = [];
    break;

case 22:
    /*! Production::    rules_collective : start_conditions rule */
    if (yyvstack[yysp - 1]) {
        yyvstack[yysp].unshift(yyvstack[yysp - 1]);
    }
    this.$ = [yyvstack[yysp]];
    break;

case 23:
    /*! Production::    rules_collective : start_conditions "{" rule_block "}" */
    if (yyvstack[yysp - 3]) {
        yyvstack[yysp - 1].forEach(function (d) {
            d.unshift(yyvstack[yysp - 3]);
        });
    }
    this.$ = yyvstack[yysp - 1];
    break;

case 24:
    /*! Production::    rule_block : rule_block rule */
    this.$ = $rules; this.$.push(yyvstack[yysp]);
    break;

case 27:
    /*! Production::    action : "{" action_body "}" */
case 36:
    /*! Production::    start_conditions : "<" name_list ">" */
    this.$ = yyvstack[yysp - 1];
    break;

case 31:
    /*! Production::    unbracketed_action_body : unbracketed_action_body ACTION */
    this.$ = yyvstack[yysp - 1] + '\n' + yyvstack[yysp];
    break;

case 33:
    /*! Production::    action_body : action_body "{" action_body "}" action_comments_body */
    this.$ = yyvstack[yysp - 4] + yyvstack[yysp - 3] + yyvstack[yysp - 2] + yyvstack[yysp - 1] + yyvstack[yysp];
    break;

case 34:
    /*! Production::    action_comments_body : ε */
case 43:
    /*! Production::    regex_list : ε */
case 88:
    /*! Production::    optional_module_code_chunk : ε */
    this.$ = '';
    break;

case 35:
    /*! Production::    action_comments_body : action_comments_body ACTION_BODY */
case 47:
    /*! Production::    regex_concat : regex_concat regex_base */
case 57:
    /*! Production::    regex_base : regex_base range_regex */
case 66:
    /*! Production::    regex_set : regex_set_atom regex_set */
case 86:
    /*! Production::    module_code_chunk : module_code_chunk CODE */
    this.$ = yyvstack[yysp - 1] + yyvstack[yysp];
    break;

case 37:
    /*! Production::    start_conditions : "<" "*" ">" */
    this.$ = ['*'];
    break;

case 39:
    /*! Production::    name_list : NAME */
    this.$ = [yyvstack[yysp]];
    break;

case 40:
    /*! Production::    name_list : name_list "," NAME */
    this.$ = yyvstack[yysp - 2]; this.$.push(yyvstack[yysp]);
    break;

case 41:
    /*! Production::    regex : nonempty_regex_list */
    // Detect if the regex ends with a pure (Unicode) word;
    // we *do* consider escaped characters which are 'alphanumeric'
    // to be equivalent to their non-escaped version, hence these are
    // all valid 'words' for the 'easy keyword rules' option:
    //
    // - hello_kitty
    // - γεια_σου_γατούλα
    // - \u03B3\u03B5\u03B9\u03B1_\u03C3\u03BF\u03C5_\u03B3\u03B1\u03C4\u03BF\u03CD\u03BB\u03B1
    //
    // http://stackoverflow.com/questions/7885096/how-do-i-decode-a-string-with-escaped-unicode#12869914
    //
    // As we only check the *tail*, we also accept these as
    // 'easy keywords':
    //
    // - %options
    // - %foo-bar
    // - +++a:b:c1
    //
    // Note the dash in that last example: there the code will consider
    // `bar` to be the keyword, which is fine with us as we're only
    // interested in the trailing boundary and patching that one for
    // the `easy_keyword_rules` option.
    this.$ = yyvstack[yysp];
    if (yy.options.easy_keyword_rules) {
      // We need to 'protect' `eval` here as keywords are allowed
      // to contain double-quotes and other leading cruft.
      // `eval` *does* gobble some escapes (such as `\b`) but
      // we protect against that through a simple replace regex:
      // we're not interested in the special escapes' exact value
      // anyway.
      // It will also catch escaped escapes (`\\`), which are not
      // word characters either, so no need to worry about
      // `eval(str)` 'correctly' converting convoluted constructs
      // like '\\\\\\\\\\b' in here.
      this.$ = this.$
      .replace(/\\\\/g, '.')
      .replace(/"/g, '.')
      .replace(/\\c[A-Z]/g, '.')
      .replace(/\\[^xu0-9]/g, '.');
    
      try {
        this.$ = eval('"' + this.$ + '"');
      }
      catch (ex) {
        console.warn('easy-keyword-rule FAIL on eval: ', ex);
    
        // make the next keyword test fail:
        this.$ = '.';
      }
      // a 'keyword' starts with an alphanumeric character,
      // followed by zero or more alphanumerics or digits:
      var re = new XRegExp('\\w[\\w\\d]*$');
      if (XRegExp.match(this.$, re)) {
        this.$ = yyvstack[yysp] + "\\b";
      } else {
        this.$ = yyvstack[yysp];
      }
    }
    break;

case 44:
    /*! Production::    nonempty_regex_list : regex_concat "|" regex_list */
    this.$ = yyvstack[yysp - 2] + '|' + yyvstack[yysp];
    break;

case 45:
    /*! Production::    nonempty_regex_list : "|" regex_list */
    this.$ = '|' + yyvstack[yysp];
    break;

case 49:
    /*! Production::    regex_base : "(" regex_list ")" */
    this.$ = '(' + yyvstack[yysp - 1] + ')';
    break;

case 50:
    /*! Production::    regex_base : SPECIAL_GROUP regex_list ")" */
    this.$ = yyvstack[yysp - 2] + yyvstack[yysp - 1] + ')';
    break;

case 51:
    /*! Production::    regex_base : regex_base "+" */
    this.$ = yyvstack[yysp - 1] + '+';
    break;

case 52:
    /*! Production::    regex_base : regex_base "*" */
    this.$ = yyvstack[yysp - 1] + '*';
    break;

case 53:
    /*! Production::    regex_base : regex_base "?" */
    this.$ = yyvstack[yysp - 1] + '?';
    break;

case 54:
    /*! Production::    regex_base : "/" regex_base */
    this.$ = '(?=' + yyvstack[yysp] + ')';
    break;

case 55:
    /*! Production::    regex_base : "/!" regex_base */
    this.$ = '(?!' + yyvstack[yysp] + ')';
    break;

case 59:
    /*! Production::    regex_base : "." */
    this.$ = '.';
    break;

case 60:
    /*! Production::    regex_base : "^" */
    this.$ = '^';
    break;

case 61:
    /*! Production::    regex_base : "$" */
    this.$ = '$';
    break;

case 65:
    /*! Production::    any_group_regex : REGEX_SET_START regex_set REGEX_SET_END */
case 82:
    /*! Production::    extra_lexer_module_code : optional_module_code_chunk include_macro_code extra_lexer_module_code */
    this.$ = yyvstack[yysp - 2] + yyvstack[yysp - 1] + yyvstack[yysp];
    break;

case 69:
    /*! Production::    regex_set_atom : name_expansion */
    if (XRegExp._getUnicodeProperty(yyvstack[yysp].replace(/[{}]/g, ''))
        && yyvstack[yysp].toUpperCase() !== yyvstack[yysp]
    ) {
        // treat this as part of an XRegExp `\p{...}` Unicode 'General Category' Property cf. http://unicode.org/reports/tr18/#Categories
        this.$ = yyvstack[yysp];
    } else {
        this.$ = yyvstack[yysp];
    }
    //console.log("name expansion for: ", { name: $name_expansion, redux: $name_expansion.replace(/[{}]/g, ''), output: $$ });
    break;

case 72:
    /*! Production::    string : STRING_LIT */
    this.$ = prepareString(yyvstack[yysp].substr(1, yyvstack[yysp].length - 2));
    break;

case 77:
    /*! Production::    option : NAME */
    yy.options[yyvstack[yysp]] = true;
    break;

case 78:
    /*! Production::    option : NAME "=" OPTION_STRING_VALUE */
    yy.options[yyvstack[yysp - 2]] = yyvstack[yysp];
    break;

case 79:
    /*! Production::    option : NAME "=" OPTION_VALUE */
case 80:
    /*! Production::    option : NAME "=" NAME */
    yy.options[yyvstack[yysp - 2]] = parseValue(yyvstack[yysp]);
    break;

case 83:
    /*! Production::    include_macro_code : INCLUDE PATH */
    var fs = require('fs');
    var fileContent = fs.readFileSync(yyvstack[yysp], { encoding: 'utf-8' });
    // And no, we don't support nested '%include':
    this.$ = '\n// Included by Jison: ' + yyvstack[yysp] + ':\n\n' + fileContent + '\n\n// End Of Include by Jison: ' + yyvstack[yysp] + '\n\n';
    break;

case 84:
    /*! Production::    include_macro_code : INCLUDE error */
    console.error("%include MUST be followed by a valid file path");
    break;

}
},
table: bt({
  len: u([
  12,
  1,
  14,
  3,
  14,
  21,
  2,
  2,
  5,
  s,
  [10, 4],
  2,
  3,
  1,
  18,
  2,
  10,
  10,
  29,
  32,
  29,
  22,
  22,
  17,
  17,
  s,
  [28, 7],
  30,
  5,
  s,
  [28, 3],
  s,
  [11, 4],
  2,
  3,
  26,
  26,
  1,
  4,
  3,
  1,
  19,
  32,
  29,
  11,
  11,
  s,
  [28, 5],
  1,
  1,
  29,
  29,
  1,
  6,
  3,
  3,
  11,
  11,
  10,
  5,
  3,
  10,
  1,
  3,
  6,
  17,
  23,
  3,
  c,
  [26, 4],
  1,
  s,
  [2, 4],
  1,
  s,
  [3, 3],
  17,
  15,
  6,
  2,
  1,
  2,
  4,
  6,
  3,
  23,
  18,
  5,
  19,
  18,
  19,
  14,
  c,
  [109, 3],
  1,
  17,
  14,
  2,
  19,
  2,
  18
]),
  symbol: u([
  1,
  3,
  s,
  [19, 6, 1],
  37,
  41,
  44,
  46,
  1,
  c,
  [13, 10],
  47,
  48,
  73,
  77,
  1,
  19,
  45,
  c,
  [17, 14],
  9,
  10,
  s,
  [14, 4, 1],
  s,
  [27, 4, 1],
  33,
  35,
  36,
  61,
  s,
  [63, 5, 1],
  70,
  72,
  25,
  49,
  25,
  50,
  3,
  4,
  26,
  57,
  58,
  c,
  [44, 10],
  c,
  [10, 30],
  2,
  42,
  20,
  74,
  75,
  c,
  [107, 3],
  5,
  c,
  [79, 6],
  19,
  c,
  [80, 7],
  51,
  1,
  19,
  c,
  [56, 22],
  9,
  10,
  11,
  c,
  [40, 5],
  c,
  [17, 5],
  c,
  [45, 7],
  37,
  41,
  c,
  [124, 5],
  c,
  [29, 24],
  s,
  [62, 6, 1],
  c,
  [32, 4],
  7,
  s,
  [9, 9, 1],
  c,
  [35, 11],
  s,
  [34, 4, 1],
  41,
  71,
  c,
  [59, 7],
  c,
  [53, 7],
  c,
  [51, 8],
  c,
  [22, 22],
  c,
  [249, 12],
  c,
  [17, 22],
  c,
  [107, 28],
  c,
  [28, 190],
  s,
  [31, 7, 1],
  41,
  29,
  32,
  66,
  68,
  69,
  c,
  [119, 86],
  s,
  [19, 7, 1],
  c,
  [11, 35],
  3,
  4,
  c,
  [620, 3],
  1,
  3,
  4,
  c,
  [573, 8],
  c,
  [504, 14],
  43,
  c,
  [26, 26],
  38,
  20,
  38,
  74,
  75,
  18,
  20,
  38,
  c,
  [633, 18],
  52,
  59,
  c,
  [583, 61],
  1,
  3,
  11,
  c,
  [684, 10],
  c,
  [11, 11],
  c,
  [471, 138],
  11,
  11,
  c,
  [193, 31],
  c,
  [29, 27],
  31,
  29,
  31,
  c,
  [503, 4],
  c,
  [6, 3],
  c,
  [3, 3],
  c,
  [414, 30],
  c,
  [413, 4],
  c,
  [1031, 3],
  c,
  [416, 5],
  c,
  [18, 8],
  38,
  20,
  39,
  40,
  1,
  41,
  43,
  76,
  78,
  79,
  c,
  [375, 17],
  c,
  [372, 3],
  c,
  [836, 11],
  54,
  c,
  [1103, 8],
  7,
  20,
  60,
  c,
  [327, 95],
  31,
  3,
  4,
  20,
  c,
  [526, 3],
  c,
  [523, 4],
  41,
  77,
  c,
  [157, 3],
  c,
  [3, 4],
  c,
  [157, 16],
  4,
  c,
  [157, 13],
  53,
  3,
  23,
  41,
  55,
  56,
  77,
  6,
  8,
  6,
  6,
  8,
  c,
  [223, 3],
  58,
  c,
  [210, 7],
  41,
  43,
  c,
  [39, 14],
  c,
  [196, 9],
  c,
  [646, 11],
  c,
  [237, 8],
  c,
  [1313, 6],
  c,
  [23, 9],
  23,
  c,
  [24, 7],
  c,
  [42, 18],
  c,
  [37, 19],
  c,
  [298, 14],
  20,
  c,
  [15, 14],
  c,
  [367, 4],
  c,
  [191, 31],
  3,
  4,
  c,
  [85, 19],
  6,
  8,
  c,
  [124, 18]
]),
  type: u([
  s,
  [2, 10],
  0,
  0,
  1,
  c,
  [13, 12],
  0,
  0,
  c,
  [6, 3],
  c,
  [17, 16],
  s,
  [2, 11],
  s,
  [0, 8],
  c,
  [37, 3],
  c,
  [25, 4],
  c,
  [30, 15],
  s,
  [2, 30],
  c,
  [45, 20],
  c,
  [64, 44],
  c,
  [127, 8],
  c,
  [29, 29],
  c,
  [32, 27],
  c,
  [112, 19],
  c,
  [51, 22],
  c,
  [22, 20],
  c,
  [17, 34],
  s,
  [2, 216],
  c,
  [231, 191],
  c,
  [190, 23],
  c,
  [583, 77],
  c,
  [278, 179],
  c,
  [29, 33],
  c,
  [503, 44],
  c,
  [43, 22],
  c,
  [66, 34],
  s,
  [0, 9],
  c,
  [338, 110],
  c,
  [108, 38],
  c,
  [1248, 6],
  c,
  [44, 9],
  c,
  [15, 15],
  c,
  [196, 20],
  c,
  [615, 45],
  s,
  [2, 137]
]),
  state: u([
  s,
  [1, 4, 1],
  11,
  10,
  15,
  17,
  c,
  [5, 3],
  18,
  19,
  20,
  22,
  27,
  28,
  33,
  32,
  39,
  41,
  43,
  44,
  47,
  48,
  51,
  53,
  c,
  [12, 4],
  54,
  55,
  c,
  [20, 6],
  59,
  61,
  c,
  [9, 7],
  62,
  c,
  [8, 7],
  63,
  c,
  [5, 4],
  64,
  c,
  [5, 4],
  68,
  65,
  66,
  75,
  48,
  78,
  79,
  81,
  c,
  [42, 8],
  59,
  59,
  68,
  85,
  66,
  86,
  44,
  90,
  92,
  91,
  94,
  96,
  c,
  [82, 7],
  97,
  101,
  103,
  104,
  106,
  107,
  112,
  113,
  92,
  91,
  115,
  c,
  [19, 8],
  116,
  44
]),
  mode: u([
  s,
  [2, 11],
  1,
  2,
  s,
  [1, 7],
  c,
  [10, 4],
  c,
  [12, 8],
  s,
  [1, 15],
  s,
  [2, 43],
  c,
  [47, 45],
  c,
  [117, 4],
  c,
  [48, 9],
  c,
  [108, 11],
  c,
  [24, 25],
  c,
  [28, 6],
  c,
  [69, 15],
  c,
  [50, 11],
  c,
  [178, 10],
  s,
  [1, 35],
  s,
  [2, 226],
  c,
  [228, 94],
  c,
  [93, 22],
  c,
  [22, 14],
  c,
  [130, 4],
  c,
  [133, 53],
  c,
  [656, 5],
  c,
  [80, 11],
  c,
  [69, 10],
  c,
  [541, 50],
  c,
  [425, 166],
  c,
  [192, 28],
  c,
  [761, 30],
  c,
  [117, 57],
  c,
  [413, 21],
  c,
  [807, 112],
  c,
  [98, 10],
  c,
  [556, 38],
  c,
  [150, 13],
  c,
  [281, 6],
  c,
  [175, 44],
  c,
  [208, 59],
  c,
  [59, 17],
  c,
  [109, 34],
  c,
  [110, 40]
]),
  goto: u([
  s,
  [5, 10],
  7,
  8,
  7,
  5,
  6,
  7,
  9,
  12,
  14,
  13,
  4,
  16,
  c,
  [12, 10],
  21,
  23,
  25,
  29,
  30,
  31,
  24,
  26,
  34,
  35,
  38,
  36,
  37,
  40,
  42,
  s,
  [34, 3],
  s,
  [12, 10],
  s,
  [13, 10],
  s,
  [14, 10],
  s,
  [15, 10],
  46,
  45,
  49,
  50,
  s,
  [21, 17],
  6,
  6,
  s,
  [8, 10],
  s,
  [41, 10],
  46,
  46,
  52,
  23,
  46,
  c,
  [104, 4],
  s,
  [46, 6],
  c,
  [110, 7],
  46,
  46,
  43,
  43,
  21,
  23,
  43,
  c,
  [24, 4],
  s,
  [43, 6],
  c,
  [24, 7],
  43,
  43,
  48,
  48,
  57,
  s,
  [48, 3],
  56,
  58,
  s,
  [48, 15],
  60,
  s,
  [48, 4],
  c,
  [50, 7],
  c,
  [44, 7],
  c,
  [14, 14],
  c,
  [204, 12],
  c,
  [12, 12],
  s,
  [56, 28],
  s,
  [58, 28],
  s,
  [59, 28],
  s,
  [60, 28],
  s,
  [61, 28],
  s,
  [62, 28],
  s,
  [63, 28],
  s,
  [64, 30],
  34,
  67,
  s,
  [72, 28],
  s,
  [73, 28],
  s,
  [70, 28],
  s,
  [9, 8],
  69,
  9,
  9,
  s,
  [16, 11],
  s,
  [10, 8],
  70,
  10,
  10,
  s,
  [18, 11],
  72,
  71,
  32,
  32,
  73,
  s,
  [83, 26],
  s,
  [84, 26],
  74,
  49,
  76,
  76,
  77,
  77,
  1,
  3,
  38,
  80,
  s,
  [38, 6],
  77,
  s,
  [38, 7],
  c,
  [541, 24],
  47,
  47,
  57,
  s,
  [47, 3],
  56,
  58,
  s,
  [47, 15],
  60,
  s,
  [47, 4],
  s,
  [45, 11],
  s,
  [42, 11],
  s,
  [51, 28],
  s,
  [52, 28],
  s,
  [53, 28],
  s,
  [57, 28],
  s,
  [71, 28],
  82,
  83,
  54,
  54,
  57,
  s,
  [54, 3],
  56,
  58,
  s,
  [54, 15],
  60,
  s,
  [54, 4],
  55,
  55,
  57,
  s,
  [55, 3],
  56,
  58,
  s,
  [55, 15],
  60,
  s,
  [55, 4],
  84,
  34,
  67,
  67,
  s,
  [68, 3],
  s,
  [69, 3],
  s,
  [17, 11],
  s,
  [19, 11],
  s,
  [11, 10],
  s,
  [34, 3],
  s,
  [35, 3],
  s,
  [74, 10],
  75,
  89,
  87,
  s,
  [88, 3],
  93,
  s,
  [20, 17],
  95,
  c,
  [1021, 13],
  98,
  99,
  s,
  [44, 11],
  s,
  [49, 28],
  s,
  [50, 28],
  s,
  [65, 28],
  66,
  72,
  100,
  78,
  78,
  79,
  79,
  80,
  80,
  2,
  81,
  13,
  87,
  87,
  102,
  s,
  [85, 3],
  s,
  [22, 17],
  s,
  [25, 14],
  105,
  108,
  13,
  109,
  110,
  111,
  39,
  39,
  s,
  [34, 3],
  c,
  [191, 3],
  s,
  [86, 3],
  114,
  c,
  [177, 13],
  s,
  [26, 18],
  s,
  [34, 3],
  s,
  [28, 11],
  117,
  s,
  [28, 7],
  s,
  [29, 18],
  s,
  [30, 19],
  s,
  [36, 14],
  118,
  s,
  [37, 14],
  33,
  33,
  73,
  82,
  s,
  [23, 17],
  s,
  [24, 14],
  72,
  119,
  s,
  [31, 19],
  40,
  40,
  s,
  [27, 18]
])
}),
defaultActions: bda({
  idx: u([
  0,
  s,
  [8, 5, 1],
  s,
  [16, 4, 1],
  s,
  [27, 8, 1],
  36,
  37,
  38,
  40,
  42,
  45,
  46,
  50,
  s,
  [54, 7, 1],
  s,
  [67, 9, 1],
  78,
  s,
  [81, 5, 1],
  s,
  [87, 4, 1],
  93,
  94,
  95,
  99,
  100,
  102,
  104,
  105,
  107,
  108,
  109,
  111,
  113,
  114,
  115,
  117,
  118,
  119
]),
  goto: u([
  5,
  34,
  s,
  [12, 4, 1],
  21,
  6,
  8,
  41,
  56,
  s,
  [58, 7, 1],
  72,
  73,
  70,
  16,
  18,
  83,
  84,
  1,
  45,
  42,
  51,
  52,
  53,
  57,
  71,
  68,
  69,
  17,
  19,
  11,
  34,
  35,
  74,
  75,
  20,
  44,
  49,
  50,
  65,
  66,
  78,
  79,
  80,
  2,
  85,
  22,
  25,
  39,
  34,
  86,
  26,
  34,
  29,
  30,
  36,
  37,
  82,
  23,
  24,
  31,
  40,
  27
])
}),
parseError: function parseError(str, hash, ExceptionClass) {
    if (hash.recoverable) {
        this.trace(str);
        hash.destroy();             // destroy... well, *almost*!
    } else {
        throw new ExceptionClass(str, hash);
    }
},
parse: function parse(input) {
    var self = this,
        stack = new Array(128),         // token stack: stores token which leads to state at the same index (column storage)
        sstack = new Array(128),        // state stack: stores states (column storage)

        vstack = new Array(128),        // semantic value stack

        table = this.table,
        sp = 0;                         // 'stack pointer': index into the stacks

    var recovering = 0;                 // (only used when the grammar contains error recovery rules)
    var TERROR = this.TERROR,
        EOF = this.EOF,
        ERROR_RECOVERY_TOKEN_DISCARD_COUNT = (this.options.errorRecoveryTokenDiscardCount | 0) || 3;
    var NO_ACTION = [0, table.length /* ensures that anyone using this new state will fail dramatically! */];

    //this.reductionCount = this.shiftCount = 0;

    var lexer;
    if (this.__lexer__) {
        lexer = this.__lexer__;
    } else {
        lexer = this.__lexer__ = Object.create(this.lexer);
    }

    var sharedState_yy = {
        parseError: null,
        quoteName: null,
        lexer: null,
        parser: null,
        pre_parse: null,
        post_parse: null
    };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState_yy[k] = this.yy[k];
      }
    }

    sharedState_yy.lexer = lexer;
    sharedState_yy.parser = this;






    lexer.setInput(input, sharedState_yy);



    vstack[sp] = null;
    sstack[sp] = 0;
    stack[sp] = 0;
    ++sp;


    // Does the shared state override the default `parseError` that already comes with this instance?
    if (typeof sharedState_yy.parseError === 'function') {
        this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {
            return sharedState_yy.parseError(str, hash, ExceptionClass);
        };
    } else {
        this.parseError = this.originalParseError;
    }

    // Does the shared state override the default `quoteName` that already comes with this instance?
    if (typeof sharedState_yy.quoteName === 'function') {
        this.quoteName = sharedState_yy.quoteName;
    } else {
        this.quoteName = this.originalQuoteName;
    }

    // set up the cleanup function; make it an API so that external code can re-use this one in case of
    // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
    // case this parse() API method doesn't come with a `finally { ... }` block any more!
    //
    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `sharedState`, etc. references will be *wrong*!
    this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {
        var rv;

        if (invoke_post_methods) {
            if (sharedState_yy.post_parse) {
                rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue);
                if (typeof rv !== 'undefined') resultValue = rv;
            }
            if (this.post_parse) {
                rv = this.post_parse.call(this, sharedState_yy, resultValue);
                if (typeof rv !== 'undefined') resultValue = rv;
            }
        }

        if (this.__reentrant_call_depth > 1) return resultValue;        // do not (yet) kill the sharedState when this is a reentrant run.

        // clean up the lingering lexer structures as well:
        if (lexer.cleanupAfterLex) {
            lexer.cleanupAfterLex(do_not_nuke_errorinfos);
        }

        // prevent lingering circular references from causing memory leaks:
        if (sharedState_yy) {
            sharedState_yy.parseError = undefined;
            sharedState_yy.quoteName = undefined;
            sharedState_yy.lexer = undefined;
            sharedState_yy.parser = undefined;
            if (lexer.yy === sharedState_yy) {
                lexer.yy = undefined;
            }
        }
        sharedState_yy = undefined;
        this.parseError = this.originalParseError;
        this.quoteName = this.originalQuoteName;

        // nuke the vstack[] array at least as that one will still reference obsoleted user values.
        // To be safe, we nuke the other internal stack columns as well...
        stack.length = 0;               // fastest way to nuke an array without overly bothering the GC
        sstack.length = 0;

        vstack.length = 0;
        sp = 0;

        // nuke the error hash info instances created during this run.
        // Userland code must COPY any data/references
        // in the error hash instance(s) it is more permanently interested in.
        if (!do_not_nuke_errorinfos) {
            for (var i = this.__error_infos.length - 1; i >= 0; i--) {
                var el = this.__error_infos[i];
                if (el && typeof el.destroy === 'function') {
                    el.destroy();
                }
            }
            this.__error_infos.length = 0;
        }

        return resultValue;
    };

    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
    this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {
        var pei = {
            errStr: msg,
            exception: ex,
            text: lexer.match,
            value: lexer.yytext,
            token: this.describeSymbol(symbol) || symbol,
            token_id: symbol,
            line: lexer.yylineno,

            expected: expected,
            recoverable: recoverable,
            state: state,
            action: action,
            new_state: newState,
            symbol_stack: stack,
            state_stack: sstack,
            value_stack: vstack,

            stack_pointer: sp,
            yy: sharedState_yy,
            lexer: lexer,
            parser: this,

            // and make sure the error info doesn't stay due to potential
            // ref cycle via userland code manipulations.
            // These would otherwise all be memory leak opportunities!
            //
            // Note that only array and object references are nuked as those
            // constitute the set of elements which can produce a cyclic ref.
            // The rest of the members is kept intact as they are harmless.
            destroy: function destructParseErrorInfo() {
                // remove cyclic references added to error info:
                // info.yy = null;
                // info.lexer = null;
                // info.value = null;
                // info.value_stack = null;
                // ...
                var rec = !!this.recoverable;
                for (var key in this) {
                    if (this.hasOwnProperty(key) && typeof key === 'object') {
                        this[key] = undefined;
                    }
                }
                this.recoverable = rec;
            }
        };
        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
        this.__error_infos.push(pei);
        return pei;
    };


    function lex() {
        var token = lexer.lex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token || EOF;
    }


    var symbol = 0;
    var preErrorSymbol = 0;
    var lastEofErrorStateDepth = 0;
    var state, action, r, t;
    var yyval = {
        $: true,
        _$: undefined,
        yy: sharedState_yy
    };
    var p, len, this_production;

    var newState;
    var retval = false;


    // Return the rule stack depth where the nearest error rule can be found.
    // Return -1 when no error recovery rule was found.
    function locateNearestErrorRecoveryRule(state) {
        var stack_probe = sp - 1;
        var depth = 0;

        // try to recover from error
        for (;;) {
            // check for error recovery rule in this state

            var t = table[state][TERROR] || NO_ACTION;
            if (t[0]) {
                // We need to make sure we're not cycling forever:
                // once we hit EOF, even when we `yyerrok()` an error, we must
                // prevent the core from running forever,
                // e.g. when parent rules are still expecting certain input to
                // follow after this, for example when you handle an error inside a set
                // of braces which are matched by a parent rule in your grammar.
                //
                // Hence we require that every error handling/recovery attempt
                // *after we've hit EOF* has a diminishing state stack: this means
                // we will ultimately have unwound the state stack entirely and thus
                // terminate the parse in a controlled fashion even when we have
                // very complex error/recovery code interplay in the core + user
                // action code blocks:

                if (symbol === EOF) {
                    if (!lastEofErrorStateDepth) {
                        lastEofErrorStateDepth = sp - 1 - depth;
                    } else if (lastEofErrorStateDepth <= sp - 1 - depth) {

                        --stack_probe; // popStack(1): [symbol, action]
                        state = sstack[stack_probe];
                        ++depth;
                        continue;
                    }
                }
                return depth;
            }
            if (state === 0 /* $accept rule */ || stack_probe < 1) {

                return -1; // No suitable error recovery rule available.
            }
            --stack_probe; // popStack(1): [symbol, action]
            state = sstack[stack_probe];
            ++depth;
        }
    }


    try {
        this.__reentrant_call_depth++;

        if (this.pre_parse) {
            this.pre_parse.call(this, sharedState_yy);
        }
        if (sharedState_yy.pre_parse) {
            sharedState_yy.pre_parse.call(this, sharedState_yy);
        }

        newState = sstack[sp - 1];
        for (;;) {
            // retrieve state number from top of stack
            state = newState;               // sstack[sp - 1];

            // use default actions if available
            if (this.defaultActions[state]) {
                action = 2;
                newState = this.defaultActions[state];
            } else {
                // The single `==` condition below covers both these `===` comparisons in a single
                // operation:
                //
                //     if (symbol === null || typeof symbol === 'undefined') ...
                if (!symbol) {
                    symbol = lex();
                }
                // read action for current state and first input
                t = (table[state] && table[state][symbol]) || NO_ACTION;
                newState = t[1];
                action = t[0];




                // handle parse error
                if (!action) {
                    // first see if there's any chance at hitting an error recovery rule:
                    var error_rule_depth = locateNearestErrorRecoveryRule(state);
                    var errStr = null;
                    var errSymbolDescr = (this.describeSymbol(symbol) || symbol);
                    var expected = this.collect_expected_token_set(state);

                    if (!recovering) {
                        // Report error
                        if (typeof lexer.yylineno === 'number') {
                            errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                        } else {
                            errStr = 'Parse error: ';
                        }
                        if (lexer.showPosition) {
                            errStr += '\n' + lexer.showPosition(79 - 10, 10) + '\n';
                        }
                        if (expected.length) {
                            errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;
                        } else {
                            errStr += 'Unexpected ' + errSymbolDescr;
                        }
                        p = this.constructParseErrorInfo(errStr, null, expected, (error_rule_depth >= 0));
                        r = this.parseError(p.errStr, p, this.JisonParserError);


                        if (!p.recoverable) {
                            retval = r;
                            break;
                        } else {
                            // TODO: allow parseError callback to edit symbol and or state at the start of the error recovery process...
                        }
                    }



                    // just recovered from another error
                    if (recovering === ERROR_RECOVERY_TOKEN_DISCARD_COUNT && error_rule_depth >= 0) {
                        // only barf a fatal hairball when we're out of look-ahead symbols and none hit a match;
                        // this DOES discard look-ahead while recovering from an error when said look-ahead doesn't
                        // suit the error recovery rules... The error HAS been reported already so we're fine with
                        // throwing away a few items if that is what it takes to match the nearest recovery rule!
                        if (symbol === EOF || preErrorSymbol === EOF) {
                            p = this.constructParseErrorInfo((errStr || 'Parsing halted while starting to recover from another error.'), null, expected, false);
                            retval = this.parseError(p.errStr, p, this.JisonParserError);
                            break;
                        }

                        // discard current lookahead and grab another





                        symbol = lex();


                    }

                    // try to recover from error
                    if (error_rule_depth < 0) {
                        p = this.constructParseErrorInfo((errStr || 'Parsing halted. No suitable error recovery rule available.'), null, expected, false);
                        retval = this.parseError(p.errStr, p, this.JisonParserError);
                        break;
                    }
                    sp -= error_rule_depth;

                    preErrorSymbol = (symbol === TERROR ? 0 : symbol); // save the lookahead token
                    symbol = TERROR;            // insert generic error symbol as new lookahead
                    // allow N (default: 3) real symbols to be shifted before reporting a new error
                    recovering = ERROR_RECOVERY_TOKEN_DISCARD_COUNT;

                    newState = sstack[sp - 1];



                    continue;
                }


            }









            switch (action) {
            // catch misc. parse failures:
            default:
                // this shouldn't happen, unless resolve defaults are off
                if (action instanceof Array) {
                    p = this.constructParseErrorInfo(('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol), null, null, false);
                    retval = this.parseError(p.errStr, p, this.JisonParserError);
                    break;
                }
                // Another case of better safe than sorry: in case state transitions come out of another error recovery process
                // or a buggy LUT (LookUp Table):
                p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);
                retval = this.parseError(p.errStr, p, this.JisonParserError);
                break;

            // shift:
            case 1:
                //this.shiftCount++;
                stack[sp] = symbol;
                vstack[sp] = lexer.yytext;

                sstack[sp] = newState; // push state
                ++sp;
                symbol = 0;
                if (!preErrorSymbol) { // normal execution / no error
                    // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:





                    if (recovering > 0) {
                        recovering--;

                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error, *unless* that drops us straight back into error mode:
                    symbol = preErrorSymbol;
                    preErrorSymbol = 0;

                    // read action for current state and first input
                    t = (table[newState] && table[newState][symbol]) || NO_ACTION;
                    if (!t[0] || symbol === TERROR) {
                        // forget about that symbol and move forward: this wasn't a 'forgot to insert' error type where
                        // (simple) stuff might have been missing before the token which caused the error we're
                        // recovering from now...
                        //
                        // Also check if the LookAhead symbol isn't the ERROR token we set as part of the error
                        // recovery, for then this we would we idling (cycling) on the error forever.
                        // Yes, this does not take into account the possibility that the *lexer* may have
                        // produced a *new* TERROR token all by itself, but that would be a very peculiar grammar!

                        symbol = 0;
                    }
                }

                continue;

            // reduce:
            case 2:
                //this.reductionCount++;
                this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
                len = this_production[1];






                // Make sure subsequent `$$ = $1` default action doesn't fail
                // for rules where len==0 as then there's no $1 (you're reducing an epsilon rule then!)
                //
                // Also do this to prevent nasty action block codes to *read* `$0` or `$$`
                // and *not* get `undefined` as a result for their efforts!
                vstack[sp] = undefined;

                // perform semantic action
                yyval.$ = vstack[sp - len]; // default to $$ = $1; result must produce `undefined` when len == 0, as then there's no $1










                r = this.performAction.call(yyval, newState, sp - 1, vstack);

                if (typeof r !== 'undefined') {
                    retval = r;
                    break;
                }

                // pop off stack
                sp -= len;

                // don't overwrite the `symbol` variable: use a local var to speed things up:
                var ntsymbol = this_production[0];    // push nonterminal (reduce)
                stack[sp] = ntsymbol;
                vstack[sp] = yyval.$;

                // goto new state = table[STATE][NONTERMINAL]
                newState = table[sstack[sp - 1]][ntsymbol];
                sstack[sp] = newState;
                ++sp;

                continue;

            // accept:
            case 3:
                retval = true;
                // Return the `$accept` rule's `$$` result, if available.
                //
                // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                // default, action):
                //
                //     $accept: <startSymbol> $end
                //                  %{ $$ = $1; @$ = @1; %}
                //
                // which, combined with the parse kernel's `$accept` state behaviour coded below,
                // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                //
                // In code:
                //
                //                  %{
                //                      @$ = @1;            // if location tracking support is included
                //                      if (typeof $1 !== 'undefined')
                //                          return $1;
                //                      else
                //                          return true;           // the default parse result if the rule actions don't produce anything
                //                  %}
                if (typeof yyval.$ !== 'undefined') {
                    retval = yyval.$;
                }
                break;
            }

            // break out of loop: we accept or fail with error
            break;
        }
    } catch (ex) {
        // report exceptions through the parseError callback too:
        p = this.constructParseErrorInfo('Parsing aborted due to exception.', ex, null, false);
        retval = this.parseError(p.errStr, p, this.JisonParserError);
    } finally {
        retval = this.cleanupAfterParse(retval, true, true);
        this.__reentrant_call_depth--;
    }

    return retval;
}
};
parser.originalParseError = parser.parseError;
parser.originalQuoteName = parser.quoteName;

var XRegExp = require('xregexp');       // for helping out the `%options xregexp` in the lexer

function encodeRE (s) {
    return s.replace(/([.*+?^${}()|\[\]\/\\])/g, '\\$1').replace(/\\\\u([a-fA-F0-9]{4})/g, '\\u$1');
}

function prepareString (s) {
    // unescape slashes
    s = s.replace(/\\\\/g, "\\");
    s = encodeRE(s);
    return s;
}

// convert string value to number or boolean value, when possible
// (and when this is more or less obviously the intent)
// otherwise produce the string itself as value.
function parseValue(v) {
    if (v === 'false') {
        return false;
    }
    if (v === 'true') {
        return true;
    }
    // http://stackoverflow.com/questions/175739/is-there-a-built-in-way-in-javascript-to-check-if-a-string-is-a-valid-number
    // Note that the `v` check ensures that we do not convert `undefined`, `null` and `''` (empty string!)
    if (v && !isNaN(v)) {
        var rv = +v;
        if (isFinite(rv)) {
            return rv;
        }
    }
    return v;
}
/* lexer generated by jison-lex 0.3.4-166 */
/*
 * Returns a Lexer object of the following structure:
 *
 *  Lexer: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Lexer.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    ERROR: 2,
 *
 *    JisonLexerError: function(msg, hash),
 *
 *    performAction: function lexer__performAction(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *               where `...` denotes the (optional) additional arguments the user passed to
 *               `lexer.lex(...)` and specified by way of `%parse-param ...` in the **parser** grammar file
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `lexer` instance.
 *
 *               - `yy`      : a reference to the `yy` "shared state" object which was passed to the lexer
 *                             by way of the `lexer.setInput(str, yy)` API before.
 *
 *               - `yy_`     : lexer instance reference used internally.
 *
 *               - `$avoiding_name_collisions`   : index of the matched lexer rule (regex), used internally.
 *
 *               - `YY_START`: the current lexer "start condition" state.
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             **parser** grammar definition file and which are passed to the lexer via
 *                             its `lexer.lex(...)` API.
 *
 *    parseError: function(str, hash, ExceptionClass),
 *
 *    constructLexErrorInfo: function(error_message, is_recoverable),
 *               Helper function.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this lexer kernel in many places; example usage:
 *
 *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);
 *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);
 *
 *    options: { ... lexer %options ... },
 *
 *    lex: function([args...]),
 *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **parser** grammar:
 *               these extra `args...` are passed verbatim to the lexer rules' action code.
 *
 *    cleanupAfterLex: function(do_not_nuke_errorinfos),
 *               Helper function.
 *               This helper API is invoked when the parse process has completed. This helper may
 *               be invoked by user code to ensure the internal lexer gets properly garbage collected.
 *
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *  }
 *
 *
 *  token location info (`yylloc`): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *  }
 *
 * while `this` will reference the current lexer instance.
 *
 * When `parseError` is invoked by the lexer, the default implementation will
 * attempt to invoke `yy.parser.parseError()`; when this callback is not provided
 * it will try to invoke `yy.parseError()` instead. When that callback is also not
 * provided, a `JisonLexerError` exception will be thrown containing the error
 * message and `hash`, as constructed by the `constructLexErrorInfo()` API.
 *
 * Note that the lexer's `JisonLexerError` error class is passed via the
 * `ExceptionClass` argument, which is invoked to construct the exception
 * instance to be thrown, so technically `parseError` will throw the object
 * produced by the `new ExceptionClass(str, hash)` JavaScript expression.
 *
 * ---
 *
 * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.
 * These options are available:
 *
 * (Options are permanent.)
 *  
 *  yy: {
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *  }
 *
 *  lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 * WARNING: the next set of options are not meant to be changed. They echo the abilities of
 * the lexer as per when it was compiled!
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */


var lexer = (function () {
// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function JisonLexerError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonLexerError'
    });

    if (msg == null) msg = '???';

    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });

    this.hash = hash;

    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) { // V8
            Error.captureStackTrace(this, this.constructor);
        } else {
            stacktrace = (new Error(msg)).stack;
        }
    }
    if (stacktrace) {
        Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
}

if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);
} else {
    JisonLexerError.prototype = Object.create(Error.prototype);
}
JisonLexerError.prototype.constructor = JisonLexerError;
JisonLexerError.prototype.name = 'JisonLexerError';




var lexer = {
    // Code Generator Information Report
    // ---------------------------------
    //
    // Options:
    //   backtracking:        false
    //   location.ranges:     true
    //
    // Forwarded Parser Analysis flags:
    //   uses yyleng:         false
    //   uses yylineno:       false
    //   uses yytext:         false
    //   uses yylloc:         false
    //   uses lexer values:   true / true
    //   location tracking:   false
    //   location assignment: false
    //
    // --------- END OF REPORT -----------

    EOF: 1,
    ERROR: 2,

    // JisonLexerError: JisonLexerError,        // <-- injected by the code generator

    // options: {},                             // <-- injected by the code generator

    // yy: ...,                                 // <-- injected by setInput()

    __currentRuleSet__: null,                   // <-- internal rule set cache for the current lexer state

    __error_infos: [],                          // INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup

    __decompressed: false,                      // INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use

    done: false,                                // INTERNAL USE ONLY
    _backtrack: false,                          // INTERNAL USE ONLY
    _input: '',                                 // INTERNAL USE ONLY
    _more: false,                               // INTERNAL USE ONLY
    _signaled_error_token: false,               // INTERNAL USE ONLY

    conditionStack: [],                         // INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`

    match: '',                                  // READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!
    matched: '',                                // READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far
    matches: false,                             // READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt
    yytext: '',                                 // ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.
    offset: 0,                                  // READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far
    yyleng: 0,                                  // READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)
    yylineno: 0,                                // READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located
    yylloc: null,                               // READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction

    // INTERNAL USE: construct a suitable error info hash object instance for `parseError`.
    constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable) {
        var pei = {
            errStr: msg,
            recoverable: !!recoverable,
            text: this.match,           // This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...
            token: null,
            line: this.yylineno,
            loc: this.yylloc,
            yy: this.yy,
            lexer: this,

            // and make sure the error info doesn't stay due to potential
            // ref cycle via userland code manipulations.
            // These would otherwise all be memory leak opportunities!
            //
            // Note that only array and object references are nuked as those
            // constitute the set of elements which can produce a cyclic ref.
            // The rest of the members is kept intact as they are harmless.
            destroy: function destructLexErrorInfo() {
                // remove cyclic references added to error info:
                // info.yy = null;
                // info.lexer = null;
                // ...
                var rec = !!this.recoverable;
                for (var key in this) {
                    if (this.hasOwnProperty(key) && typeof key === 'object') {
                        this[key] = undefined;
                    }
                }
                this.recoverable = rec;
            }
        };
        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
        this.__error_infos.push(pei);
        return pei;
    },

    parseError: function lexer_parseError(str, hash, ExceptionClass) {
        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {
            return this.yy.parser.parseError(str, hash, ExceptionClass) || this.ERROR;
        } else if (typeof this.yy.parseError === 'function') {
            return this.yy.parseError(str, hash, ExceptionClass) || this.ERROR;
        } else {
            throw new ExceptionClass(str, hash);
        }
    },

    // final cleanup function for when we have completed lexing the input;
    // make it an API so that external code can use this one once userland
    // code has decided it's time to destroy any lingering lexer error
    // hash object instances and the like: this function helps to clean
    // up these constructs, which *may* carry cyclic references which would
    // otherwise prevent the instances from being properly and timely
    // garbage-collected, i.e. this function helps prevent memory leaks!
    cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {
        var rv;

        // prevent lingering circular references from causing memory leaks:
        this.setInput('', {});

        // nuke the error hash info instances created during this run.
        // Userland code must COPY any data/references
        // in the error hash instance(s) it is more permanently interested in.
        if (!do_not_nuke_errorinfos) {
            for (var i = this.__error_infos.length - 1; i >= 0; i--) {
                var el = this.__error_infos[i];
                if (el && typeof el.destroy === 'function') {
                    el.destroy();
                }
            }
            this.__error_infos.length = 0;
        }

        return this;
    },

    // clear the lexer token context; intended for internal use only
    clear: function lexer_clear() {
        this.yytext = '';
        this.yyleng = 0;
        this.match = '';
        this.matches = false;
        this._more = false;
        this._backtrack = false;
    },

    // resets the lexer, sets new input
    setInput: function lexer_setInput(input, yy) {
        this.yy = yy || this.yy || {};

        // also check if we've fully initialized the lexer instance,
        // including expansion work to be done to go from a loaded
        // lexer to a usable lexer:
        if (!this.__decompressed) {
          // step 1: decompress the regex list:
          var rules = this.rules;
          for (var i = 0, len = rules.length; i < len; i++) {
            var rule_re = rules[i];

            // compression: is the RE an xref to another RE slot in the rules[] table?
            if (typeof rule_re === 'number') {
              rules[i] = rules[rule_re];
            }
          }

          // step 2: unfold the conditions[] set to make these ready for use:
          var conditions = this.conditions;
          for (var k in conditions) {
            var spec = conditions[k];

            var rule_ids = spec.rules;

            var len = rule_ids.length;
            var rule_regexes = new Array(len + 1);            // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple!
            var rule_new_ids = new Array(len + 1);

            for (var i = 0; i < len; i++) {
              var idx = rule_ids[i];
              var rule_re = rules[idx];
              rule_regexes[i + 1] = rule_re;
              rule_new_ids[i + 1] = idx;
            }

            spec.rules = rule_new_ids;
            spec.__rule_regexes = rule_regexes;
            spec.__rule_count = len;
          }

          this.__decompressed = true;
        }

        this._input = input || '';
        this.clear();
        this._signaled_error_token = false;
        this.done = false;
        this.yylineno = 0;
        this.matched = '';
        this.conditionStack = ['INITIAL'];
        this.__currentRuleSet__ = null;
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
    },

    // consumes and returns one char from the input
    input: function lexer_input() {
        if (!this._input) {
            //this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)
            return null;
        }
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        // Count the linenumber up when we hit the LF (or a stand-alone CR).
        // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
        // and we advance immediately past the LF as well, returning both together as if
        // it was all a single 'character' only.
        var slice_len = 1;
        var lines = false;
        if (ch === '\n') {
            lines = true;
        } else if (ch === '\r') {
            lines = true;
            var ch2 = this._input[1];
            if (ch2 === '\n') {
                slice_len++;
                ch += ch2;
                this.yytext += ch2;
                this.yyleng++;
                this.offset++;
                this.match += ch2;
                this.matched += ch2;
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }
            }
        }
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(slice_len);
        return ch;
    },

    // unshifts one char (or a string) into the input
    unput: function lexer_unput(ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - len);
        this.matched = this.matched.substr(0, this.matched.length - len);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }

        this.yylloc.last_line = this.yylineno + 1;
        this.yylloc.last_column = (lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                + oldLines[oldLines.length - lines.length].length - lines[0].length :
                this.yylloc.first_column - len);

        if (this.options.ranges) {
            this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng - len;
        }
        this.yyleng = this.yytext.length;
        this.done = false;
        return this;
    },

    // When called from action, caches matched text and appends it on next action
    more: function lexer_more() {
        this._more = true;
        return this;
    },

    // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
    reject: function lexer_reject() {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            // when the `parseError()` call returns, we MUST ensure that the error is registered.
            // We accomplish this by signaling an 'error' token to be produced for the current
            // `.lex()` run.
            var p = this.constructLexErrorInfo('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), false);
            this._signaled_error_token = (this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR);
        }
        return this;
    },

    // retain first n characters of the match
    less: function lexer_less(n) {
        return this.unput(this.match.slice(n));
    },

    // return (part of the) already matched input, i.e. for error messages.
    // Limit the returned string length to `maxSize` (default: 20).
    // Limit the returned string to the `maxLines` number of lines of input (default: 1).
    // Negative limit values equal *unlimited*.
    pastInput: function lexer_pastInput(maxSize, maxLines) {
        var past = this.matched.substring(0, this.matched.length - this.match.length);
        if (maxSize < 0)
            maxSize = past.length;
        else if (!maxSize)
            maxSize = 20;
        if (maxLines < 0)
            maxLines = past.length;         // can't ever have more input lines than this!
        else if (!maxLines)
            maxLines = 1;
        // `substr` anticipation: treat \r\n as a single character and take a little
        // more than necessary so that we can still properly check against maxSize
        // after we've transformed and limited the newLines in here:
        past = past.substr(-maxSize * 2 - 2);
        // now that we have a significantly reduced string to process, transform the newlines
        // and chop them, then limit them:
        var a = past.replace(/\r\n|\r/g, '\n').split('\n');
        a = a.slice(-maxLines);
        past = a.join('\n');
        // When, after limiting to maxLines, we still have too much to return,
        // do add an ellipsis prefix...
        if (past.length > maxSize) {
            past = '...' + past.substr(-maxSize);
        }
        return past;
    },

    // return (part of the) upcoming input, i.e. for error messages.
    // Limit the returned string length to `maxSize` (default: 20).
    // Limit the returned string to the `maxLines` number of lines of input (default: 1).
    // Negative limit values equal *unlimited*.
    upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {
        var next = this.match;
        if (maxSize < 0)
            maxSize = next.length + this._input.length;
        else if (!maxSize)
            maxSize = 20;
        if (maxLines < 0)
            maxLines = maxSize;         // can't ever have more input lines than this!
        else if (!maxLines)
            maxLines = 1;
        // `substring` anticipation: treat \r\n as a single character and take a little
        // more than necessary so that we can still properly check against maxSize
        // after we've transformed and limited the newLines in here:
        if (next.length < maxSize * 2 + 2) {
            next += this._input.substring(0, maxSize * 2 + 2);  // substring is faster on Chrome/V8
        }
        // now that we have a significantly reduced string to process, transform the newlines
        // and chop them, then limit them:
        var a = next.replace(/\r\n|\r/g, '\n').split('\n');
        a = a.slice(0, maxLines);
        next = a.join('\n');
        // When, after limiting to maxLines, we still have too much to return,
        // do add an ellipsis postfix...
        if (next.length > maxSize) {
            next = next.substring(0, maxSize) + '...';
        }
        return next;
    },

    // return a string which displays the character position where the lexing error occurred, i.e. for error messages
    showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {
        var pre = this.pastInput(maxPrefix).replace(/\s/g, ' ');
        var c = new Array(pre.length + 1).join('-');
        return pre + this.upcomingInput(maxPostfix).replace(/\s/g, ' ') + '\n' + c + '^';
    },

    // helper function, used to produce a human readable description as a string, given
    // the input `yylloc` location object.
    // Set `display_range_too` to TRUE to include the string character index position(s)
    // in the description if the `yylloc.range` is available.
    describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {
        var l1 = yylloc.first_line;
        var l2 = yylloc.last_line;
        var o1 = yylloc.first_column;
        var o2 = yylloc.last_column - 1;
        var dl = l2 - l1;
        var d_o = (dl === 0 ? o2 - o1 : 1000);
        var rv;
        if (dl === 0) {
            rv = 'line ' + l1 + ', ';
            if (d_o === 0) {
                rv += 'column ' + o1;
            } else {
                rv += 'columns ' + o1 + ' .. ' + o2;
            }
        } else {
            rv = 'lines ' + l1 + '(column ' + o1 + ') .. ' + l2 + '(column ' + o2 + ')';
        }
        if (yylloc.range && display_range_too) {
            var r1 = yylloc.range[0];
            var r2 = yylloc.range[1] - 1;
            if (r2 === r1) {
                rv += ' {String Offset: ' + r1 + '}';
            } else {
                rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';
            }
        }
        return rv;
        // return JSON.stringify(yylloc);
    },

    // test the lexed token: return FALSE when not a match, otherwise return token.
    //
    // `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`
    // contains the actually matched text string.
    //
    // Also move the input cursor forward and update the match collectors:
    // - yytext
    // - yyleng
    // - match
    // - matches
    // - yylloc
    // - offset
    test_match: function lexer_test_match(match, indexed_rule) {
        var token,
            lines,
            backup,
            match_str,
            match_str_len;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        match_str = match[0];
        match_str_len = match_str.length;
        // if (match_str.indexOf('\n') !== -1 || match_str.indexOf('\r') !== -1) {
            lines = match_str.match(/(?:\r\n?|\n).*/g);
            if (lines) {
                this.yylineno += lines.length;
            }
        // }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/^\r?\n?/)[0].length :
                         this.yylloc.last_column + match_str_len
        };
        this.yytext += match_str;
        this.match += match_str;
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset + this.yyleng];
        }
        // previous lex rules MAY have invoked the `more()` API rather than producing a token:
        // those rules will already have moved this `offset` forward matching their match lengths,
        // hence we must only add our own match length now:
        this.offset += match_str_len;
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match_str_len);
        this.matched += match_str;

        // calling this method:
        //
        //   function lexer__performAction(yy, yy_, $avoiding_name_collisions, YY_START) {...}
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1] /* = YY_START */);
        // otherwise, when the action codes are all simple return token statements:
        //token = this.simpleCaseActionClusters[indexed_rule];

        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            this.__currentRuleSet__ = null;
            return false; // rule action called reject() implying the next rule should be tested instead.
        } else if (this._signaled_error_token) {
            // produce one 'error' token as `.parseError()` in `reject()` did not guarantee a failure signal by throwing an exception!
            token = this._signaled_error_token;
            this._signaled_error_token = false;
            return token;
        }
        return false;
    },

    // return next match in input
    next: function lexer_next() {
        if (this.done) {
            this.clear();
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.clear();
        }
        var spec = this.__currentRuleSet__;
        if (!spec) {
            // Update the ruleset cache as we apparently encountered a state change or just started lexing.
            // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will
            // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps
            // speed up those activities a tiny bit.
            spec = this.__currentRuleSet__ = this._currentRules();
            // Check whether a *sane* condition has been pushed before: this makes the lexer robust against
            // user-programmer bugs such as https://github.com/zaach/jison-lex/issues/19
            if (!spec || !spec.rules) {
                var p = this.constructLexErrorInfo('Internal lexer engine error on line ' + (this.yylineno + 1) + '. The lex grammar programmer pushed a non-existing condition name "' + this.topState() + '"; this is a fatal error and should be reported to the application programmer team!\n', false);
                // produce one 'error' token until this situation has been resolved, most probably by parse termination!
                return (this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR);
            }
        }

        var rule_ids = spec.rules;
//        var dispatch = spec.__dispatch_lut;
        var regexes = spec.__rule_regexes;
        var len = spec.__rule_count;

//        var c0 = this._input[0];

        // Note: the arrays are 1-based, while `len` itself is a valid index,
        // hence the non-standard less-or-equal check in the next loop condition!
        //
        // `dispatch` is a lookup table which lists the *first* rule which matches the 1-char *prefix* of the rule-to-match.
        // By using that array as a jumpstart, we can cut down on the otherwise O(n*m) behaviour of this lexer, down to
        // O(n) ideally, where:
        //
        // - N is the number of input particles -- which is not precisely characters
        //   as we progress on a per-regex-match basis rather than on a per-character basis
        //
        // - M is the number of rules (regexes) to test in the active condition state.
        //
        for (var i = 1 /* (dispatch[c0] || 1) */ ; i <= len; i++) {
            tempMatch = this._input.match(regexes[i]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rule_ids[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = undefined;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rule_ids[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === '') {
            this.done = true;
            return this.EOF;
        } else {
            var p = this.constructLexErrorInfo('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), this.options.lexer_errors_are_recoverable);
            token = (this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR);
            if (token === this.ERROR) {
                // we can try to recover from a lexer error that `parseError()` did not 'recover' for us
                // by moving forward at least one character at a time:
                if (!this.match.length) {
                    this.input();
                }
            }
            return token;
        }
    },

    // return next match that has a token
    lex: function lexer_lex() {
        var r;
        // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
        if (typeof this.options.pre_lex === 'function') {
            r = this.options.pre_lex.call(this);
        }
        while (!r) {
            r = this.next();
        }
        if (typeof this.options.post_lex === 'function') {
            // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.options.post_lex.call(this, r) || r;
        }
        return r;
    },

    // backwards compatible alias for `pushState()`;
    // the latter is symmetrical with `popState()` and we advise to use
    // those APIs in any modern lexer code, rather than `begin()`.
    begin: function lexer_begin(condition) {
        return this.pushState(condition);
    },

    // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
    pushState: function lexer_pushState(condition) {
        this.conditionStack.push(condition);
        this.__currentRuleSet__ = null;
        return this;
    },

    // pop the previously active lexer condition state off the condition stack
    popState: function lexer_popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            this.__currentRuleSet__ = null;
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

    // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
    topState: function lexer_topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return 'INITIAL';
        }
    },

    // (internal) determine the lexer rule set which is active for the currently active lexer condition state
    _currentRules: function lexer__currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]];
        } else {
            return this.conditions['INITIAL'];
        }
    },

    // return the number of states currently on the stack
    stateStackSize: function lexer_stateStackSize() {
        return this.conditionStack.length;
    },
    options: {
  xregexp: true,
  inputFilename: "lex.y",
  easy_keyword_rules: true,
  ranges: true
},
    JisonLexerError: JisonLexerError,
    performAction: function lexer__performAction(yy, yy_, $avoiding_name_collisions, YY_START) {

var YYSTATE = YY_START;
switch($avoiding_name_collisions) {
case 7 : 
/*! Conditions:: action */ 
/*! Rule::       \{ */ 
 yy.depth++; return 3; 
break;
case 8 : 
/*! Conditions:: action */ 
/*! Rule::       \} */ 
 
                                            if (yy.depth == 0) {
                                                this.pushState('trail');
                                            } else {
                                                yy.depth--;
                                            }
                                            return 4;
                                         
break;
case 10 : 
/*! Conditions:: conditions */ 
/*! Rule::       > */ 
 this.popState(); return 6; 
break;
case 13 : 
/*! Conditions:: rules */ 
/*! Rule::       {BR}+ */ 
 /* empty */ 
break;
case 14 : 
/*! Conditions:: rules */ 
/*! Rule::       {WS}+{BR}+ */ 
 /* empty */ 
break;
case 15 : 
/*! Conditions:: rules */ 
/*! Rule::       {WS}+ */ 
 this.pushState('indented'); 
break;
case 16 : 
/*! Conditions:: rules */ 
/*! Rule::       %% */ 
 this.pushState('code'); return 19; 
break;
case 17 : 
/*! Conditions:: rules */ 
/*! Rule::       {ANY_LITERAL_CHAR}+ */ 
 
                                            // accept any non-regex, non-lex, non-string-delim,
                                            // non-escape-starter, non-space character as-is
                                            return 36;
                                         
break;
case 20 : 
/*! Conditions:: options */ 
/*! Rule::       "{DOUBLEQUOTED_STRING_CONTENT}" */ 
 yy_.yytext = this.matches[1]; return 39;   // value is always a string type 
break;
case 21 : 
/*! Conditions:: options */ 
/*! Rule::       '{QUOTED_STRING_CONTENT}' */ 
 yy_.yytext = this.matches[1]; return 39;   // value is always a string type 
break;
case 22 : 
/*! Conditions:: INITIAL start_condition trail rules macro path options */ 
/*! Rule::       \/\/[^\r\n]* */ 
 /* skip single-line comment */ 
break;
case 23 : 
/*! Conditions:: INITIAL start_condition trail rules macro path options */ 
/*! Rule::       \/\*(.|\n|\r)*?\*\/ */ 
 /* skip multi-line comment */ 
break;
case 25 : 
/*! Conditions:: options */ 
/*! Rule::       {BR}{WS}+(?=\S) */ 
 /* skip leading whitespace on the next line of input, when followed by more options */ 
break;
case 26 : 
/*! Conditions:: options */ 
/*! Rule::       {BR} */ 
 this.popState(); return 38; 
break;
case 27 : 
/*! Conditions:: options */ 
/*! Rule::       {WS}+ */ 
 /* skip whitespace */ 
break;
case 29 : 
/*! Conditions:: start_condition */ 
/*! Rule::       {BR}+ */ 
 this.popState(); 
break;
case 30 : 
/*! Conditions:: start_condition */ 
/*! Rule::       {WS}+ */ 
 /* empty */ 
break;
case 31 : 
/*! Conditions:: trail */ 
/*! Rule::       {WS}*{BR}+ */ 
 this.pushState('rules'); 
break;
case 32 : 
/*! Conditions:: indented */ 
/*! Rule::       \{ */ 
 yy.depth = 0; this.pushState('action'); return 3; 
break;
case 33 : 
/*! Conditions:: indented */ 
/*! Rule::       %\{(?:.|{BR})*?%\} */ 
 this.pushState('trail'); yy_.yytext = yy_.yytext.substr(2, yy_.yyleng - 4); return 23; 
break;
case 34 : 
/*! Conditions:: indented trail rules macro INITIAL */ 
/*! Rule::       %\{(?:.|{BR})*?%\} */ 
 yy_.yytext = yy_.yytext.substr(2, yy_.yyleng - 4); return 23; 
break;
case 35 : 
/*! Conditions:: indented */ 
/*! Rule::       %include\b */ 
 
                                            // This is an include instruction in place of an action:
                                            // thanks to the `<indented>.+` rule immediately below we need to semi-duplicate
                                            // the `%include` token recognition here vs. the almost-identical rule for the same
                                            // further below.
                                            // There's no real harm as we need to do something special in this case anyway:
                                            // push 2 (two!) conditions.
                                            //
                                            // (Anecdotal: to find that we needed to place this almost-copy here to make the test grammar
                                            // parse correctly took several hours as the debug facilities were - and are - too meager to
                                            // quickly diagnose the problem while we hadn't. So the code got littered with debug prints
                                            // and finally it hit me what the *F* went wrong, after which I saw I needed to add *this* rule!)

                                            // first push the 'trail' condition which will be the follow-up after we're done parsing the path parameter...
                                            this.pushState('trail');
                                            // then push the immediate need: the 'path' condition.
                                            this.pushState('path');
                                            return 41;
                                         
break;
case 36 : 
/*! Conditions:: indented */ 
/*! Rule::       .* */ 
 this.popState(); return 23; 
break;
case 37 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {ID} */ 
 this.pushState('macro'); return 20; 
break;
case 38 : 
/*! Conditions:: macro */ 
/*! Rule::       {BR}+ */ 
 this.popState('macro'); 
break;
case 39 : 
/*! Conditions:: macro */ 
/*! Rule::       {ANY_LITERAL_CHAR}+ */ 
 
                                            // accept any non-regex, non-lex, non-string-delim,
                                            // non-escape-starter, non-space character as-is
                                            return 36;
                                         
break;
case 40 : 
/*! Conditions:: indented trail rules macro INITIAL */ 
/*! Rule::       {BR}+ */ 
 /* empty */ 
break;
case 41 : 
/*! Conditions:: indented trail rules macro INITIAL */ 
/*! Rule::       \s+ */ 
 /* empty */ 
break;
case 42 : 
/*! Conditions:: indented trail rules macro INITIAL */ 
/*! Rule::       "{DOUBLEQUOTED_STRING_CONTENT}" */ 
 yy_.yytext = yy_.yytext.replace(/\\"/g,'"'); return 35; 
break;
case 43 : 
/*! Conditions:: indented trail rules macro INITIAL */ 
/*! Rule::       '{QUOTED_STRING_CONTENT}' */ 
 yy_.yytext = yy_.yytext.replace(/\\'/g,"'"); return 35; 
break;
case 44 : 
/*! Conditions:: indented trail rules macro INITIAL */ 
/*! Rule::       \[ */ 
 this.pushState('set'); return 30; 
break;
case 57 : 
/*! Conditions:: indented trail rules macro INITIAL */ 
/*! Rule::       < */ 
 this.pushState('conditions'); return 5; 
break;
case 58 : 
/*! Conditions:: indented trail rules macro INITIAL */ 
/*! Rule::       \/! */ 
 return 28;                    // treated as `(?!atom)` 
break;
case 59 : 
/*! Conditions:: indented trail rules macro INITIAL */ 
/*! Rule::       \/ */ 
 return 14;                     // treated as `(?=atom)` 
break;
case 61 : 
/*! Conditions:: indented trail rules macro INITIAL */ 
/*! Rule::       \\. */ 
 yy_.yytext = yy_.yytext.replace(/^\\/g, ''); return 33; 
break;
case 64 : 
/*! Conditions:: indented trail rules macro INITIAL */ 
/*! Rule::       %options\b */ 
 this.pushState('options'); return 37; 
break;
case 65 : 
/*! Conditions:: indented trail rules macro INITIAL */ 
/*! Rule::       %s\b */ 
 this.pushState('start_condition'); return 21; 
break;
case 66 : 
/*! Conditions:: indented trail rules macro INITIAL */ 
/*! Rule::       %x\b */ 
 this.pushState('start_condition'); return 22; 
break;
case 67 : 
/*! Conditions:: INITIAL trail code */ 
/*! Rule::       %include\b */ 
 this.pushState('path'); return 41; 
break;
case 68 : 
/*! Conditions:: INITIAL rules trail code */ 
/*! Rule::       %{NAME}([^\r\n]*) */ 
 
                                            /* ignore unrecognized decl */
                                            console.warn('LEX: ignoring unsupported lexer option: ', yy_.yytext, ' while lexing in ', this.topState(), ' state:', this._input, ' /////// ', this.matched);
                                            // this.pushState('options');
                                            yy_.yytext = [
                                                this.matches[1],            // {NAME}
                                                this.matches[2].trim()      // optional value/parameters
                                            ];
                                            return 24;
                                         
break;
case 69 : 
/*! Conditions:: indented trail rules macro INITIAL */ 
/*! Rule::       %% */ 
 this.pushState('rules'); return 19; 
break;
case 77 : 
/*! Conditions:: set */ 
/*! Rule::       \] */ 
 this.popState('set'); return 31; 
break;
case 79 : 
/*! Conditions:: code */ 
/*! Rule::       [^\r\n]+ */ 
 return 43;      // the bit of CODE just before EOF... 
break;
case 80 : 
/*! Conditions:: path */ 
/*! Rule::       {BR} */ 
 this.popState(); this.unput(yy_.yytext); 
break;
case 81 : 
/*! Conditions:: path */ 
/*! Rule::       "{DOUBLEQUOTED_STRING_CONTENT}" */ 
 yy_.yytext = this.matches[1]; this.popState(); return 42; 
break;
case 82 : 
/*! Conditions:: path */ 
/*! Rule::       '{QUOTED_STRING_CONTENT}' */ 
 yy_.yytext = this.matches[1]; this.popState(); return 42; 
break;
case 83 : 
/*! Conditions:: path */ 
/*! Rule::       {WS}+ */ 
 // skip whitespace in the line 
break;
case 84 : 
/*! Conditions:: path */ 
/*! Rule::       [^\s\r\n]+ */ 
 this.popState(); return 42; 
break;
case 85 : 
/*! Conditions:: * */ 
/*! Rule::       . */ 
 
                                            /* b0rk on bad characters */
                                            var l0 = Math.max(0, yy_.yylloc.last_column - yy_.yylloc.first_column);
                                            var l2 = 3;
                                            var l1 = Math.min(79 - 4 - l0 - l2, yy_.yylloc.first_column, 0);
                                            throw new Error('unsupported lexer input: "' + yy_.yytext + '" @ ' + this.describeYYLLOC(yy_.yylloc) + ' while lexing in ' + this.topState() + ' state:\n' + indent(this.showPosition(l1, l2), 4));
                                         
break;
default:
  return this.simpleCaseActionClusters[$avoiding_name_collisions];
}
},
    simpleCaseActionClusters: {

  /*! Conditions:: action */ 
  /*! Rule::       \/\*(.|\n|\r)*?\*\/ */ 
   0 : 26,
  /*! Conditions:: action */ 
  /*! Rule::       \/\/.* */ 
   1 : 26,
  /*! Conditions:: action */ 
  /*! Rule::       \/[^ /]*?['"{}][^ ]*?\/ */ 
   2 : 26,
  /*! Conditions:: action */ 
  /*! Rule::       "(\\\\|\\"|[^"])*" */ 
   3 : 26,
  /*! Conditions:: action */ 
  /*! Rule::       '(\\\\|\\'|[^'])*' */ 
   4 : 26,
  /*! Conditions:: action */ 
  /*! Rule::       [/"'][^{}/"']+ */ 
   5 : 26,
  /*! Conditions:: action */ 
  /*! Rule::       [^{}/"']+ */ 
   6 : 26,
  /*! Conditions:: conditions */ 
  /*! Rule::       {NAME} */ 
   9 : 20,
  /*! Conditions:: conditions */ 
  /*! Rule::       , */ 
   11 : 8,
  /*! Conditions:: conditions */ 
  /*! Rule::       \* */ 
   12 : 7,
  /*! Conditions:: options */ 
  /*! Rule::       {NAME} */ 
   18 : 20,
  /*! Conditions:: options */ 
  /*! Rule::       = */ 
   19 : 18,
  /*! Conditions:: options */ 
  /*! Rule::       [^\s\r\n]+ */ 
   24 : 40,
  /*! Conditions:: start_condition */ 
  /*! Rule::       {ID} */ 
   28 : 25,
  /*! Conditions:: indented trail rules macro INITIAL */ 
  /*! Rule::       \| */ 
   45 : 9,
  /*! Conditions:: indented trail rules macro INITIAL */ 
  /*! Rule::       \(\?: */ 
   46 : 27,
  /*! Conditions:: indented trail rules macro INITIAL */ 
  /*! Rule::       \(\?= */ 
   47 : 27,
  /*! Conditions:: indented trail rules macro INITIAL */ 
  /*! Rule::       \(\?! */ 
   48 : 27,
  /*! Conditions:: indented trail rules macro INITIAL */ 
  /*! Rule::       \( */ 
   49 : 10,
  /*! Conditions:: indented trail rules macro INITIAL */ 
  /*! Rule::       \) */ 
   50 : 11,
  /*! Conditions:: indented trail rules macro INITIAL */ 
  /*! Rule::       \+ */ 
   51 : 12,
  /*! Conditions:: indented trail rules macro INITIAL */ 
  /*! Rule::       \* */ 
   52 : 7,
  /*! Conditions:: indented trail rules macro INITIAL */ 
  /*! Rule::       \? */ 
   53 : 13,
  /*! Conditions:: indented trail rules macro INITIAL */ 
  /*! Rule::       \^ */ 
   54 : 16,
  /*! Conditions:: indented trail rules macro INITIAL */ 
  /*! Rule::       , */ 
   55 : 8,
  /*! Conditions:: indented trail rules macro INITIAL */ 
  /*! Rule::       <<EOF>> */ 
   56 : 17,
  /*! Conditions:: indented trail rules macro INITIAL */ 
  /*! Rule::       \\([0-7]{1,3}|[rfntvsSbBwWdD\\*+()${}|[\]\/.^?]|c[A-Z]|x[0-9A-F]{2}|u[a-fA-F0-9]{4}) */ 
   60 : 33,
  /*! Conditions:: indented trail rules macro INITIAL */ 
  /*! Rule::       \$ */ 
   62 : 17,
  /*! Conditions:: indented trail rules macro INITIAL */ 
  /*! Rule::       \. */ 
   63 : 15,
  /*! Conditions:: indented trail rules macro INITIAL */ 
  /*! Rule::       \{\d+(,\s?\d+|,)?\} */ 
   70 : 34,
  /*! Conditions:: indented trail rules macro INITIAL */ 
  /*! Rule::       \{{ID}\} */ 
   71 : 29,
  /*! Conditions:: set options */ 
  /*! Rule::       \{{ID}\} */ 
   72 : 29,
  /*! Conditions:: indented trail rules macro INITIAL */ 
  /*! Rule::       \{ */ 
   73 : 3,
  /*! Conditions:: indented trail rules macro INITIAL */ 
  /*! Rule::       \} */ 
   74 : 4,
  /*! Conditions:: set */ 
  /*! Rule::       (?:\\\\|\\\]|[^\]{])+ */ 
   75 : 32,
  /*! Conditions:: set */ 
  /*! Rule::       \{ */ 
   76 : 32,
  /*! Conditions:: code */ 
  /*! Rule::       [^\r\n]*(\r|\n)+ */ 
   78 : 43,
  /*! Conditions:: * */ 
  /*! Rule::       $ */ 
   86 : 1
},
    rules: [
/^(?:\/\*(.|\n|\r)*?\*\/)/,
/^(?:\/\/.*)/,
/^(?:\/[^ \/]*?['"{}][^ ]*?\/)/,
/^(?:"(\\\\|\\"|[^"])*")/,
/^(?:'(\\\\|\\'|[^'])*')/,
/^(?:[\/"'][^{}\/"']+)/,
/^(?:[^{}\/"']+)/,
/^(?:\{)/,
/^(?:\})/,
new XRegExp("^(?:([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}\\-_]*(?:[\\p{Alphabetic}\\p{Number}_]))?))", ""),
/^(?:>)/,
/^(?:,)/,
/^(?:\*)/,
/^(?:(\r\n|\n|\r)+)/,
/^(?:([^\S\n\r])+(\r\n|\n|\r)+)/,
/^(?:([^\S\n\r])+)/,
/^(?:%%)/,
/^(?:([^\s!"$%'-,.\/:-?\[-\^{-}])+)/,
new XRegExp("^(?:([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}\\-_]*(?:[\\p{Alphabetic}\\p{Number}_]))?))", ""),
/^(?:=)/,
/^(?:"((?:\\"|\\[^"]|[^"\\])*)")/,
/^(?:'((?:\\'|\\[^']|[^'\\])*)')/,
/^(?:\/\/[^\r\n]*)/,
/^(?:\/\*(.|\n|\r)*?\*\/)/,
/^(?:\S+)/,
/^(?:(\r\n|\n|\r)([^\S\n\r])+(?=\S))/,
/^(?:(\r\n|\n|\r))/,
/^(?:([^\S\n\r])+)/,
new XRegExp("^(?:([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}_])*))", ""),
/^(?:(\r\n|\n|\r)+)/,
/^(?:([^\S\n\r])+)/,
/^(?:([^\S\n\r])*(\r\n|\n|\r)+)/,
/^(?:\{)/,
/^(?:%\{(?:.|(\r\n|\n|\r))*?%\})/,
/^(?:%\{(?:.|(\r\n|\n|\r))*?%\})/,
/^(?:%include\b)/,
/^(?:.*)/,
new XRegExp("^(?:([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}_])*))", ""),
/^(?:(\r\n|\n|\r)+)/,
/^(?:([^\s!"$%'-,.\/:-?\[-\^{-}])+)/,
/^(?:(\r\n|\n|\r)+)/,
/^(?:\s+)/,
/^(?:"((?:\\"|\\[^"]|[^"\\])*)")/,
/^(?:'((?:\\'|\\[^']|[^'\\])*)')/,
/^(?:\[)/,
/^(?:\|)/,
/^(?:\(\?:)/,
/^(?:\(\?=)/,
/^(?:\(\?!)/,
/^(?:\()/,
/^(?:\))/,
/^(?:\+)/,
/^(?:\*)/,
/^(?:\?)/,
/^(?:\^)/,
/^(?:,)/,
/^(?:<<EOF>>)/,
/^(?:<)/,
/^(?:\/!)/,
/^(?:\/)/,
/^(?:\\([0-7]{1,3}|[$(-+.\/?BDSW\[-\^bdfnr-tvw{-}]|c[A-Z]|x[\dA-F]{2}|u[\dA-Fa-f]{4}))/,
/^(?:\\.)/,
/^(?:\$)/,
/^(?:\.)/,
/^(?:%options\b)/,
/^(?:%s\b)/,
/^(?:%x\b)/,
/^(?:%include\b)/,
new XRegExp("^(?:%([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}\\-_]*(?:[\\p{Alphabetic}\\p{Number}_]))?)([^\\n\\r]*))", ""),
/^(?:%%)/,
/^(?:\{\d+(,\s?\d+|,)?\})/,
new XRegExp("^(?:\\{([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}_])*)\\})", ""),
new XRegExp("^(?:\\{([\\p{Alphabetic}_](?:[\\p{Alphabetic}\\p{Number}_])*)\\})", ""),
/^(?:\{)/,
/^(?:\})/,
/^(?:(?:\\\\|\\\]|[^\]{])+)/,
/^(?:\{)/,
/^(?:\])/,
/^(?:[^\r\n]*(\r|\n)+)/,
/^(?:[^\r\n]+)/,
/^(?:(\r\n|\n|\r))/,
/^(?:"((?:\\"|\\[^"]|[^"\\])*)")/,
/^(?:'((?:\\'|\\[^']|[^'\\])*)')/,
/^(?:([^\S\n\r])+)/,
/^(?:\S+)/,
/^(?:.)/,
/^(?:$)/
],
    conditions: {
  "code": {
    rules: [
      67,
      68,
      78,
      79,
      85,
      86
    ],
    inclusive: false
  },
  "start_condition": {
    rules: [
      22,
      23,
      28,
      29,
      30,
      85,
      86
    ],
    inclusive: false
  },
  "options": {
    rules: [
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      72,
      85,
      86
    ],
    inclusive: false
  },
  "conditions": {
    rules: [
      9,
      10,
      11,
      12,
      85,
      86
    ],
    inclusive: false
  },
  "action": {
    rules: [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      85,
      86
    ],
    inclusive: false
  },
  "path": {
    rules: [
      22,
      23,
      80,
      81,
      82,
      83,
      84,
      85,
      86
    ],
    inclusive: false
  },
  "set": {
    rules: [
      72,
      75,
      76,
      77,
      85,
      86
    ],
    inclusive: false
  },
  "indented": {
    rules: [
      32,
      33,
      34,
      35,
      36,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      69,
      70,
      71,
      73,
      74,
      85,
      86
    ],
    inclusive: true
  },
  "trail": {
    rules: [
      22,
      23,
      31,
      34,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      73,
      74,
      85,
      86
    ],
    inclusive: true
  },
  "rules": {
    rules: [
      13,
      14,
      15,
      16,
      17,
      22,
      23,
      34,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      68,
      69,
      70,
      71,
      73,
      74,
      85,
      86
    ],
    inclusive: true
  },
  "macro": {
    rules: [
      22,
      23,
      34,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      69,
      70,
      71,
      73,
      74,
      85,
      86
    ],
    inclusive: true
  },
  "INITIAL": {
    rules: [
      22,
      23,
      34,
      37,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      73,
      74,
      85,
      86
    ],
    inclusive: true
  }
}
};


function indent(s, i) {
    var a = s.split('\n');
    var pf = (new Array(i + 1)).join(' ');
    return pf + a.join('\n' + pf);
};

return lexer;
})();
parser.lexer = lexer;

function Parser() {
  this.yy = {};
}
Parser.prototype = parser;
parser.Parser = Parser;

return new Parser();
})();




if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
  exports.parser = lexParser;
  exports.Parser = lexParser.Parser;
  exports.parse = function () {
    return lexParser.parse.apply(lexParser, arguments);
  };

}
