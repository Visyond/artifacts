/* parser generated by jison 0.4.17-121 */
/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, errorHash),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$, yystack, ...),
 *               where `...` denotes the (optional) additional arguments the user passed to
 *               `parser.parse(str, ...)`
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input),
 *
 *    lexer: {
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash),
 *        setInput: function(input),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(),
 *        upcomingInput: function(),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index),
 *        next: function(),
 *        lex: function(),
 *        begin: function(condition),
 *        popState: function(),
 *        _currentRules: function(),
 *        topState: function(),
 *        pushState: function(condition),
 *        stateStackSize: function(),
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The parseError function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be empty when we cannot easily produce such a set)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 *  When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 *  instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 *  When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 *  from either the parser or lexer, `this` will still reference the related *parser*
 *  instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 *  Please do note that in the latter situation, the `expected` field will be omitted as
 *  type of failure is assumed not to be due to *parse errors* but rather due to user
 *  action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy [, optional parse() args])
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval [, optional parse() args]) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *  
 *  yy: {
 *      pre_parse:  function(yy [, optional parse() args])
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval [, optional parse() args]) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another. 
 *                 When it does not return any value, the parser will return the original
 *                 `retval`. 
 *                 This function is invoked immediately before `Parser.post_parse()`.
 *
 *      parseError: function(str, hash)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */
var bnf = (function () {

// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript
function JisonParserError(msg, hash) {
    this.message = msg;
    this.hash = hash;
    var stacktrace;
    if (hash && hash.exception instanceof Error) {
      var ex2 = hash.exception;
      this.message = ex2.message || msg;
      stacktrace = ex2.stack;
    }
    if (!stacktrace) {
      stacktrace = (new Error(msg)).stack;
    }
    if (stacktrace) {
      this.stack = stacktrace;
    }
}
JisonParserError.prototype = Object.create(Error.prototype);
JisonParserError.prototype.constructor = JisonParserError;
JisonParserError.prototype.name = 'JisonParserError';


// helper: reconstruct the productions[] table
function bp(s) {
        var rv = [];
        var p = s.pop;
        var r = s.rule;
        for (var i = 0, l = p.length; i < l; i++) {
            rv.push([
                p[i],
                r[i]
            ]);
        }
        return rv;
    }

// helper: reconstruct the defaultActions[] table
function bda(s) {
        var rv = {};
        var d = s.idx;
        var p = s.pop;
        var r = s.rule;
        for (var i = 0, l = d.length; i < l; i++) {
            var j = d[i];
            rv[j] = [
                p[i],
                r[i]
            ];
        }
        return rv;
    }

// helper: reconstruct the 'goto' table
function bt(s) {
        var rv = [];
        var d = s.len;
        var y = s.symbol;
        var t = s.type;
        var a = s.state;
        var m = s.mode;
        var g = s.goto;
        for (var i = 0, l = d.length; i < l; i++) {
            var n = d[i];
            var q = {};
            for (var j = 0; j < n; j++) {
                var z = y.shift();
                switch (t.shift()) {
                case 2:
                    q[z] = [
                        m.shift(),
                        g.shift()
                    ];
                    break;

                case 0:
                    q[z] = a.shift();
                    break;

                default:
                    // type === 1: accept
                    q[z] = [
                        3
                    ];
                }
            }
            rv.push(q);
        }
        return rv;
    }

// helper: runlength encoding with increment step: code, length: step (default step = 0)
// `this` references an array
function s(c, l, a) {
        a = a || 0;
        for (var i = 0; i < l; i++) {
            this.push(c);
            c += a;
        }
    }

// helper: duplicate sequence from *relative* offset and length.
// `this` references an array
function c(i, l) {
        i = this.length - i;
        for (l += i; i < l; i++) {
            this.push(this[i]);
        }
    }

// helper: unpack an array using helpers and data, all passed in an array argument 'a'.
function u(a) {
        var rv = [];
        for (var i = 0, l = a.length; i < l; i++) {
            var e = a[i];
            // Is this entry a helper function?
            if (typeof e === 'function') {
                i++;
                e.apply(rv, a[i]);
            } else {
                rv.push(e);
            }
        }
        return rv;
    }

var parser = {
EOF: 1,
TERROR: 2,
trace: function no_op_trace() { },
JisonParserError: JisonParserError,
yy: {},
options: {
  type: "lalr"
},
symbols_: {
  "$accept": 0,
  "$end": 1,
  "%%": 129,
  "(": 40,
  ")": 41,
  "*": 42,
  "+": 43,
  ":": 58,
  ";": 59,
  "=": 61,
  "?": 63,
  "ACTION": 135,
  "ACTION_BODY": 194,
  "ALIAS": 189,
  "ARROW_ACTION": 192,
  "CODE": 199,
  "DEBUG": 147,
  "EOF": 132,
  "EPSILON": 184,
  "ID": 154,
  "IMPORT": 149,
  "INCLUDE": 196,
  "INIT_CODE": 152,
  "INTEGER": 176,
  "LEFT": 167,
  "LEX_BLOCK": 140,
  "NAME": 160,
  "NONASSOC": 169,
  "OPTIONS": 156,
  "OPTIONS_END": 158,
  "OPTION_VALUE": 161,
  "PARSER_TYPE": 164,
  "PARSE_PARAM": 162,
  "PATH": 197,
  "PREC": 190,
  "RIGHT": 168,
  "START": 138,
  "STRING": 155,
  "TOKEN": 142,
  "TOKEN_TYPE": 175,
  "UNKNOWN_DECL": 148,
  "action": 183,
  "action_body": 191,
  "action_comments_body": 193,
  "action_ne": 153,
  "associativity": 166,
  "declaration": 137,
  "declaration_list": 128,
  "error": 2,
  "expression": 187,
  "expression_suffix": 185,
  "extra_parser_module_code": 133,
  "full_token_definitions": 143,
  "grammar": 130,
  "handle": 181,
  "handle_action": 180,
  "handle_list": 179,
  "handle_sublist": 186,
  "id": 139,
  "id_list": 171,
  "import_name": 150,
  "import_path": 151,
  "include_macro_code": 136,
  "module_code_chunk": 198,
  "one_full_token": 172,
  "operator": 141,
  "option": 159,
  "option_list": 157,
  "optional_action_header_block": 134,
  "optional_end_block": 131,
  "optional_module_code_chunk": 195,
  "optional_token_type": 170,
  "options": 146,
  "parse_param": 144,
  "parser_type": 145,
  "prec": 182,
  "production": 178,
  "production_list": 177,
  "spec": 127,
  "suffix": 188,
  "symbol": 165,
  "token_description": 174,
  "token_list": 163,
  "token_value": 173,
  "{": 123,
  "|": 124,
  "}": 125
},
terminals_: {
  1: "$end",
  2: "error",
  40: "(",
  41: ")",
  42: "*",
  43: "+",
  58: ":",
  59: ";",
  61: "=",
  63: "?",
  123: "{",
  124: "|",
  125: "}",
  129: "%%",
  132: "EOF",
  135: "ACTION",
  138: "START",
  140: "LEX_BLOCK",
  142: "TOKEN",
  147: "DEBUG",
  148: "UNKNOWN_DECL",
  149: "IMPORT",
  152: "INIT_CODE",
  154: "ID",
  155: "STRING",
  156: "OPTIONS",
  158: "OPTIONS_END",
  160: "NAME",
  161: "OPTION_VALUE",
  162: "PARSE_PARAM",
  164: "PARSER_TYPE",
  167: "LEFT",
  168: "RIGHT",
  169: "NONASSOC",
  175: "TOKEN_TYPE",
  176: "INTEGER",
  184: "EPSILON",
  189: "ALIAS",
  190: "PREC",
  192: "ARROW_ACTION",
  194: "ACTION_BODY",
  196: "INCLUDE",
  197: "PATH",
  199: "CODE"
},
productions_: bp({
  pop: u([
  127,
  131,
  131,
  s,
  [134, 3],
  128,
  128,
  s,
  [137, 13],
  150,
  150,
  151,
  151,
  146,
  157,
  157,
  s,
  [159, 3],
  144,
  145,
  141,
  s,
  [166, 3],
  163,
  163,
  143,
  143,
  s,
  [172, 3],
  170,
  170,
  173,
  174,
  171,
  171,
  130,
  177,
  177,
  178,
  179,
  179,
  180,
  180,
  181,
  181,
  186,
  186,
  185,
  185,
  s,
  [187, 3],
  s,
  [188, 4],
  182,
  182,
  165,
  165,
  139,
  s,
  [153, 4],
  183,
  183,
  s,
  [191, 4],
  193,
  193,
  133,
  133,
  136,
  136,
  198,
  198,
  195,
  195
]),
  rule: u([
  5,
  0,
  2,
  0,
  s,
  [2, 3],
  0,
  2,
  1,
  1,
  c,
  [3, 3],
  s,
  [1, 5],
  3,
  3,
  c,
  [6, 5],
  c,
  [15, 3],
  3,
  3,
  s,
  [2, 3],
  s,
  [1, 3],
  2,
  1,
  2,
  2,
  c,
  [11, 3],
  0,
  c,
  [11, 7],
  1,
  4,
  3,
  c,
  [31, 3],
  2,
  0,
  c,
  [6, 4],
  c,
  [37, 3],
  c,
  [23, 5],
  c,
  [5, 4],
  c,
  [56, 5],
  0,
  0,
  1,
  5,
  4,
  c,
  [39, 3],
  c,
  [33, 3],
  c,
  [6, 3],
  0
])
}),
performAction: function anonymous(yytext, yy, yystate /* action[1] */, $$ /* vstack */, options) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1 : 
/*! Production::     spec : declaration_list '%%' grammar optional_end_block EOF */
 
            this.$ = $$[$0-4];
            if ($$[$0-1] && $$[$0-1].trim() !== '') {
                yy.addDeclaration(this.$, { include: $$[$0-1] });
            }
            return extend(this.$, $$[$0-2]);
         
break;
case 3 : 
/*! Production::     optional_end_block : '%%' extra_parser_module_code */
 case 32 : 
/*! Production::     parse_param : PARSE_PARAM token_list */
 case 33 : 
/*! Production::     parser_type : PARSER_TYPE symbol */
 case 65 : 
/*! Production::     expression : ID */
 case 74 : 
/*! Production::     symbol : id */
 case 75 : 
/*! Production::     symbol : STRING */
 case 76 : 
/*! Production::     id : ID */
 case 78 : 
/*! Production::     action_ne : ACTION */
 case 79 : 
/*! Production::     action_ne : include_macro_code */
 case 81 : 
/*! Production::     action : action_ne */
 case 84 : 
/*! Production::     action_body : action_comments_body */
 case 87 : 
/*! Production::     action_comments_body : ACTION_BODY */
 case 89 : 
/*! Production::     extra_parser_module_code : optional_module_code_chunk */
 case 93 : 
/*! Production::     module_code_chunk : CODE */
 case 95 : 
/*! Production::     optional_module_code_chunk : module_code_chunk */
  this.$ = $$[$0];  
break;
case 4 : 
/*! Production::     optional_action_header_block :  */
 case 8 : 
/*! Production::     declaration_list :  */
  this.$ = {};  
break;
case 5 : 
/*! Production::     optional_action_header_block : optional_action_header_block ACTION */
 case 6 : 
/*! Production::     optional_action_header_block : optional_action_header_block include_macro_code */
 
            this.$ = $$[$0-1];
            yy.addDeclaration(this.$, { actionInclude: $$[$0] });
         
break;
case 7 : 
/*! Production::     declaration_list : declaration_list declaration */
  this.$ = $$[$0-1]; yy.addDeclaration(this.$, $$[$0]);  
break;
case 9 : 
/*! Production::     declaration : START id */
  this.$ = {start: $$[$0]};  
break;
case 10 : 
/*! Production::     declaration : LEX_BLOCK */
  this.$ = {lex: $$[$0]};  
break;
case 11 : 
/*! Production::     declaration : operator */
  this.$ = {operator: $$[$0]};  
break;
case 12 : 
/*! Production::     declaration : TOKEN full_token_definitions */
  this.$ = {token_list: $$[$0]};  
break;
case 13 : 
/*! Production::     declaration : ACTION */
 case 14 : 
/*! Production::     declaration : include_macro_code */
  this.$ = {include: $$[$0]};  
break;
case 15 : 
/*! Production::     declaration : parse_param */
  this.$ = {parseParam: $$[$0]};  
break;
case 16 : 
/*! Production::     declaration : parser_type */
  this.$ = {parserType: $$[$0]};  
break;
case 17 : 
/*! Production::     declaration : options */
  this.$ = {options: $$[$0]};  
break;
case 18 : 
/*! Production::     declaration : DEBUG */
  this.$ = {options: [['debug', true]]};  
break;
case 19 : 
/*! Production::     declaration : UNKNOWN_DECL */
  this.$ = {unknownDecl: $$[$0]};  
break;
case 20 : 
/*! Production::     declaration : IMPORT import_name import_path */
  this.$ = {imports: {name: $$[$0-1], path: $$[$0]}};  
break;
case 21 : 
/*! Production::     declaration : INIT_CODE import_name action_ne */
  this.$ = {initCode: {qualifier: $$[$0-1], include: $$[$0]}};  
break;
case 26 : 
/*! Production::     options : OPTIONS option_list OPTIONS_END */
 case 77 : 
/*! Production::     action_ne : '{' action_body '}' */
  this.$ = $$[$0-1];  
break;
case 27 : 
/*! Production::     option_list : option_list option */
 case 38 : 
/*! Production::     token_list : token_list symbol */
 case 49 : 
/*! Production::     id_list : id_list id */
  this.$ = $$[$0-1]; this.$.push($$[$0]);  
break;
case 28 : 
/*! Production::     option_list : option */
 case 39 : 
/*! Production::     token_list : symbol */
 case 50 : 
/*! Production::     id_list : id */
 case 56 : 
/*! Production::     handle_list : handle_action */
  this.$ = [$$[$0]];  
break;
case 29 : 
/*! Production::     option : NAME[option] */
  this.$ = [$$[$0], true];  
break;
case 30 : 
/*! Production::     option : NAME[option] '=' OPTION_VALUE[value] */
 case 31 : 
/*! Production::     option : NAME[option] '=' NAME[value] */
  this.$ = [$$[$0-2], $$[$0]];  
break;
case 34 : 
/*! Production::     operator : associativity token_list */
  this.$ = [$$[$0-1]]; this.$.push.apply(this.$, $$[$0]);  
break;
case 35 : 
/*! Production::     associativity : LEFT */
  this.$ = 'left';  
break;
case 36 : 
/*! Production::     associativity : RIGHT */
  this.$ = 'right';  
break;
case 37 : 
/*! Production::     associativity : NONASSOC */
  this.$ = 'nonassoc';  
break;
case 40 : 
/*! Production::     full_token_definitions : optional_token_type id_list */
 
            var rv = [];
            var lst = $$[$0];
            for (var i = 0, len = lst.length; i < len; i++) {
                var id = lst[i];
                var m = {id: id};
                if ($$[$0-1]) {
                    m.type = $$[$0-1];
                }
                rv.push(m);
            }
            this.$ = rv;
         
break;
case 41 : 
/*! Production::     full_token_definitions : optional_token_type one_full_token */
 
            var m = $$[$0];
            if ($$[$0-1]) {
                m.type = $$[$0-1];
            }
            this.$ = [m];
         
break;
case 42 : 
/*! Production::     one_full_token : id token_value token_description */
 
            this.$ = {
                id: $$[$0-2],
                value: $$[$0-1]
            };
         
break;
case 43 : 
/*! Production::     one_full_token : id token_description */
 
            this.$ = {
                id: $$[$0-1],
                description: $$[$0]
            };
         
break;
case 44 : 
/*! Production::     one_full_token : id token_value */
 
            this.$ = {
                id: $$[$0-1],
                value: $$[$0],
                description: $token_description
            };
         
break;
case 45 : 
/*! Production::     optional_token_type :  */
  this.$ = false;  
break;
case 51 : 
/*! Production::     grammar : optional_action_header_block production_list */
 
            this.$ = $$[$0-1];
            this.$.grammar = $$[$0];
         
break;
case 52 : 
/*! Production::     production_list : production_list production */
 
            this.$ = $$[$0-1];
            if ($$[$0][0] in this.$) {
                this.$[$$[$0][0]] = this.$[$$[$0][0]].concat($$[$0][1]);
            } else {
                this.$[$$[$0][0]] = $$[$0][1];
            }
         
break;
case 53 : 
/*! Production::     production_list : production */
  this.$ = {}; this.$[$$[$0][0]] = $$[$0][1];  
break;
case 54 : 
/*! Production::     production : id ':' handle_list ';' */
 this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 55 : 
/*! Production::     handle_list : handle_list '|' handle_action */
 
            this.$ = $$[$0-2];
            this.$.push($$[$0]);
         
break;
case 57 : 
/*! Production::     handle_action : handle prec action */
 
            this.$ = [($$[$0-2].length ? $$[$0-2].join(' ') : '')];
            if ($$[$0]) {
                this.$.push($$[$0]);
            }
            if ($$[$0-1]) {
                this.$.push($$[$0-1]);
            }
            if (this.$.length === 1) {
                this.$ = this.$[0];
            }
         
break;
case 58 : 
/*! Production::     handle_action : EPSILON action */
 
            this.$ = [''];
            if ($$[$0]) {
                this.$.push($$[$0]);
            }
            if (this.$.length === 1) {
                this.$ = this.$[0];
            }
         
break;
case 59 : 
/*! Production::     handle : handle expression_suffix */
 
            this.$ = $$[$0-1];
            this.$.push($$[$0]);
         
break;
case 60 : 
/*! Production::     handle :  */
 
            this.$ = [];
         
break;
case 61 : 
/*! Production::     handle_sublist : handle_sublist '|' handle */
 
            this.$ = $$[$0-2];
            this.$.push($$[$0].join(' '));
         
break;
case 62 : 
/*! Production::     handle_sublist : handle */
 
            this.$ = [$$[$0].join(' ')];
         
break;
case 63 : 
/*! Production::     expression_suffix : expression suffix ALIAS */
 
            this.$ = $$[$0-2] + $$[$0-1] + "[" + $$[$0] + "]";
         
break;
case 64 : 
/*! Production::     expression_suffix : expression suffix */
 case 88 : 
/*! Production::     action_comments_body : action_comments_body ACTION_BODY */
 case 94 : 
/*! Production::     module_code_chunk : module_code_chunk CODE */
 
            this.$ = $$[$0-1] + $$[$0];
         
break;
case 66 : 
/*! Production::     expression : STRING */
 
            // Re-encode the string *anyway* as it will
            // be made part of the rule rhs a.k.a. production (type: *string*) again and we want
            // to be able to handle all tokens, including *significant space*
            // encoded as literal tokens in a grammar such as this: `rule: A ' ' B`.
            if ($$[$0].indexOf("'") >= 0) {
                this.$ = '"' + $$[$0] + '"';
            } else {
                this.$ = "'" + $$[$0] + "'";
            }
         
break;
case 67 : 
/*! Production::     expression : '(' handle_sublist ')' */
 
            this.$ = '(' + $$[$0-1].join(' | ') + ')';
         
break;
case 68 : 
/*! Production::     suffix :  */
 case 82 : 
/*! Production::     action :  */
 case 83 : 
/*! Production::     action_body :  */
 case 96 : 
/*! Production::     optional_module_code_chunk :  */
  this.$ = '';  
break;
case 72 : 
/*! Production::     prec : PREC symbol */
 
            this.$ = { prec: $$[$0] };
         
break;
case 73 : 
/*! Production::     prec :  */
 
            this.$ = null;
         
break;
case 80 : 
/*! Production::     action_ne : ARROW_ACTION */
  this.$ = '$$ =' + $$[$0] + ';';  
break;
case 85 : 
/*! Production::     action_body : action_body '{' action_body '}' action_comments_body */
  this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];  
break;
case 86 : 
/*! Production::     action_body : action_body '{' action_body '}' */
  this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];  
break;
case 90 : 
/*! Production::     extra_parser_module_code : optional_module_code_chunk include_macro_code extra_parser_module_code */
  this.$ = $$[$0-2] + $$[$0-1] + $$[$0];  
break;
case 91 : 
/*! Production::     include_macro_code : INCLUDE PATH */
 
            var fileContent = fs.readFileSync($$[$0], { encoding: 'utf-8' });
            // And no, we don't support nested '%include':
            this.$ = '\n// Included by Jison: ' + $$[$0] + ':\n\n' + fileContent + '\n\n// End Of Include by Jison: ' + $$[$0] + '\n\n';
         
break;
case 92 : 
/*! Production::     include_macro_code : INCLUDE error */
 
            console.error("%include MUST be followed by a valid file path");
         
break;
}
},
table: bt({
  len: u([
  18,
  1,
  23,
  5,
  16,
  2,
  16,
  16,
  4,
  s,
  [16, 7],
  3,
  3,
  5,
  2,
  s,
  [5, 4, -1],
  2,
  2,
  3,
  7,
  16,
  24,
  16,
  4,
  1,
  3,
  s,
  [6, 3],
  20,
  18,
  22,
  22,
  21,
  21,
  20,
  16,
  3,
  2,
  3,
  1,
  6,
  5,
  s,
  [3, 3],
  1,
  18,
  16,
  21,
  s,
  [16, 4],
  5,
  s,
  [18, 4],
  16,
  2,
  2,
  1,
  1,
  s,
  [3, 4],
  14,
  17,
  18,
  16,
  17,
  16,
  2,
  3,
  c,
  [62, 3],
  6,
  c,
  [4, 3],
  13,
  9,
  16,
  18,
  5,
  3,
  1,
  3,
  13,
  9,
  11,
  4,
  16,
  15,
  15,
  7,
  s,
  [2, 5],
  6,
  s,
  [12, 4],
  2,
  7,
  4,
  11,
  15,
  6,
  3,
  7
]),
  symbol: u([
  127,
  128,
  129,
  135,
  138,
  140,
  142,
  147,
  148,
  149,
  152,
  156,
  162,
  164,
  167,
  168,
  169,
  196,
  1,
  129,
  s,
  [135, 4, 1],
  140,
  141,
  142,
  s,
  [144, 6, 1],
  c,
  [23, 4],
  s,
  [166, 4, 1],
  196,
  130,
  134,
  135,
  154,
  196,
  c,
  [45, 16],
  139,
  154,
  c,
  [18, 16],
  c,
  [16, 16],
  143,
  154,
  170,
  175,
  c,
  [36, 32],
  c,
  [16, 80],
  150,
  154,
  155,
  c,
  [3, 3],
  139,
  154,
  155,
  163,
  165,
  2,
  197,
  c,
  [7, 5],
  c,
  [5, 3],
  165,
  157,
  159,
  160,
  154,
  155,
  154,
  155,
  154,
  155,
  129,
  131,
  132,
  135,
  136,
  139,
  154,
  177,
  178,
  c,
  [57, 17],
  58,
  59,
  123,
  124,
  c,
  [20, 9],
  154,
  155,
  c,
  [22, 6],
  176,
  192,
  c,
  [247, 19],
  171,
  172,
  154,
  151,
  154,
  155,
  123,
  135,
  154,
  155,
  192,
  196,
  c,
  [6, 8],
  136,
  153,
  c,
  [42, 5],
  139,
  c,
  [63, 11],
  165,
  c,
  [159, 13],
  c,
  [82, 8],
  196,
  c,
  [103, 20],
  192,
  c,
  [22, 24],
  124,
  s,
  [129, 4, 3],
  c,
  [22, 7],
  c,
  [64, 7],
  199,
  c,
  [21, 21],
  c,
  [124, 29],
  c,
  [37, 7],
  158,
  159,
  160,
  158,
  160,
  61,
  158,
  160,
  132,
  132,
  133,
  195,
  196,
  198,
  199,
  129,
  132,
  139,
  154,
  178,
  c,
  [472, 3],
  c,
  [475, 4],
  132,
  154,
  58,
  c,
  [66, 11],
  c,
  [363, 32],
  c,
  [161, 8],
  173,
  174,
  176,
  c,
  [432, 65],
  123,
  125,
  191,
  193,
  194,
  c,
  [211, 3],
  c,
  [23, 15],
  c,
  [18, 36],
  c,
  [348, 18],
  c,
  [242, 17],
  160,
  160,
  161,
  1,
  132,
  132,
  136,
  196,
  132,
  196,
  199,
  c,
  [3, 3],
  c,
  [231, 3],
  40,
  c,
  [361, 3],
  c,
  [435, 3],
  179,
  180,
  181,
  184,
  190,
  c,
  [476, 11],
  c,
  [243, 17],
  c,
  [82, 7],
  174,
  c,
  [192, 26],
  c,
  [116, 24],
  123,
  125,
  123,
  125,
  194,
  c,
  [3, 3],
  158,
  c,
  [365, 3],
  c,
  [361, 6],
  c,
  [122, 3],
  59,
  124,
  59,
  124,
  c,
  [123, 7],
  182,
  185,
  187,
  c,
  [122, 3],
  c,
  [12, 4],
  136,
  153,
  183,
  c,
  [607, 18],
  c,
  [231, 18],
  c,
  [290, 5],
  c,
  [81, 3],
  132,
  c,
  [191, 10],
  c,
  [190, 6],
  c,
  [68, 9],
  40,
  41,
  c,
  [23, 6],
  c,
  [20, 3],
  c,
  [749, 4],
  s,
  [40, 4, 1],
  59,
  63,
  c,
  [18, 5],
  188,
  189,
  c,
  [20, 3],
  c,
  [16, 11],
  c,
  [15, 21],
  124,
  154,
  155,
  181,
  186,
  c,
  [162, 4],
  123,
  125,
  c,
  [6, 4],
  c,
  [76, 4],
  c,
  [84, 10],
  c,
  [35, 6],
  c,
  [12, 34],
  41,
  124,
  c,
  [73, 5],
  185,
  187,
  123,
  125,
  193,
  194,
  c,
  [145, 11],
  c,
  [110, 21],
  c,
  [206, 3],
  c,
  [46, 7]
]),
  type: u([
  0,
  0,
  s,
  [2, 16],
  1,
  2,
  2,
  c,
  [21, 4],
  0,
  c,
  [6, 3],
  c,
  [28, 8],
  c,
  [8, 5],
  c,
  [42, 18],
  c,
  [26, 8],
  s,
  [2, 29],
  c,
  [72, 3],
  s,
  [2, 113],
  c,
  [191, 5],
  c,
  [3, 5],
  c,
  [7, 8],
  c,
  [5, 8],
  c,
  [32, 10],
  c,
  [224, 4],
  c,
  [97, 59],
  c,
  [64, 4],
  c,
  [22, 17],
  c,
  [18, 6],
  c,
  [24, 12],
  c,
  [252, 112],
  c,
  [124, 34],
  c,
  [261, 10],
  c,
  [194, 6],
  c,
  [200, 16],
  c,
  [178, 48],
  c,
  [326, 59],
  c,
  [70, 81],
  c,
  [282, 40],
  c,
  [116, 8],
  c,
  [117, 38],
  c,
  [155, 64],
  c,
  [555, 19],
  c,
  [859, 11],
  c,
  [250, 40],
  c,
  [40, 17],
  c,
  [719, 11],
  c,
  [28, 15],
  c,
  [757, 6],
  c,
  [192, 49],
  c,
  [388, 73],
  c,
  [886, 7],
  c,
  [342, 39],
  0,
  0
]),
  state: u([
  1,
  2,
  10,
  4,
  7,
  11,
  12,
  13,
  18,
  26,
  27,
  28,
  30,
  31,
  33,
  36,
  39,
  37,
  38,
  39,
  43,
  38,
  39,
  44,
  45,
  46,
  48,
  52,
  54,
  50,
  53,
  57,
  55,
  56,
  58,
  64,
  61,
  39,
  66,
  39,
  66,
  68,
  71,
  72,
  73,
  54,
  75,
  77,
  78,
  79,
  82,
  83,
  87,
  89,
  90,
  91,
  93,
  97,
  72,
  73,
  100,
  101,
  103,
  64,
  108,
  107,
  109,
  83,
  110,
  91,
  64,
  108,
  111,
  39,
  112,
  113,
  118,
  117,
  101,
  103,
  123,
  124,
  101,
  103
]),
  mode: u([
  s,
  [2, 16],
  s,
  [1, 16],
  s,
  [2, 19],
  c,
  [20, 20],
  c,
  [34, 48],
  s,
  [2, 79],
  c,
  [179, 19],
  1,
  c,
  [21, 4],
  c,
  [80, 57],
  c,
  [61, 3],
  c,
  [96, 16],
  c,
  [13, 11],
  s,
  [2, 120],
  c,
  [122, 25],
  c,
  [25, 4],
  c,
  [3, 12],
  c,
  [392, 17],
  c,
  [436, 41],
  c,
  [220, 68],
  c,
  [288, 91],
  c,
  [258, 5],
  c,
  [228, 13],
  c,
  [113, 34],
  c,
  [518, 58],
  c,
  [333, 17],
  c,
  [18, 9],
  c,
  [528, 6],
  c,
  [612, 41],
  c,
  [37, 15],
  c,
  [67, 6],
  c,
  [61, 15],
  c,
  [92, 5],
  c,
  [21, 3],
  c,
  [533, 68],
  c,
  [69, 40],
  c,
  [130, 5],
  c,
  [231, 14],
  c,
  [269, 29],
  1
]),
  goto: u([
  s,
  [8, 16],
  3,
  9,
  5,
  6,
  8,
  s,
  [14, 4, 1],
  22,
  20,
  21,
  23,
  24,
  25,
  19,
  s,
  [4, 3],
  s,
  [7, 16],
  29,
  s,
  [10, 16],
  s,
  [11, 16],
  45,
  32,
  s,
  [13, 16],
  s,
  [14, 16],
  s,
  [15, 16],
  s,
  [16, 16],
  s,
  [17, 16],
  s,
  [18, 16],
  s,
  [19, 16],
  34,
  35,
  34,
  35,
  29,
  40,
  42,
  41,
  29,
  40,
  29,
  40,
  47,
  35,
  35,
  36,
  36,
  37,
  37,
  49,
  2,
  51,
  29,
  19,
  s,
  [9, 16],
  s,
  [76, 24],
  s,
  [12, 16],
  29,
  46,
  59,
  60,
  s,
  [22, 6],
  s,
  [23, 6],
  62,
  63,
  65,
  19,
  s,
  [34, 9],
  29,
  40,
  s,
  [34, 7],
  s,
  [39, 18],
  s,
  [74, 22],
  s,
  [75, 22],
  s,
  [91, 21],
  s,
  [92, 21],
  s,
  [32, 9],
  29,
  40,
  s,
  [32, 7],
  s,
  [33, 16],
  67,
  47,
  28,
  28,
  69,
  29,
  29,
  70,
  96,
  96,
  74,
  51,
  51,
  29,
  s,
  [5, 3],
  s,
  [6, 3],
  s,
  [53, 3],
  76,
  s,
  [40, 9],
  29,
  s,
  [40, 7],
  s,
  [41, 16],
  s,
  [50, 10],
  81,
  s,
  [50, 6],
  80,
  50,
  s,
  [20, 16],
  s,
  [24, 16],
  s,
  [25, 16],
  s,
  [21, 16],
  83,
  83,
  84,
  s,
  [78, 18],
  s,
  [79, 18],
  s,
  [80, 18],
  s,
  [38, 18],
  s,
  [26, 16],
  27,
  27,
  86,
  85,
  1,
  3,
  89,
  19,
  95,
  95,
  88,
  s,
  [93, 3],
  s,
  [52, 3],
  s,
  [60, 7],
  92,
  s,
  [60, 3],
  s,
  [49, 17],
  s,
  [44, 9],
  81,
  s,
  [44, 7],
  s,
  [43, 16],
  s,
  [47, 17],
  s,
  [48, 16],
  95,
  94,
  84,
  84,
  96,
  s,
  [87, 3],
  30,
  30,
  31,
  31,
  c,
  [346, 3],
  s,
  [94, 3],
  98,
  99,
  56,
  56,
  106,
  s,
  [73, 4],
  104,
  105,
  102,
  73,
  73,
  82,
  62,
  82,
  c,
  [536, 3],
  s,
  [42, 16],
  s,
  [77, 18],
  c,
  [274, 3],
  s,
  [88, 3],
  90,
  s,
  [54, 3],
  c,
  [176, 11],
  c,
  [61, 6],
  s,
  [59, 11],
  29,
  40,
  68,
  68,
  114,
  116,
  68,
  115,
  s,
  [68, 9],
  s,
  [65, 15],
  s,
  [66, 15],
  s,
  [60, 5],
  58,
  58,
  81,
  81,
  95,
  119,
  55,
  55,
  57,
  57,
  s,
  [72, 6],
  s,
  [64, 8],
  120,
  s,
  [64, 3],
  s,
  [69, 12],
  s,
  [70, 12],
  s,
  [71, 12],
  121,
  122,
  106,
  62,
  62,
  104,
  105,
  86,
  86,
  84,
  s,
  [63, 11],
  s,
  [67, 15],
  s,
  [60, 5],
  85,
  85,
  96,
  106,
  61,
  61,
  104,
  105
])
}),
defaultActions: bda({
  idx: u([
  32,
  70,
  71,
  97
]),
  pop: u([
  s,
  [2, 4]
]),
  rule: u([
  46,
  1,
  3,
  90
])
}),
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new this.JisonParserError(str, hash);
    }
},
quoteName: function quoteName(id_str) {
    return '"' + id_str + '"';
},
describeSymbol: function describeSymbol(symbol) {
    if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {
        return this.terminal_descriptions_[symbol];
    } 
    else if (symbol === this.EOF) {
        return 'end of input';
    }
    else if (this.terminals_[symbol]) {
        return this.quoteName(this.terminals_[symbol]);
    }
    return null;
},
parse: function parse(input) {
    var self = this,
        stack = [0],        // state stack: stores pairs of state (odd indexes) and token (even indexes)

        vstack = [null],    // semantic value stack

        table = this.table;
    var recovering = 0;     // (only used when the grammar contains error recovery rules)
    var TERROR = this.TERROR,
        EOF = this.EOF;

    var args = stack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer;
    if (this.__lexer__) {
        lexer = this.__lexer__;
    } else {
        lexer = this.__lexer__ = Object.create(this.lexer);
    }

    var sharedState = {
      yy: {}
    };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;






    lexer.setInput(input, sharedState.yy);






    
    if (typeof lexer.yytext === 'undefined') {
        lexer.yytext = '';
    }
    var yytext = lexer.yytext;
    if (typeof lexer.yylineno === 'undefined') {
        lexer.yylineno = 0;
    }


    // Does the shared state override the default `parseError` that already comes with this instance?
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    }
    // Does the shared state override the default `quoteName` that already comes with this instance?
    if (typeof sharedState.yy.quoteName === 'function') {
        this.quoteName = sharedState.yy.quoteName;
    }

    function popStack(n) {

        if (!n) return;
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;

    }


    function lex() {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }


    var symbol = null;
    var preErrorSymbol = null;
    var state, action, r;
    var yyval = {};
    var p, len, this_production;

    var newState;
    var expected = [];
    var retval = false;

    if (this.pre_parse) {
        this.pre_parse.apply(this, [sharedState.yy].concat(args));
    }
    if (sharedState.yy.pre_parse) {
        sharedState.yy.pre_parse.apply(this, [sharedState.yy].concat(args));
    }


    // Return the rule stack depth where the nearest error rule can be found.
    // Return FALSE when no error recovery rule was found.
    function locateNearestErrorRecoveryRule(state) {
        var stack_probe = stack.length - 1;
        var depth = 0;

        // try to recover from error
        for (;;) {
            // check for error recovery rule in this state
            var action = table[state][TERROR];
            if (action && action.length && action[0]) {
                return depth;
            }
            if (state === 0 /* $accept rule */ || stack_probe < 2) {
                return false; // No suitable error recovery rule available.
            }
            stack_probe -= 2; // popStack(1): [symbol, action]
            state = stack[stack_probe];
            ++depth;
        }
    }


    // Produce a (more or less) human-readable list of expected tokens at the point of failure.
    // 
    // The produced list may contain token or token set descriptions instead of the tokens
    // themselves to help turning this output into something that easier to read by humans.
    // 
    // The returned list (array) will not contain any duplicate entries.
    function collect_expected_token_set(state) {
        var tokenset = [];
        var check = {};
        // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
        // If so, use that one instead of the less palatable token set.
        if (self.state_descriptions_ && self.state_descriptions_[p]) {
            return [
                self.state_descriptions_[p]
            ];
        }
        for (var p in table[state]) {
            if (p !== TERROR) {
                var d = self.describeSymbol(p);
                if (d && !check[d]) {
                    tokenset.push(d);
                    check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.
                }
            }
        }
        return tokenset;
    }

    try {
        for (;;) {
            // retrieve state number from top of stack
            state = stack[stack.length - 1];

            // use default actions if available
            if (this.defaultActions[state]) {
                action = this.defaultActions[state];
            } else {
                // The single `==` condition below covers both these `===` comparisons in a single
                // operation:
                // 
                //     if (symbol === null || typeof symbol === 'undefined') ...
                if (symbol == null) {
                    symbol = lex();
                }
                // read action for current state and first input
                action = table[state] && table[state][symbol];
            }




            // handle parse error
            if (!action || !action.length || !action[0]) {
                var error_rule_depth = 0;
                var errStr = null;

                if (!recovering) {
                    // first see if there's any chance at hitting an error recovery rule:
                    error_rule_depth = locateNearestErrorRecoveryRule(state);

                    // Report error
                    expected = collect_expected_token_set(state);
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ':\n' + lexer.showPosition() + '\n';
                    } else {
                        errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                    }
                    if (expected.length) {
                        errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + (this.describeSymbol(symbol) || symbol);
                    } else {
                        errStr += 'Unexpected ' + (this.describeSymbol(symbol) || symbol);
                    }
                    r = this.parseError(errStr, p = {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        token_id: symbol,
                        line: lexer.yylineno,
                        loc: lexer.yylloc,
                        expected: expected,
                        recoverable: (error_rule_depth !== false),
                        state_stack: stack,
                        value_stack: vstack,

                        lexer: lexer
                    });

                    if (!p.recoverable) {
                        retval = r;
                        break;
                    }
                } else if (preErrorSymbol !== EOF) {
                    error_rule_depth = locateNearestErrorRecoveryRule(state);
                }



                // just recovered from another error
                if (recovering === 3) {
                    if (symbol === EOF || preErrorSymbol === EOF) {
                        retval = this.parseError(errStr || 'Parsing halted while starting to recover from another error.', {
                            text: lexer.match,
                            token: this.terminals_[symbol] || symbol,
                            token_id: symbol,
                            line: lexer.yylineno,
                            loc: lexer.yylloc,
                            expected: expected,
                            recoverable: false,
                            state_stack: stack,
                            value_stack: vstack,

                            lexer: lexer
                        });
                        break;
                    }

                    // discard current lookahead and grab another

                    yytext = lexer.yytext;


                    symbol = lex();


                }

                // try to recover from error
                if (error_rule_depth === false) {
                    retval = this.parseError(errStr || 'Parsing halted. No suitable error recovery rule available.', {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        token_id: symbol,
                        line: lexer.yylineno,
                        loc: lexer.yylloc,
                        expected: expected,
                        recoverable: false,
                        state_stack: stack,
                        value_stack: vstack,

                        lexer: lexer
                    });
                    break;
                }
                popStack(error_rule_depth);

                preErrorSymbol = (symbol === TERROR ? null : symbol); // save the lookahead token
                symbol = TERROR;            // insert generic error symbol as new lookahead
                recovering = 3;             // allow 3 real symbols to be shifted before reporting a new error



                continue;
            }



            switch (action[0]) {
            // catch misc. parse failures:
            default:
                // this shouldn't happen, unless resolve defaults are off
                if (action[0] instanceof Array) {
                    retval = this.parseError('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        token_id: symbol,
                        line: lexer.yylineno,
                        loc: lexer.yylloc,
                        expected: expected,
                        recoverable: false,
                        state_stack: stack,
                        value_stack: vstack,

                        lexer: lexer
                    });
                    break;
                }
                // Another case of better safe than sorry: in case state transitions come out of another error recovery process
                // or a buggy LUT (LookUp Table):
                retval = this.parseError('Parsing halted. No viable error recovery approach available due to internal system failure.', {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    token_id: symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc,
                    expected: expected,
                    recoverable: false,
                    state_stack: stack,
                    value_stack: vstack,

                    lexer: lexer
                });
                break;

            // shift:
            case 1: 
                //this.shiftCount++;
                stack.push(symbol);
                vstack.push(lexer.yytext);

                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution / no error
                    // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:

                    yytext = lexer.yytext;



                    if (recovering > 0) {
                        recovering--;

                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;

                }
    
                continue;

            // reduce:
            case 2:
                //this.reductionCount++;
                newState = action[1];
                this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards... 
                len = this_production[1];






                // perform semantic action
                yyval.$ = vstack[vstack.length - len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts










                r = this.performAction.apply(yyval, [yytext, sharedState.yy, newState, vstack].concat(args));

                if (typeof r !== 'undefined') {
                    retval = r;
                    break;
                }

                // pop off stack
                popStack(len);

                stack.push(this_production[0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);

                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                stack.push(newState);

                continue;

            // accept:
            case 3:
                retval = true;
                // Return the `$accept` rule's `$$` result, if available.
                // 
                // Also note that JISON always adds this top-most `$accept` rule (with implicit, 
                // default, action):
                //   
                //     $accept: <startSymbol> $end
                //                  %{ $$ = $1; @$ = @1; %}
                //     
                // which, combined with the parse kernel's `$accept` state behaviour coded below, 
                // will produce the `$$` value output of the <startSymbol> rule as the parse result, 
                // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                // 
                // In code:
                // 
                //                  %{
                //                      @$ = @1;            // if location tracking support is included
                //                      if (typeof $1 !== 'undefined')
                //                          return $1;
                //                      else
                //                          return true;           // the default parse result if the rule actions don't produce anything
                //                  %}
                if (typeof yyval.$ !== 'undefined') {
                    retval = yyval.$;
                }
                break;
            }

            // break out of loop: we accept or fail with error
            break;
        }
    } catch (ex) {
        // report exceptions through the parseError callback too:
        retval = this.parseError('Parsing aborted due to exception.', {
            exception: ex,
            text: lexer.match,
            token: this.terminals_[symbol] || symbol,
            token_id: symbol,
            line: lexer.yylineno,
            loc: lexer.yylloc,
            // expected: expected,
            recoverable: false,
            state_stack: stack,
            value_stack: vstack,

            lexer: lexer
        });
    } finally {
        var rv;

        if (sharedState.yy.post_parse) {
            rv = sharedState.yy.post_parse.apply(this, [sharedState.yy, retval].concat(args));
            if (typeof rv !== 'undefined') retval = rv;
        }
        if (this.post_parse) {
            rv = this.post_parse.apply(this, [sharedState.yy, retval].concat(args));
            if (typeof rv !== 'undefined') retval = rv;
        }
    }

    return retval;
}
};

var fs = require('fs');
var transform = require('./ebnf-transform').transform;
var ebnf = false;


// transform ebnf to bnf if necessary
function extend(json, grammar) {
    json.bnf = ebnf ? transform(grammar.grammar) : grammar.grammar;
    if (grammar.actionInclude) {
        json.actionInclude = grammar.actionInclude;
    }
    return json;
}


/* generated by jison-lex 0.3.4-121 */
var lexer = (function () {
// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript
function JisonLexerError(msg, hash) {
    this.message = msg;
    this.hash = hash;
    var stacktrace = (new Error(msg)).stack;
    if (stacktrace) {
      this.stack = stacktrace;
    }
}
JisonLexerError.prototype = Object.create(Error.prototype);
JisonLexerError.prototype.constructor = JisonLexerError;
JisonLexerError.prototype.name = 'JisonLexerError';

var lexer = {

EOF:1,

ERROR:2,

parseError:function parseError(str, hash) {
        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {
            return this.yy.parser.parseError(str, hash) || this.ERROR;
        } else {
            throw new this.JisonLexerError(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this._signaled_error_token = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        if (!this._input) {
            this.done = true;
            return null;
        }
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        // Count the linenumber up when we hit the LF (or a stand-alone CR).
        // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
        // and we advance immediately past the LF as well, returning both together as if
        // it was all a single 'character' only.
        var slice_len = 1;
        var lines = false;
        if (ch === '\n') {
            lines = true;
        } else if (ch === '\r') {
            lines = true;
            var ch2 = this._input[1];
            if (ch2 === '\n') {
                slice_len++;
                ch += ch2;
                this.yytext += ch2;
                this.yyleng++;
                this.offset++;
                this.match += ch2;
                this.matched += ch2;
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }
            }
        }
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(slice_len);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - len);
        this.matched = this.matched.substr(0, this.matched.length - len);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }

        this.yylloc.last_line = this.yylineno + 1;
        this.yylloc.last_column = (lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                + oldLines[oldLines.length - lines.length].length - lines[0].length :
                this.yylloc.first_column - len);

        if (this.options.ranges) {
            this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng - len;
        }
        this.yyleng = this.yytext.length;
        this.done = false;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            // when the parseError() call returns, we MUST ensure that the error is registered.
            // We accomplish this by signaling an 'error' token to be produced for the current
            // .lex() run.
            this._signaled_error_token = (this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: this.match,
                token: null,
                line: this.yylineno,
                loc: this.yylloc,
                lexer: this
            }) || this.ERROR);
        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// return (part of the) already matched input, i.e. for error messages
pastInput:function (maxSize) {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        if (maxSize < 0)
            maxSize = past.length;
        else if (!maxSize)
            maxSize = 20;
        return (past.length > maxSize ? '...' + past.substr(-maxSize) : past);
    },

// return (part of the) upcoming input, i.e. for error messages
upcomingInput:function (maxSize) {
        var next = this.match;
        if (maxSize < 0)
            maxSize = next.length + this._input.length;
        else if (!maxSize)
            maxSize = 20;
        if (next.length < maxSize) {
            next += this._input.substr(0, maxSize - next.length);
        }
        return (next.length > maxSize ? next.substr(0, maxSize) + '...' : next);
    },

// return a string which displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput().replace(/\s/g, ' ');
        var c = new Array(pre.length + 1).join('-');
        return pre + this.upcomingInput().replace(/\s/g, ' ') + '\n' + c + '^';
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset + this.yyleng];
        }
        this.offset += this.yyleng;
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        } else if (this._signaled_error_token) {
            // produce one 'error' token as .parseError() in reject() did not guarantee a failure signal by throwing an exception!
            token = this._signaled_error_token;
            this._signaled_error_token = false;
            return token;
        }
        return false;
    },

// return next match in input
next:function () {
        function clear() {
            this.yytext = '';
            this.yyleng = 0;
            this.match = '';
            this.matches = false;
            this._more = false;
            this._backtrack = false;
        }

        if (this.done) {
            clear.call(this);
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            clear.call(this);
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === '') {
            clear.call(this);
            this.done = true;
            return this.EOF;
        } else {
            token = this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: this.match + this._input,
                token: null,
                line: this.yylineno,
                loc: this.yylloc,
                lexer: this
            }) || this.ERROR;
            if (token === this.ERROR) {
                // we can try to recover from a lexer error that parseError() did not 'recover' for us, by moving forward at least one character at a time:
                if (!this.match.length) {
                    this.input();
                }
            }
            return token;
        }
    },

// return next match that has a token
lex:function lex() {
        var r;
        // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
        if (typeof this.options.pre_lex === 'function') {
            r = this.options.pre_lex.call(this);
        }
        while (!r) {
            r = this.next();
        }
        if (typeof this.options.post_lex === 'function') {
            // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.options.post_lex.call(this, r) || r;
        }
        return r;
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions['INITIAL'].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return 'INITIAL';
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {
  easy_keyword_rules: true,
  ranges: true
},
JisonLexerError: JisonLexerError,
performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {

var YYSTATE = YY_START;
switch($avoiding_name_collisions) {
case 0 : 
/*! Conditions:: token */ 
/*! Rule::       {BR} */ 
 this.popState(); 
break;
case 1 : 
/*! Conditions:: token */ 
/*! Rule::       %% */ 
 this.popState(); 
break;
case 2 : 
/*! Conditions:: token */ 
/*! Rule::       ; */ 
 this.popState(); 
break;
case 3 : 
/*! Conditions:: bnf ebnf */ 
/*! Rule::       %% */ 
 this.pushState('code'); return 129; 
break;
case 13 : 
/*! Conditions:: options */ 
/*! Rule::       "(\\\\|\\"|[^"])*" */ 
 yy_.yytext = yy_.yytext.substr(1, yy_.yytext.length - 2); return 161; 
break;
case 14 : 
/*! Conditions:: options */ 
/*! Rule::       '(\\\\|\\'|[^'])*' */ 
 yy_.yytext = yy_.yytext.substr(1, yy_.yytext.length - 2); return 161; 
break;
case 16 : 
/*! Conditions:: options */ 
/*! Rule::       {BR}+ */ 
 this.popState(); return 158; 
break;
case 17 : 
/*! Conditions:: options */ 
/*! Rule::       {WS}+ */ 
 /* skip whitespace */ 
break;
case 18 : 
/*! Conditions:: bnf ebnf token INITIAL */ 
/*! Rule::       {WS}+ */ 
 /* skip whitespace */ 
break;
case 19 : 
/*! Conditions:: bnf ebnf token INITIAL */ 
/*! Rule::       {BR}+ */ 
 /* skip newlines */ 
break;
case 20 : 
/*! Conditions:: bnf ebnf token INITIAL */ 
/*! Rule::       \/\/[^\r\n]* */ 
 /* skip single-line comment */ 
break;
case 21 : 
/*! Conditions:: bnf ebnf token INITIAL */ 
/*! Rule::       \/\*(.|\n|\r)*?\*\/ */ 
 /* skip multi-line comment */ 
break;
case 22 : 
/*! Conditions:: bnf ebnf token INITIAL */ 
/*! Rule::       \[{ID}\] */ 
 yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2); return 189; 
break;
case 26 : 
/*! Conditions:: bnf ebnf token INITIAL */ 
/*! Rule::       "[^"]+" */ 
 yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2); return 155; 
break;
case 27 : 
/*! Conditions:: bnf ebnf token INITIAL */ 
/*! Rule::       '[^']+' */ 
 yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2); return 155; 
break;
case 32 : 
/*! Conditions:: bnf ebnf token INITIAL */ 
/*! Rule::       %% */ 
 this.pushState(ebnf ? 'ebnf' : 'bnf'); return 129; 
break;
case 33 : 
/*! Conditions:: bnf ebnf token INITIAL */ 
/*! Rule::       %ebnf\b */ 
 if (!yy.options) { yy.options = {}; } ebnf = yy.options.ebnf = true; 
break;
case 34 : 
/*! Conditions:: bnf ebnf token INITIAL */ 
/*! Rule::       %debug\b */ 
 if (!yy.options) { yy.options = {}; } yy.options.debug = true; return 147; 
break;
case 41 : 
/*! Conditions:: bnf ebnf token INITIAL */ 
/*! Rule::       %token\b */ 
 this.pushState('token'); return 142; 
break;
case 43 : 
/*! Conditions:: bnf ebnf token INITIAL */ 
/*! Rule::       %options\b */ 
 this.pushState('options'); return 156; 
break;
case 47 : 
/*! Conditions:: INITIAL ebnf bnf code */ 
/*! Rule::       %include\b */ 
 this.pushState('path'); return 196; 
break;
case 48 : 
/*! Conditions:: bnf ebnf token INITIAL */ 
/*! Rule::       %{NAME}[^\r\n]* */ 
 
                                            /* ignore unrecognized decl */
                                            console.warn('ignoring unsupported parser option: ', yy_.yytext, ' while lexing in ', this.topState(), ' state');
                                            return 148;
                                         
break;
case 49 : 
/*! Conditions:: bnf ebnf token INITIAL */ 
/*! Rule::       <{ID}> */ 
 yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2); return 175; 
break;
case 50 : 
/*! Conditions:: bnf ebnf token INITIAL */ 
/*! Rule::       \{\{[\w\W]*?\}\} */ 
 yy_.yytext = yy_.yytext.substr(2, yy_.yyleng - 4); return 135; 
break;
case 51 : 
/*! Conditions:: bnf ebnf token INITIAL */ 
/*! Rule::       %\{(.|\r|\n)*?%\} */ 
 yy_.yytext = yy_.yytext.substr(2, yy_.yytext.length - 4); return 135; 
break;
case 52 : 
/*! Conditions:: bnf ebnf token INITIAL */ 
/*! Rule::       \{ */ 
 yy.depth = 0; this.pushState('action'); return 123; 
break;
case 53 : 
/*! Conditions:: bnf ebnf token INITIAL */ 
/*! Rule::       ->.* */ 
 yy_.yytext = yy_.yytext.substr(2, yy_.yyleng - 2); return 192; 
break;
case 54 : 
/*! Conditions:: bnf ebnf token INITIAL */ 
/*! Rule::       {HEX_NUMBER} */ 
 yy_.yytext = parseInt(yy_.yytext, 16); return 176; 
break;
case 55 : 
/*! Conditions:: bnf ebnf token INITIAL */ 
/*! Rule::       {DECIMAL_NUMBER}(?![xX0-9a-fA-F]) */ 
 yy_.yytext = parseInt(yy_.yytext, 10); return 176; 
break;
case 56 : 
/*! Conditions:: bnf ebnf token INITIAL */ 
/*! Rule::       . */ 
 
                                            throw new Error("unsupported input character: " + yy_.yytext + " @ " + JSON.stringify(yy_.yylloc)); /* b0rk on bad characters */
                                         
break;
case 60 : 
/*! Conditions:: action */ 
/*! Rule::       \/[^ /]*?['"{}'][^ ]*?\/ */ 
 return 194; // regexp with braces or quotes (and no spaces) 
break;
case 65 : 
/*! Conditions:: action */ 
/*! Rule::       \{ */ 
 yy.depth++; return 123; 
break;
case 66 : 
/*! Conditions:: action */ 
/*! Rule::       \} */ 
 if (yy.depth === 0) { this.popState(); } else { yy.depth--; } return 125; 
break;
case 68 : 
/*! Conditions:: code */ 
/*! Rule::       [^\r\n]+ */ 
 return 199;      // the bit of CODE just before EOF... 
break;
case 69 : 
/*! Conditions:: path */ 
/*! Rule::       {BR} */ 
 this.popState(); this.unput(yy_.yytext); 
break;
case 70 : 
/*! Conditions:: path */ 
/*! Rule::       '[^\r\n]+' */ 
 yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2); this.popState(); return 197; 
break;
case 71 : 
/*! Conditions:: path */ 
/*! Rule::       "[^\r\n]+" */ 
 yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2); this.popState(); return 197; 
break;
case 72 : 
/*! Conditions:: path */ 
/*! Rule::       {WS}+ */ 
 // skip whitespace in the line 
break;
case 73 : 
/*! Conditions:: path */ 
/*! Rule::       [^\s\r\n]+ */ 
 this.popState(); return 197; 
break;
default:
  return this.simpleCaseActionClusters[$avoiding_name_collisions];
}
},
simpleCaseActionClusters: {

  /*! Conditions:: bnf ebnf */ 
  /*! Rule::       %empty\b */ 
   4 : 184,
  /*! Conditions:: bnf ebnf */ 
  /*! Rule::       %epsilon\b */ 
   5 : 184,
  /*! Conditions:: ebnf */ 
  /*! Rule::       \( */ 
   6 : 40,
  /*! Conditions:: ebnf */ 
  /*! Rule::       \) */ 
   7 : 41,
  /*! Conditions:: ebnf */ 
  /*! Rule::       \* */ 
   8 : 42,
  /*! Conditions:: ebnf */ 
  /*! Rule::       \? */ 
   9 : 63,
  /*! Conditions:: ebnf */ 
  /*! Rule::       \+ */ 
   10 : 43,
  /*! Conditions:: options */ 
  /*! Rule::       {NAME} */ 
   11 : 160,
  /*! Conditions:: options */ 
  /*! Rule::       = */ 
   12 : 61,
  /*! Conditions:: options */ 
  /*! Rule::       [^\s\r\n]+ */ 
   15 : 161,
  /*! Conditions:: bnf ebnf token INITIAL */ 
  /*! Rule::       {ID} */ 
   23 : 154,
  /*! Conditions:: bnf ebnf token INITIAL */ 
  /*! Rule::       \$end\b */ 
   24 : 154,
  /*! Conditions:: bnf ebnf token INITIAL */ 
  /*! Rule::       \$eof\b */ 
   25 : 154,
  /*! Conditions:: token */ 
  /*! Rule::       [^\s\r\n]+ */ 
   28 : 'TOKEN_WORD',
  /*! Conditions:: bnf ebnf token INITIAL */ 
  /*! Rule::       : */ 
   29 : 58,
  /*! Conditions:: bnf ebnf token INITIAL */ 
  /*! Rule::       ; */ 
   30 : 59,
  /*! Conditions:: bnf ebnf token INITIAL */ 
  /*! Rule::       \| */ 
   31 : 124,
  /*! Conditions:: bnf ebnf token INITIAL */ 
  /*! Rule::       %parser-type\b */ 
   35 : 164,
  /*! Conditions:: bnf ebnf token INITIAL */ 
  /*! Rule::       %prec\b */ 
   36 : 190,
  /*! Conditions:: bnf ebnf token INITIAL */ 
  /*! Rule::       %start\b */ 
   37 : 138,
  /*! Conditions:: bnf ebnf token INITIAL */ 
  /*! Rule::       %left\b */ 
   38 : 167,
  /*! Conditions:: bnf ebnf token INITIAL */ 
  /*! Rule::       %right\b */ 
   39 : 168,
  /*! Conditions:: bnf ebnf token INITIAL */ 
  /*! Rule::       %nonassoc\b */ 
   40 : 169,
  /*! Conditions:: bnf ebnf token INITIAL */ 
  /*! Rule::       %parse-param\b */ 
   42 : 162,
  /*! Conditions:: bnf ebnf token INITIAL */ 
  /*! Rule::       %lex[\w\W]*?{BR}\s*\/lex\b */ 
   44 : 140,
  /*! Conditions:: bnf ebnf token INITIAL */ 
  /*! Rule::       %code\b */ 
   45 : 152,
  /*! Conditions:: bnf ebnf token INITIAL */ 
  /*! Rule::       %import\b */ 
   46 : 149,
  /*! Conditions:: * */ 
  /*! Rule::       $ */ 
   57 : 132,
  /*! Conditions:: action */ 
  /*! Rule::       \/\*(.|\n|\r)*?\*\/ */ 
   58 : 194,
  /*! Conditions:: action */ 
  /*! Rule::       \/\/[^\r\n]* */ 
   59 : 194,
  /*! Conditions:: action */ 
  /*! Rule::       "(\\\\|\\"|[^"])*" */ 
   61 : 194,
  /*! Conditions:: action */ 
  /*! Rule::       '(\\\\|\\'|[^'])*' */ 
   62 : 194,
  /*! Conditions:: action */ 
  /*! Rule::       [/"'][^{}/"']+ */ 
   63 : 194,
  /*! Conditions:: action */ 
  /*! Rule::       [^{}/"']+ */ 
   64 : 194,
  /*! Conditions:: code */ 
  /*! Rule::       [^\r\n]*(\r|\n)+ */ 
   67 : 199
},
rules: [
/^(?:(\r\n|\n|\r))/,
/^(?:%%)/,
/^(?:;)/,
/^(?:%%)/,
/^(?:%empty\b)/,
/^(?:%epsilon\b)/,
/^(?:\()/,
/^(?:\))/,
/^(?:\*)/,
/^(?:\?)/,
/^(?:\+)/,
/^(?:([a-zA-Z_](?:[a-zA-Z0-9_-]*[a-zA-Z0-9_])?))/,
/^(?:=)/,
/^(?:"(\\\\|\\"|[^"])*")/,
/^(?:'(\\\\|\\'|[^'])*')/,
/^(?:[^\s\r\n]+)/,
/^(?:(\r\n|\n|\r)+)/,
/^(?:([^\S\r\n])+)/,
/^(?:([^\S\r\n])+)/,
/^(?:(\r\n|\n|\r)+)/,
/^(?:\/\/[^\r\n]*)/,
/^(?:\/\*(.|\n|\r)*?\*\/)/,
/^(?:\[([a-zA-Z_][a-zA-Z0-9_]*)\])/,
/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/,
/^(?:\$end\b)/,
/^(?:\$eof\b)/,
/^(?:"[^"]+")/,
/^(?:'[^']+')/,
/^(?:[^\s\r\n]+)/,
/^(?::)/,
/^(?:;)/,
/^(?:\|)/,
/^(?:%%)/,
/^(?:%ebnf\b)/,
/^(?:%debug\b)/,
/^(?:%parser-type\b)/,
/^(?:%prec\b)/,
/^(?:%start\b)/,
/^(?:%left\b)/,
/^(?:%right\b)/,
/^(?:%nonassoc\b)/,
/^(?:%token\b)/,
/^(?:%parse-param\b)/,
/^(?:%options\b)/,
/^(?:%lex[\w\W]*?(\r\n|\n|\r)\s*\/lex\b)/,
/^(?:%code\b)/,
/^(?:%import\b)/,
/^(?:%include\b)/,
/^(?:%([a-zA-Z_](?:[a-zA-Z0-9_-]*[a-zA-Z0-9_])?)[^\r\n]*)/,
/^(?:<([a-zA-Z_][a-zA-Z0-9_]*)>)/,
/^(?:\{\{[\w\W]*?\}\})/,
/^(?:%\{(.|\r|\n)*?%\})/,
/^(?:\{)/,
/^(?:->.*)/,
/^(?:(0[xX][0-9a-fA-F]+))/,
/^(?:([1-9][0-9]*)(?![xX0-9a-fA-F]))/,
/^(?:.)/,
/^(?:$)/,
/^(?:\/\*(.|\n|\r)*?\*\/)/,
/^(?:\/\/[^\r\n]*)/,
/^(?:\/[^ \/]*?['"{}'][^ ]*?\/)/,
/^(?:"(\\\\|\\"|[^"])*")/,
/^(?:'(\\\\|\\'|[^'])*')/,
/^(?:[\/"'][^{}\/"']+)/,
/^(?:[^{}\/"']+)/,
/^(?:\{)/,
/^(?:\})/,
/^(?:[^\r\n]*(\r|\n)+)/,
/^(?:[^\r\n]+)/,
/^(?:(\r\n|\n|\r))/,
/^(?:'[^\r\n]+')/,
/^(?:"[^\r\n]+")/,
/^(?:([^\S\r\n])+)/,
/^(?:[^\s\r\n]+)/
],
conditions: {
  "bnf": {
    rules: [
      3,
      4,
      5,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57
    ],
    inclusive: true
  },
  "ebnf": {
    rules: [
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57
    ],
    inclusive: true
  },
  "token": {
    rules: [
      0,
      1,
      2,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57
    ],
    inclusive: true
  },
  "action": {
    rules: [
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66
    ],
    inclusive: false
  },
  "code": {
    rules: [
      47,
      57,
      67,
      68
    ],
    inclusive: false
  },
  "path": {
    rules: [
      57,
      69,
      70,
      71,
      72,
      73
    ],
    inclusive: false
  },
  "options": {
    rules: [
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      57
    ],
    inclusive: false
  },
  "INITIAL": {
    rules: [
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57
    ],
    inclusive: true
  }
}
};

// lexer.JisonLexerError = JisonLexerError;
return lexer;
})();
parser.lexer = lexer;

function Parser() {
  this.yy = {};
}
Parser.prototype = parser;
parser.Parser = Parser;
// parser.JisonParserError = JisonParserError;

return new Parser();
})();




if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = bnf;
exports.Parser = bnf.Parser;
exports.parse = function () {
  return bnf.parse.apply(bnf, arguments);
};

}
